[2024-01-05 16:57:05,326: INFO: utils: This is a sample log]
[2024-01-07 13:52:52,706: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 13:52:52,709: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-07 14:00:08,754: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 14:00:08,755: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-07 14:07:38,364: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 14:07:38,365: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-07 14:07:38,365: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-07 14:11:43,012: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 14:11:43,013: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-07 14:11:43,013: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-07 14:12:15,100: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 14:12:15,100: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-07 14:15:09,121: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 14:15:09,121: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-07 14:16:34,583: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 14:16:59,601: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 14:16:59,602: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-07 17:03:48,304: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 17:03:48,305: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-07 17:06:21,967: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 17:21:37,122: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 17:22:40,160: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 17:22:56,406: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 19:42:25,904: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 19:49:48,383: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 19:49:48,394: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 19:58:31,987: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 19:58:31,988: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 20:06:25,825: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 20:07:13,414: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 20:07:13,415: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 20:08:29,305: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 20:08:29,307: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 20:09:38,813: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 20:09:38,813: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 20:10:27,952: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 20:10:27,952: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 20:18:10,890: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 20:18:10,891: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 20:18:10,903: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 20:18:10,920: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 20:20:38,218: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 20:20:38,218: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 20:20:40,284: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:20:41,306: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:20:42,353: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2140259251088) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 20:20:42,362: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:20:44,798: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 20:20:48,026: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 20:20:50,852: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:20:50,871: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 20:20:53,893: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:20:57,140: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:20:59,950: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:02,766: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:05,613: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:08,419: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:11,226: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:14,041: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:16,828: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:19,639: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:22,428: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:22,723: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 20:21:22,957: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 20:21:24,962: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:21:26,457: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:21:27,977: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2140540053008) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 20:21:27,979: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:21:30,849: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 20:21:34,308: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 20:21:37,125: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 20:22:10,302: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 20:22:12,285: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:22:13,744: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:22:15,264: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2140450251536) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 20:22:15,266: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 20:22:18,135: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 20:22:23,082: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-07 20:22:25,358: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-07 21:31:30,968: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 21:31:30,983: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 21:31:33,037: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:31:34,107: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:31:35,162: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1967848223696) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:31:35,171: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:31:37,545: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:31:40,655: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 21:31:43,457: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:31:43,480: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 21:31:46,334: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:31:49,231: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:31:52,281: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:31:55,098: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:06,293: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:09,093: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:11,912: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:15,453: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:18,236: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:21,034: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:24,039: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:24,354: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:32:24,596: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 21:32:27,643: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:32:29,147: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:32:30,662: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1968088033168) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:32:30,664: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:32:33,513: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:32:38,599: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 21:32:41,683: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 21:33:13,343: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 21:33:15,938: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:33:17,449: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:33:18,965: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1968012321680) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:33:18,967: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:33:21,796: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:33:25,271: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-07 21:33:27,629: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-07 21:36:36,884: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 21:36:36,885: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 21:36:38,903: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:36:39,947: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:36:41,001: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2389210852048) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:36:41,002: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:36:43,429: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:36:48,129: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 21:36:53,136: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:36:53,152: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 21:36:59,109: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:02,096: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:04,909: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:10,559: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:13,410: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:16,231: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:20,306: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:23,283: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:26,088: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:29,638: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:32,623: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:32,925: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:37:33,143: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 21:37:35,582: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:37:37,100: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:37:38,629: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2389444669776) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:37:38,630: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:37:41,451: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:37:44,877: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 21:37:47,770: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 21:38:37,066: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 21:38:37,066: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 21:38:39,084: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:38:40,159: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:38:41,198: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2714127232656) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:38:41,199: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:38:43,625: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:38:46,746: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 21:38:49,665: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:38:49,683: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 21:38:52,594: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:38:55,596: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:38:58,321: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:01,044: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:03,856: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:06,578: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:09,553: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:12,321: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:15,071: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:17,807: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:24,014: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:24,313: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:39:24,547: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 21:39:27,482: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:39:28,989: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:39:30,501: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2714381918480) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:39:30,503: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:39:33,326: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:39:36,834: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 21:39:39,830: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 21:40:11,605: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 21:40:14,226: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:40:15,715: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:40:17,231: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2714292100688) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:40:17,233: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:40:20,101: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:40:23,580: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-07 21:40:25,743: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-07 21:41:36,447: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 21:41:36,448: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 21:41:38,350: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:41:39,379: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:41:40,436: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2341971130960) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:41:40,438: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:41:42,861: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:41:46,028: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 21:41:49,001: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:41:49,023: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 21:41:50,524: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:41:53,519: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:41:56,471: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:41:59,249: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:02,090: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:04,876: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:07,647: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:10,427: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:13,167: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:15,945: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:18,741: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:19,030: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 21:42:19,237: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 21:42:22,047: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:42:23,573: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:42:25,096: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2342241905552) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:42:25,098: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:42:27,963: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:42:31,407: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 21:42:34,387: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 21:43:15,945: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 21:43:18,251: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:43:19,754: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:43:21,262: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2342480046352) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 21:43:21,264: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 21:43:24,138: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 21:43:29,183: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-07 21:43:31,356: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-07 22:23:52,208: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 22:23:52,211: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 22:23:54,211: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:23:55,252: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:23:56,334: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2003541823056) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:23:56,343: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:23:58,783: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:24:03,616: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 22:24:06,502: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:06,532: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 22:24:09,318: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:12,187: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:15,176: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:18,077: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:20,928: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:23,884: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:27,668: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:30,471: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:33,440: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:36,934: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:40,519: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:40,828: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:24:42,087: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 22:24:45,234: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:24:46,756: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:24:48,286: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2001633200272) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:24:48,289: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:24:51,157: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:24:54,584: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 22:24:57,563: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 22:25:33,338: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 22:25:36,003: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:25:37,510: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:25:39,031: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2003568799632) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:25:39,034: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:25:41,865: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:25:46,990: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-07 22:25:49,198: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-07 22:26:13,602: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-07 22:26:16,802: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:26:18,342: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:26:19,891: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2001510230416) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:26:19,893: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:26:22,770: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:26:26,214: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-07 22:26:29,035: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:26:29,065: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-07 22:26:31,860: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:26:34,734: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:26:36,502: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:26:36,891: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-07 22:26:39,407: WARNING: utils: Downgrading core protocol version from 66 to 65 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:26:40,943: WARNING: utils: Downgrading core protocol version from 65 to 5 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:26:42,478: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2003568698960) b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:26:42,479: WARNING: utils: Downgrading core protocol version from 5 to 4 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:26:45,303: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:26:48,838: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-07 22:26:51,846: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-07 22:27:03,570: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-07 22:27:06,326: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:27:07,825: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:27:09,359: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2001513464912) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:27:09,361: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:27:12,236: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:27:15,687: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-07 22:27:18,019: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-07 22:29:25,526: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 22:29:25,556: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 22:29:27,625: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:29:28,681: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:29:29,725: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1240738908368) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:29:29,726: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:29:32,108: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:29:36,927: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 22:29:40,060: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:29:40,083: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 22:29:42,922: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:29:46,066: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:29:49,272: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:29:52,177: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:29:56,949: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:30:00,095: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:30:02,952: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:30:07,906: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:30:11,032: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:30:24,206: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:30:30,952: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:30:31,251: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:30:31,788: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 22:30:34,599: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:30:36,110: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:30:37,618: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1240913598480) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:30:37,621: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:30:40,478: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:30:43,989: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 22:30:47,031: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 22:31:29,637: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 22:31:32,059: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:31:33,554: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:31:35,066: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1240741209168) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:31:35,069: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:31:37,954: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:31:41,362: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-07 22:31:43,504: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-07 22:32:08,821: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-07 22:32:10,900: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:32:12,368: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:32:13,879: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1240811611344) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:32:13,882: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:32:16,729: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:32:21,823: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-07 22:32:24,756: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:32:24,788: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-07 22:32:33,276: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:32:36,601: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:32:38,326: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 22:32:38,450: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-07 22:32:41,650: WARNING: utils: Downgrading core protocol version from 66 to 65 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:32:43,128: WARNING: utils: Downgrading core protocol version from 65 to 5 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:32:44,641: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1240740174992) b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:32:44,644: WARNING: utils: Downgrading core protocol version from 5 to 4 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:32:47,538: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:32:50,992: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-07 22:32:53,961: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-07 22:33:01,469: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-07 22:33:03,404: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:33:04,861: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:33:06,383: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1240741101520) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 22:33:06,385: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 22:33:09,247: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 22:33:12,645: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-07 22:33:14,707: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-07 23:27:10,313: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 23:29:03,246: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 23:31:03,446: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 23:31:03,447: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 23:31:05,465: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:31:06,553: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:31:07,636: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1597394317584) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:31:07,640: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:31:10,063: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:31:13,247: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 23:31:16,062: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:16,089: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 23:31:19,194: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:22,088: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:24,916: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:27,682: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:30,586: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:33,383: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:36,142: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:39,096: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:42,116: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:45,087: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:48,123: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:48,474: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:31:49,411: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 23:31:51,885: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:31:53,415: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:31:54,916: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1597596885456) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:31:54,919: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:31:57,786: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:32:01,229: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 23:32:04,300: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 23:32:49,489: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 23:32:52,428: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:32:53,946: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:32:55,463: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1597423525712) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:32:55,465: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:32:58,308: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:33:03,284: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-07 23:33:05,512: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-07 23:33:30,112: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-07 23:33:33,075: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:33:34,582: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:33:36,085: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1595631565392) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:33:36,088: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:33:38,974: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:33:42,444: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-07 23:33:45,417: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:33:45,440: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-07 23:33:48,295: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:33:51,074: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:33:52,788: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:33:53,030: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-07 23:33:56,261: WARNING: utils: Downgrading core protocol version from 66 to 65 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:33:57,768: WARNING: utils: Downgrading core protocol version from 65 to 5 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:33:59,269: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1597424823760) b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:33:59,270: WARNING: utils: Downgrading core protocol version from 5 to 4 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:34:02,059: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:34:05,558: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-07 23:34:08,423: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-07 23:34:16,050: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-07 23:34:18,528: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:34:20,044: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:34:21,555: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1595729750800) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:34:21,558: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:34:24,371: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:34:29,431: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-07 23:34:31,551: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-07 23:35:28,426: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 23:35:28,427: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 23:35:30,397: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:35:31,444: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:35:32,514: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2317833959888) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:35:32,515: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:35:34,946: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:35:38,109: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 23:35:40,958: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:35:40,992: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 23:35:43,870: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:35:46,805: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:35:49,641: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:35:52,516: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:35:55,467: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:35:58,289: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:36:01,151: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:36:04,002: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:36:06,847: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:36:09,694: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:36:12,566: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:36:12,874: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:36:13,356: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 23:36:15,445: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:36:16,964: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:36:18,476: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2318074968784) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:36:18,477: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:40:06,441: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 23:40:06,443: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-07 23:40:08,591: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:40:09,670: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:40:10,709: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1129280244432) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:40:10,718: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:40:13,082: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:40:17,924: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-07 23:40:21,038: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:21,065: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-07 23:40:23,999: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:27,369: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:30,174: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:32,938: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:35,975: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:38,766: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:41,536: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:44,314: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:47,060: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:49,966: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:52,812: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:53,098: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:40:54,382: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-07 23:40:57,026: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:40:58,555: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:41:00,082: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1129484717072) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:41:00,084: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:41:02,940: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:41:06,416: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-07 23:41:09,399: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-07 23:41:42,997: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-07 23:41:45,747: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:41:47,265: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:41:48,797: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1127609879440) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:41:48,798: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:41:51,622: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:41:55,200: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-07 23:41:57,678: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-07 23:42:22,139: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-07 23:42:24,658: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:42:26,188: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:42:27,709: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1127471087312) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:42:27,712: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:42:30,565: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:42:34,057: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-07 23:42:36,787: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:42:36,816: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-07 23:42:39,661: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:42:43,119: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:42:44,819: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-07 23:42:45,224: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-07 23:42:47,171: WARNING: utils: Downgrading core protocol version from 66 to 65 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:42:48,507: WARNING: utils: Downgrading core protocol version from 65 to 5 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:42:50,033: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1127508122832) b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:42:50,035: WARNING: utils: Downgrading core protocol version from 5 to 4 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:42:52,896: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:42:57,829: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-07 23:43:00,648: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-07 23:43:08,636: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-07 23:43:11,478: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:43:13,000: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:43:14,502: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1129499282832) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-07 23:43:14,505: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-07 23:43:17,367: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-07 23:43:22,425: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-07 23:43:24,539: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-07 23:43:48,085: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-07 23:45:51,374: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 08:44:47,684: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 08:44:47,710: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-08 08:44:49,754: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:44:50,815: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:44:51,888: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2375330840848) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-08 08:44:51,897: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:44:54,266: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-08 08:44:57,501: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-08 08:45:00,447: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:00,483: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-08 08:45:03,352: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:06,072: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:09,425: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:12,251: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:15,085: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:17,890: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:20,703: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:23,465: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:26,261: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:29,093: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:31,875: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:32,192: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:45:33,480: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-08 08:45:35,461: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:45:36,769: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:45:38,282: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2375536070544) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-08 08:45:38,284: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:45:41,140: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-08 08:45:44,646: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-08 08:45:47,478: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-08 08:46:18,629: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-08 08:46:21,380: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:46:22,901: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:46:24,411: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2375331334224) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-08 08:46:24,413: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:46:27,263: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-08 08:46:32,326: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-08 08:46:34,503: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-08 08:46:58,507: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-08 08:47:01,679: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:03,186: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:04,704: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2375397171024) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-08 08:47:04,707: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:07,529: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-08 08:47:11,028: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-08 08:47:13,732: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:47:13,763: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-08 08:47:15,228: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:47:18,152: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:47:19,881: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-08 08:47:20,186: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-08 08:47:23,323: WARNING: utils: Downgrading core protocol version from 66 to 65 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:24,835: WARNING: utils: Downgrading core protocol version from 65 to 5 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:26,315: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2375332064528) b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-08 08:47:26,318: WARNING: utils: Downgrading core protocol version from 5 to 4 for b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:29,176: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'b8435447-b482-4e11-9910-4069906dd611-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-08 08:47:34,157: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-08 08:47:37,112: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-08 08:47:44,971: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-08 08:47:47,603: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:49,113: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:50,620: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2375390694864) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-08 08:47:50,622: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-08 08:47:53,432: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-08 08:47:56,908: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-08 08:47:59,221: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-08 12:44:27,035: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 12:55:56,053: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 12:55:57,367: INFO: utils: Stage 2 Processing Commencing]
[2024-01-08 12:55:57,368: INFO: utils: Pipeline created with KnnImputer, RobustScaler, SMOTETomek]
[2024-01-08 12:55:57,395: INFO: utils: Creating X dataframe with only the input features - dropping target]
[2024-01-08 12:55:57,397: INFO: utils: Creating y - target]
[2024-01-08 12:55:57,397: INFO: utils: Commencing pipeline transformation]
[2024-01-08 13:27:16,786: INFO: utils: Pipeline transformation complete]
[2024-01-08 13:27:16,788: INFO: utils: Returning the transformed dataframe]
[2024-01-08 13:41:12,702: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 13:41:14,033: INFO: utils: Stage 2 Processing Commencing]
[2024-01-08 13:41:14,033: INFO: utils: Pipeline created with KnnImputer, RobustScaler, SMOTETomek]
[2024-01-08 13:41:14,076: INFO: utils: Creating X dataframe with only the input features - dropping target]
[2024-01-08 13:41:14,078: INFO: utils: Creating y - target]
[2024-01-08 13:41:14,079: INFO: utils: Commencing pipeline transformation]
[2024-01-08 14:18:43,923: INFO: utils: Pipeline transformation complete]
[2024-01-08 14:18:43,925: INFO: utils: Returning the transformed dataframe]
[2024-01-08 14:18:43,942: INFO: utils: Stage 2 Processing Complete]
[2024-01-08 15:02:55,829: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 15:02:57,186: INFO: utils: Stage 2 Processing Commencing]
[2024-01-08 15:02:57,186: INFO: utils: Pipeline created with KnnImputer, RobustScaler, SMOTETomek]
[2024-01-08 15:02:57,219: INFO: utils: Creating X dataframe with only the input features - dropping target]
[2024-01-08 15:02:57,220: INFO: utils: Creating y - target]
[2024-01-08 15:02:57,221: INFO: utils: Commencing pipeline transformation]
[2024-01-08 16:25:21,110: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 16:25:22,101: INFO: utils: Stage 2 Processing Commencing]
[2024-01-08 16:25:22,101: INFO: utils: Pipeline created with KnnImputer, RobustScaler, SMOTETomek]
[2024-01-08 16:25:22,132: INFO: utils: Creating X dataframe with only the input features - dropping target]
[2024-01-08 16:25:22,134: INFO: utils: Creating y - target]
[2024-01-08 16:25:22,134: INFO: utils: Commencing pipeline transformation]
[2024-01-08 16:49:44,341: INFO: utils: Pipeline transformation complete]
[2024-01-08 16:49:44,343: INFO: utils: Returning the transformed dataframe]
[2024-01-08 16:49:44,362: INFO: utils: Saving the pipeline object]
[2024-01-08 16:49:44,374: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 16:52:50,525: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 16:52:51,523: INFO: utils: Stage 2 Processing Commencing]
[2024-01-08 16:52:51,523: INFO: utils: Pipeline created with KnnImputer, RobustScaler, SMOTETomek]
[2024-01-08 16:52:51,545: INFO: utils: Creating X dataframe with only the input features - dropping target]
[2024-01-08 16:52:51,545: INFO: utils: Creating y - target]
[2024-01-08 16:52:51,546: INFO: utils: Commencing pipeline transformation]
[2024-01-08 17:17:19,806: INFO: utils: Pipeline transformation complete]
[2024-01-08 17:17:19,808: INFO: utils: Returning the transformed dataframe]
[2024-01-08 17:17:19,818: INFO: utils: Saving the pipeline object]
[2024-01-08 17:17:19,830: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-08 17:17:19,935: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-08 17:17:19,935: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-08 17:17:19,935: INFO: utils: Stage 2 Processing Complete]
[2024-01-09 11:33:36,759: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:34:24,129: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:34:25,541: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:34:25,690: INFO: utils: Data Merging commencing]
[2024-01-09 11:34:25,986: INFO: utils: Data Merging complete]
[2024-01-09 11:34:26,757: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:34:26,979: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:34:26,981: INFO: utils: Renaming Target Column]
[2024-01-09 11:34:26,983: INFO: utils: Mapping Target Column values]
[2024-01-09 11:34:27,608: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:34:27,608: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:34:28,743: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:34:28,744: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:34:29,267: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:34:29,308: INFO: utils: Data Merging commencing]
[2024-01-09 11:34:29,388: INFO: utils: Data Merging complete]
[2024-01-09 11:34:29,549: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:34:29,607: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:34:29,608: INFO: utils: Renaming Target Column]
[2024-01-09 11:34:29,609: INFO: utils: Mapping Target Column values]
[2024-01-09 11:34:29,767: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:34:29,768: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:34:30,083: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:34:30,083: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:34:35,942: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:40:26,919: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:40:28,251: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:40:28,383: INFO: utils: Data Merging commencing]
[2024-01-09 11:40:28,665: INFO: utils: Data Merging complete]
[2024-01-09 11:40:29,390: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:40:29,573: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:40:29,574: INFO: utils: Renaming Target Column]
[2024-01-09 11:40:29,577: INFO: utils: Mapping Target Column values]
[2024-01-09 11:40:30,184: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:40:30,184: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:40:31,333: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:40:31,333: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:40:31,775: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:40:31,816: INFO: utils: Data Merging commencing]
[2024-01-09 11:40:31,908: INFO: utils: Data Merging complete]
[2024-01-09 11:40:32,070: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:40:32,123: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:40:32,125: INFO: utils: Renaming Target Column]
[2024-01-09 11:40:32,126: INFO: utils: Mapping Target Column values]
[2024-01-09 11:40:32,295: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:40:32,296: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:40:32,610: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:40:32,611: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:40:38,397: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:41:50,986: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:41:52,294: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:41:52,429: INFO: utils: Data Merging commencing]
[2024-01-09 11:41:52,686: INFO: utils: Data Merging complete]
[2024-01-09 11:41:53,303: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:41:53,507: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:41:53,508: INFO: utils: Renaming Target Column]
[2024-01-09 11:41:53,510: INFO: utils: Mapping Target Column values]
[2024-01-09 11:41:54,134: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:41:54,135: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:41:55,251: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:41:55,252: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:41:55,680: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:41:55,713: INFO: utils: Data Merging commencing]
[2024-01-09 11:41:55,804: INFO: utils: Data Merging complete]
[2024-01-09 11:41:55,967: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:41:56,021: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:41:56,022: INFO: utils: Renaming Target Column]
[2024-01-09 11:41:56,024: INFO: utils: Mapping Target Column values]
[2024-01-09 11:41:56,182: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:41:56,182: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:41:56,495: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:41:56,495: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:42:02,236: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:44:15,813: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:44:17,165: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:44:17,305: INFO: utils: Data Merging commencing]
[2024-01-09 11:44:17,562: INFO: utils: Data Merging complete]
[2024-01-09 11:44:18,269: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:44:18,464: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:44:18,465: INFO: utils: Renaming Target Column]
[2024-01-09 11:44:18,468: INFO: utils: Mapping Target Column values]
[2024-01-09 11:44:19,112: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:44:19,112: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:44:20,225: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:44:20,225: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:44:20,639: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:44:20,680: INFO: utils: Data Merging commencing]
[2024-01-09 11:44:20,766: INFO: utils: Data Merging complete]
[2024-01-09 11:44:20,928: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:44:20,983: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:44:20,985: INFO: utils: Renaming Target Column]
[2024-01-09 11:44:20,986: INFO: utils: Mapping Target Column values]
[2024-01-09 11:44:21,151: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:44:21,152: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:44:21,466: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:44:21,467: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:44:26,984: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:45:09,202: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:45:10,572: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:45:10,703: INFO: utils: Data Merging commencing]
[2024-01-09 11:45:10,986: INFO: utils: Data Merging complete]
[2024-01-09 11:45:11,638: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:45:11,818: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:45:11,819: INFO: utils: Renaming Target Column]
[2024-01-09 11:45:11,822: INFO: utils: Mapping Target Column values]
[2024-01-09 11:45:12,442: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:45:12,442: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:45:13,622: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:45:13,622: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:45:14,049: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:45:14,097: INFO: utils: Data Merging commencing]
[2024-01-09 11:45:14,197: INFO: utils: Data Merging complete]
[2024-01-09 11:45:14,374: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:45:14,426: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:45:14,427: INFO: utils: Renaming Target Column]
[2024-01-09 11:45:14,428: INFO: utils: Mapping Target Column values]
[2024-01-09 11:45:14,592: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:45:14,593: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:45:14,913: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:45:14,914: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:45:20,637: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:45:30,457: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:45:31,897: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:45:32,034: INFO: utils: Data Merging commencing]
[2024-01-09 11:45:32,320: INFO: utils: Data Merging complete]
[2024-01-09 11:45:33,011: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:45:33,186: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:45:33,186: INFO: utils: Renaming Target Column]
[2024-01-09 11:45:33,189: INFO: utils: Mapping Target Column values]
[2024-01-09 11:45:34,063: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:45:34,063: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:45:35,345: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:45:35,345: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:45:35,793: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:45:35,843: INFO: utils: Data Merging commencing]
[2024-01-09 11:45:35,936: INFO: utils: Data Merging complete]
[2024-01-09 11:45:36,109: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:45:36,163: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:45:36,164: INFO: utils: Renaming Target Column]
[2024-01-09 11:45:36,166: INFO: utils: Mapping Target Column values]
[2024-01-09 11:45:36,352: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:45:36,352: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:45:36,674: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:45:36,675: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:45:42,994: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:50:18,015: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:50:19,317: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:50:19,440: INFO: utils: Data Merging commencing]
[2024-01-09 11:50:19,715: INFO: utils: Data Merging complete]
[2024-01-09 11:50:20,342: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:50:20,522: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:50:20,522: INFO: utils: Renaming Target Column]
[2024-01-09 11:50:20,526: INFO: utils: Mapping Target Column values]
[2024-01-09 11:50:21,167: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:50:21,168: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:50:22,224: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:50:22,225: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:50:22,652: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:50:22,693: INFO: utils: Data Merging commencing]
[2024-01-09 11:50:22,779: INFO: utils: Data Merging complete]
[2024-01-09 11:50:22,980: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:50:23,040: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:50:23,041: INFO: utils: Renaming Target Column]
[2024-01-09 11:50:23,043: INFO: utils: Mapping Target Column values]
[2024-01-09 11:50:23,227: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:50:23,227: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:50:23,554: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:50:23,555: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:50:29,226: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:51:02,753: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 11:51:04,035: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:51:04,166: INFO: utils: Data Merging commencing]
[2024-01-09 11:51:04,429: INFO: utils: Data Merging complete]
[2024-01-09 11:51:05,060: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:51:05,256: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:51:05,257: INFO: utils: Renaming Target Column]
[2024-01-09 11:51:05,259: INFO: utils: Mapping Target Column values]
[2024-01-09 11:51:05,846: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:51:05,847: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:51:06,965: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:51:06,965: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:51:07,400: INFO: utils: Stage 1 Processing Commencing]
[2024-01-09 11:51:07,442: INFO: utils: Data Merging commencing]
[2024-01-09 11:51:07,527: INFO: utils: Data Merging complete]
[2024-01-09 11:51:07,691: INFO: utils: Sorting and reseting_index complete]
[2024-01-09 11:51:07,744: INFO: utils: Dropping column: 'ident_id']
[2024-01-09 11:51:07,745: INFO: utils: Renaming Target Column]
[2024-01-09 11:51:07,747: INFO: utils: Mapping Target Column values]
[2024-01-09 11:51:07,915: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-09 11:51:07,916: INFO: utils: Creating list of column names of input features]
[2024-01-09 11:51:08,241: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-09 11:51:08,242: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-09 11:51:14,935: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:01:47,261: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:42:41,212: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:43:29,705: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:43:30,483: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:43:30,493: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:44:17,766: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:44:18,566: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:44:18,575: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:44:18,576: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 12:44:18,576: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 12:44:18,577: INFO: utils: SmoteTomek obj created]
[2024-01-09 12:45:11,744: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:45:12,619: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:45:12,629: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:45:12,629: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 12:45:12,630: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 12:45:12,630: INFO: utils: SmoteTomek obj created]
[2024-01-09 12:46:11,163: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:46:11,954: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:46:11,963: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:46:11,964: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 12:46:11,964: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 12:46:11,964: INFO: utils: SmoteTomek obj created]
[2024-01-09 12:47:09,629: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:47:10,421: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:47:10,430: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:47:10,431: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 12:47:10,432: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 12:47:10,432: INFO: utils: SmoteTomek obj created]
[2024-01-09 12:47:44,756: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:47:45,641: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:47:45,650: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:47:45,651: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 12:47:45,651: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 12:47:45,651: INFO: utils: SmoteTomek obj created]
[2024-01-09 12:48:10,001: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:48:10,867: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:48:10,878: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:48:10,879: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 12:48:10,879: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 12:48:10,880: INFO: utils: SmoteTomek obj created]
[2024-01-09 12:48:35,972: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:48:36,757: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:48:36,766: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:48:36,767: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 12:48:36,767: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 12:48:36,767: INFO: utils: SmoteTomek obj created]
[2024-01-09 12:50:45,279: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:50:46,074: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 12:50:46,087: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 12:50:46,088: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 12:50:46,088: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 12:50:46,089: INFO: utils: SmoteTomek obj created]
[2024-01-09 12:50:46,108: INFO: utils: Commencing pipeline transformation]
[2024-01-09 13:07:00,996: INFO: utils: Pipeline transformation complete]
[2024-01-09 13:07:01,000: INFO: utils: Commencing SmoteTomek]
[2024-01-09 13:07:29,216: INFO: utils: SmoteTomek Complete]
[2024-01-09 13:07:29,216: INFO: utils: Returning the transformed dataframe]
[2024-01-09 13:07:29,231: INFO: utils: Saving the pipeline object]
[2024-01-09 13:07:29,295: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-09 13:07:29,296: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-09 13:07:29,296: INFO: utils: Stage 2 Processing Complete]
[2024-01-09 13:07:44,797: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 13:07:44,815: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 13:07:44,819: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 13:07:44,819: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 13:07:44,820: INFO: utils: SmoteTomek obj created]
[2024-01-09 13:07:44,870: INFO: utils: Commencing pipeline transformation]
[2024-01-09 13:10:27,124: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 13:10:28,372: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 13:10:28,386: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 13:10:28,387: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 13:10:28,388: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 13:10:28,388: INFO: utils: SmoteTomek obj created]
[2024-01-09 13:10:28,410: INFO: utils: Commencing pipeline transformation]
[2024-01-09 13:19:11,317: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 13:19:12,435: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 13:19:12,449: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 13:19:12,450: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 13:19:12,450: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-09 13:19:12,450: INFO: utils: SmoteTomek obj created]
[2024-01-09 13:19:12,472: INFO: utils: Commencing pipeline transformation]
[2024-01-09 13:32:09,649: INFO: utils: Pipeline transformation complete]
[2024-01-09 13:32:09,662: INFO: utils: Commencing SmoteTomek]
[2024-01-09 13:32:41,532: INFO: utils: SmoteTomek Complete]
[2024-01-09 13:32:41,533: INFO: utils: Returning the transformed dataframe]
[2024-01-09 13:32:41,548: INFO: utils: Saving the pipeline object]
[2024-01-09 13:32:41,614: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-09 13:32:41,614: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-09 13:32:41,615: INFO: utils: Stage 2 Processing Complete]
[2024-01-09 13:32:54,468: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 13:32:54,478: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 13:32:54,479: INFO: utils: Stage 2 Processing Commencing]
[2024-01-09 13:32:54,525: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-09 13:32:54,526: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-09 13:32:54,567: INFO: utils: Commencing pipeline transformation]
[2024-01-09 13:37:14,465: INFO: utils: Pipeline transformation complete]
[2024-01-09 13:37:14,466: INFO: utils: Commencing SmoteTomek]
[2024-01-09 13:37:19,656: INFO: utils: SmoteTomek Complete]
[2024-01-09 13:37:19,656: INFO: utils: Returning the transformed dataframe]
[2024-01-09 13:37:19,657: INFO: utils: Stage 2 Processing Complete]
[2024-01-09 14:57:24,397: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 14:57:24,413: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 15:36:51,314: INFO: utils: yaml file is saved]
[2024-01-09 17:09:51,461: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 17:09:51,480: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 17:11:18,453: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 17:11:18,466: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 17:11:32,747: INFO: utils: yaml file is saved]
[2024-01-09 17:13:53,499: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 17:13:53,511: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 17:14:07,392: INFO: utils: yaml file is saved]
[2024-01-09 17:14:56,022: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 17:14:56,033: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 17:15:10,181: INFO: utils: yaml file is saved]
[2024-01-09 17:22:05,618: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 17:22:05,631: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 17:22:20,341: INFO: utils: yaml file is saved]
[2024-01-09 17:22:20,344: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-09 17:28:57,003: INFO: utils: metrics.yaml yaml_file is loaded]
[2024-01-09 17:28:57,007: INFO: utils: pickled_object: artifacts\model\model.joblib loaded]
[2024-01-09 17:28:57,105: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-09 18:04:30,156: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 18:04:30,167: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 18:04:30,168: INFO: 5_model_training: loading training and testing datasets]
[2024-01-09 18:04:32,847: INFO: 5_model_training: Commencing models training]
[2024-01-09 18:04:44,655: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-09 18:04:44,658: INFO: utils: yaml file is saved]
[2024-01-09 18:04:44,660: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-09 18:04:44,662: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-09 18:11:11,447: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 18:11:11,464: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 18:11:11,466: INFO: 5_model_training: loading training and testing datasets]
[2024-01-09 18:11:14,483: INFO: 5_model_training: Commencing models training]
[2024-01-09 18:11:30,462: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-09 18:11:30,466: INFO: utils: yaml file is saved]
[2024-01-09 18:11:30,468: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-09 18:11:30,470: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-09 18:11:30,471: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-09 18:11:30,472: INFO: utils: yaml file is saved]
[2024-01-09 18:14:03,161: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 18:14:03,178: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 18:14:03,179: INFO: 5_model_training: loading training and testing datasets]
[2024-01-09 18:14:06,085: INFO: 5_model_training: Commencing models training]
[2024-01-09 18:14:21,064: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-09 18:14:21,068: INFO: utils: yaml file is saved]
[2024-01-09 18:14:21,071: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-09 18:14:21,116: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-09 18:14:21,117: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-09 18:14:21,119: INFO: utils: yaml file is saved]
[2024-01-09 18:34:12,294: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 18:34:12,321: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 18:34:12,323: INFO: 5_model_training: loading training and testing datasets]
[2024-01-09 18:34:15,598: INFO: 5_model_training: Commencing models training]
[2024-01-09 19:13:49,537: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-09 19:13:49,546: INFO: utils: yaml file is saved]
[2024-01-09 19:13:49,547: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-09 19:13:49,550: INFO: utils: yaml file is saved]
[2024-01-09 19:13:49,552: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-09 19:13:49,581: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-09 23:08:59,005: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 23:08:59,022: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 23:08:59,024: INFO: 5_model_training: loading training and testing datasets]
[2024-01-09 23:09:01,353: INFO: 5_model_training: Commencing models training]
[2024-01-09 23:09:41,212: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-09 23:09:41,219: INFO: utils: yaml file is saved]
[2024-01-09 23:09:41,219: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-09 23:09:41,220: INFO: utils: yaml file is saved]
[2024-01-09 23:09:41,221: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-09 23:09:41,369: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-09 23:33:10,095: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-09 23:33:10,105: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-09 23:33:10,106: INFO: 5_model_training: loading training and testing datasets]
[2024-01-09 23:33:12,414: INFO: 5_model_training: Commencing models training]
[2024-01-10 00:59:52,982: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-10 00:59:53,006: INFO: utils: yaml file is saved]
[2024-01-10 00:59:53,007: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-10 00:59:53,008: INFO: utils: yaml file is saved]
[2024-01-10 00:59:53,009: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-10 00:59:53,033: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-10 08:20:29,863: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 08:21:05,342: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 08:21:05,784: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 08:21:05,818: INFO: utils: pickled_object: artifacts\model\model.joblib loaded]
[2024-01-10 13:41:43,952: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 13:47:27,166: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 13:47:27,186: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 13:47:28,068: ERROR: __init__: HTTP Error 401: Unauthorized]
Traceback (most recent call last):
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\site-packages\cassandra\datastax\cloud\__init__.py", line 137, in read_metadata_info
    response = urlopen(url, context=config.ssl_context, timeout=timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 216, in urlopen
    return opener.open(url, data, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 525, in open
    response = meth(req, response)
               ^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 634, in http_response
    response = self.parent.error(
               ^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 563, in error
    return self._call_chain(*args)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 496, in _call_chain
    result = func(*args)
             ^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 643, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 401: Unauthorized
[2024-01-10 14:34:19,202: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 14:34:19,204: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 14:34:19,940: ERROR: __init__: HTTP Error 401: Unauthorized]
Traceback (most recent call last):
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\site-packages\cassandra\datastax\cloud\__init__.py", line 137, in read_metadata_info
    response = urlopen(url, context=config.ssl_context, timeout=timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 216, in urlopen
    return opener.open(url, data, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 525, in open
    response = meth(req, response)
               ^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 634, in http_response
    response = self.parent.error(
               ^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 563, in error
    return self._call_chain(*args)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 496, in _call_chain
    result = func(*args)
             ^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 643, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 401: Unauthorized
[2024-01-10 14:36:44,337: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 14:36:44,338: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 14:36:46,411: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:36:47,537: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:36:48,651: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2244111370640) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:36:48,661: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:36:51,184: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:36:54,370: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 14:36:58,259: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:37:14,337: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 14:37:14,338: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 14:37:16,329: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:37:17,454: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:37:18,608: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2512597813840) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:37:18,611: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:37:21,188: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:37:24,259: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 14:37:27,774: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:37:27,795: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 14:37:30,737: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:37:34,258: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:37:37,230: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:37:46,702: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:37:49,664: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:37:52,608: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:37:57,379: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:38:00,604: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:38:03,564: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:38:06,971: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:38:10,199: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:38:10,530: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:38:11,392: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 14:38:14,344: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:38:15,843: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:38:17,366: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2512598996240) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:38:17,368: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:38:20,327: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:38:23,727: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 14:38:28,098: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 14:39:05,998: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 14:39:08,052: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:39:09,571: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:39:11,075: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2512599344080) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:39:11,076: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:39:13,944: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:39:17,438: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 14:39:20,376: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-10 14:39:46,534: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-10 14:39:49,371: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:39:50,877: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:39:52,357: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2512664675536) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:39:52,360: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:39:55,319: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:39:58,693: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-10 14:40:02,119: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:40:02,140: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-10 14:40:05,038: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:40:08,216: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:40:10,234: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:40:10,473: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-10 14:40:11,434: ERROR: __init__: HTTP Error 502: Bad Gateway]
Traceback (most recent call last):
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\site-packages\cassandra\datastax\cloud\__init__.py", line 137, in read_metadata_info
    response = urlopen(url, context=config.ssl_context, timeout=timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 216, in urlopen
    return opener.open(url, data, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 525, in open
    response = meth(req, response)
               ^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 634, in http_response
    response = self.parent.error(
               ^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 563, in error
    return self._call_chain(*args)
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 496, in _call_chain
    result = func(*args)
             ^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 643, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 502: Bad Gateway
[2024-01-10 14:41:42,352: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 14:41:42,353: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 14:41:44,328: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:41:45,458: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:41:46,579: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2030927156688) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:41:46,580: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:41:49,068: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:41:52,166: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 14:41:55,089: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:41:55,106: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 14:41:58,267: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:01,111: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:04,387: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:07,391: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:10,507: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:13,460: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:16,408: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:19,511: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:22,474: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:25,433: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:28,534: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:28,863: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:42:29,881: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 14:42:31,988: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:42:33,499: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:42:35,017: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2030928252560) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:42:35,022: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:42:38,001: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:42:44,315: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 14:42:47,495: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 14:43:24,635: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 14:43:26,739: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:43:28,256: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:43:29,771: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2030928388624) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:43:29,774: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:43:32,622: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:43:36,114: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 14:43:38,245: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-10 14:44:01,817: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-10 14:44:04,748: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:44:06,254: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:44:07,766: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2030996056848) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:44:07,768: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:44:10,724: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:44:14,054: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-10 14:44:17,146: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:44:17,166: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-10 14:44:18,605: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:44:21,639: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:44:23,453: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:44:23,690: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-10 14:44:23,729: ERROR: __init__: <urlopen error [Errno 11001] getaddrinfo failed>]
Traceback (most recent call last):
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 1348, in do_open
    h.request(req.get_method(), req.selector, req.data, headers,
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1286, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1332, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1281, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1041, in _send_output
    self.send(msg)
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 979, in send
    self.connect()
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1451, in connect
    super().connect()
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 945, in connect
    self.sock = self._create_connection(
                ^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\socket.py", line 827, in create_connection
    for res in getaddrinfo(host, port, 0, SOCK_STREAM):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\socket.py", line 962, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
socket.gaierror: [Errno 11001] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\site-packages\cassandra\datastax\cloud\__init__.py", line 137, in read_metadata_info
    response = urlopen(url, context=config.ssl_context, timeout=timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 216, in urlopen
    return opener.open(url, data, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 519, in open
    response = self._open(req, data)
               ^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 536, in _open
    result = self._call_chain(self.handle_open, protocol, protocol +
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 496, in _call_chain
    result = func(*args)
             ^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 1391, in https_open
    return self.do_open(http.client.HTTPSConnection, req,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 1351, in do_open
    raise URLError(err)
urllib.error.URLError: <urlopen error [Errno 11001] getaddrinfo failed>
[2024-01-10 14:50:05,139: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 14:50:05,141: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 14:50:07,137: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:50:08,230: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:50:09,380: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1711638840144) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:50:09,383: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:50:11,927: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:50:15,042: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 14:50:18,152: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:18,183: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 14:50:21,302: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:24,297: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:27,408: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:30,332: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:33,295: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:36,421: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:39,292: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:42,257: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:45,356: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:48,228: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:51,178: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:51,483: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:50:52,518: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 14:50:54,537: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:50:55,864: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:50:57,362: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1711639784528) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:50:57,365: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:51:00,292: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:51:03,752: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 14:51:06,840: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 14:51:42,054: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 14:51:45,194: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:51:46,697: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:51:48,207: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1711640368592) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:51:48,210: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:51:51,075: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:51:54,510: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 14:51:56,768: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-10 14:52:22,078: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-10 14:52:24,426: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:52:25,915: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:52:27,443: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1711710949456) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 14:52:27,445: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 14:52:30,403: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 14:52:33,682: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-10 14:52:36,548: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:52:36,572: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-10 14:52:38,168: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:52:41,313: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:52:43,134: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 14:52:43,392: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-10 14:52:43,438: ERROR: __init__: <urlopen error [Errno 11001] getaddrinfo failed>]
Traceback (most recent call last):
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 1348, in do_open
    h.request(req.get_method(), req.selector, req.data, headers,
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1286, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1332, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1281, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1041, in _send_output
    self.send(msg)
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 979, in send
    self.connect()
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 1451, in connect
    super().connect()
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\http\client.py", line 945, in connect
    self.sock = self._create_connection(
                ^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\socket.py", line 827, in create_connection
    for res in getaddrinfo(host, port, 0, SOCK_STREAM):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\socket.py", line 962, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
socket.gaierror: [Errno 11001] getaddrinfo failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\site-packages\cassandra\datastax\cloud\__init__.py", line 137, in read_metadata_info
    response = urlopen(url, context=config.ssl_context, timeout=timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 216, in urlopen
    return opener.open(url, data, timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 519, in open
    response = self._open(req, data)
               ^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 536, in _open
    result = self._call_chain(self.handle_open, protocol, protocol +
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 496, in _call_chain
    result = func(*args)
             ^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 1391, in https_open
    return self.do_open(http.client.HTTPSConnection, req,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\urllib\request.py", line 1351, in do_open
    raise URLError(err)
urllib.error.URLError: <urlopen error [Errno 11001] getaddrinfo failed>
[2024-01-10 15:00:57,619: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:00:57,622: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:00:59,711: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:01:00,860: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:01:01,967: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2122045654672) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:01:01,971: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:01:04,589: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:01:07,643: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:01:13,248: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:13,293: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 15:01:16,246: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:19,377: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:22,405: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:25,416: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:28,409: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:31,385: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:34,363: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:37,275: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:40,335: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:43,284: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:46,411: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:46,736: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:01:47,974: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 15:01:50,048: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:01:51,357: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:01:52,860: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2122045536144) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:01:52,864: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:01:55,788: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:01:59,183: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 15:02:02,628: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 15:02:38,080: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 15:02:42,123: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:02:44,376: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:02:45,882: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2122294873616) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:02:45,884: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:02:48,793: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:02:52,198: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 15:02:54,529: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-10 15:03:19,300: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-10 15:03:21,311: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:03:22,664: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:03:24,176: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2122114552080) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:03:24,179: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:03:27,166: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:03:30,452: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-10 15:03:33,404: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:03:33,436: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-10 15:03:35,212: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:03:38,221: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:03:40,107: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:03:40,431: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-10 15:03:42,478: WARNING: utils: Downgrading core protocol version from 66 to 65 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:03:43,912: WARNING: utils: Downgrading core protocol version from 65 to 5 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:03:45,408: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2122132533584) c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:03:45,411: WARNING: utils: Downgrading core protocol version from 5 to 4 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:03:48,396: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:03:51,577: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-10 15:03:54,723: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-10 15:04:03,503: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-10 15:04:05,585: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:04:06,818: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:04:08,324: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2122149799632) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:04:08,326: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:04:11,291: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:04:14,660: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-10 15:04:16,896: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-10 15:04:25,127: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:04:27,271: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 15:04:27,451: INFO: utils: Data Merging commencing]
[2024-01-10 15:04:27,802: INFO: utils: Data Merging complete]
[2024-01-10 15:04:28,750: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 15:04:29,044: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 15:04:29,045: INFO: utils: Renaming Target Column]
[2024-01-10 15:04:29,049: INFO: utils: Mapping Target Column values]
[2024-01-10 15:04:29,867: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 15:04:29,867: INFO: utils: Creating list of column names of input features]
[2024-01-10 15:04:31,278: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 15:04:31,279: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 15:04:31,987: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 15:04:32,033: INFO: utils: Data Merging commencing]
[2024-01-10 15:04:32,128: INFO: utils: Data Merging complete]
[2024-01-10 15:04:32,326: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 15:04:32,386: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 15:04:32,388: INFO: utils: Renaming Target Column]
[2024-01-10 15:04:32,390: INFO: utils: Mapping Target Column values]
[2024-01-10 15:04:32,609: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 15:04:32,609: INFO: utils: Creating list of column names of input features]
[2024-01-10 15:04:33,008: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 15:04:33,009: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 15:04:40,359: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:04:40,382: INFO: utils: yaml file is saved]
[2024-01-10 15:04:43,600: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:04:53,840: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:04:55,037: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:04:55,082: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:04:55,086: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 15:04:55,087: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-10 15:04:55,088: INFO: utils: SmoteTomek obj created]
[2024-01-10 15:04:55,093: INFO: utils: Commencing pipeline transformation]
[2024-01-10 15:04:55,570: INFO: utils: Pipeline transformation complete]
[2024-01-10 15:04:55,571: INFO: utils: Commencing SmoteTomek]
[2024-01-10 15:04:55,879: INFO: utils: SmoteTomek Complete]
[2024-01-10 15:04:55,880: INFO: utils: Returning the transformed dataframe]
[2024-01-10 15:04:55,882: INFO: utils: Saving the pipeline object]
[2024-01-10 15:04:55,886: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-10 15:04:55,887: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-10 15:04:55,887: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 15:04:56,296: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:04:56,311: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:04:56,312: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 15:04:56,335: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 15:04:56,336: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-10 15:04:56,339: INFO: utils: Commencing pipeline transformation]
[2024-01-10 15:04:56,717: INFO: utils: Pipeline transformation complete]
[2024-01-10 15:04:56,717: INFO: utils: Commencing SmoteTomek]
[2024-01-10 15:04:56,756: INFO: utils: SmoteTomek Complete]
[2024-01-10 15:04:56,757: INFO: utils: Returning the transformed dataframe]
[2024-01-10 15:04:56,758: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 15:05:00,130: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:05:00,147: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:05:00,148: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 15:05:00,348: INFO: 5_model_training: Commencing models training]
[2024-01-10 15:06:02,536: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-10 15:06:02,543: INFO: utils: yaml file is saved]
[2024-01-10 15:06:02,543: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-10 15:06:02,545: INFO: utils: yaml file is saved]
[2024-01-10 15:06:02,546: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-10 15:06:02,800: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-10 15:15:21,581: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:15:21,584: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:15:23,654: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:15:24,810: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:15:25,976: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2357267814672) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:15:25,979: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:15:28,598: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:15:31,720: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:15:35,313: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:15:35,361: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 15:15:38,392: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:15:41,659: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:15:44,726: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:15:47,899: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:15:50,906: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:15:53,992: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:15:57,075: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:16:00,740: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:16:03,999: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:16:06,989: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:16:10,231: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:16:10,575: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:16:11,933: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 15:16:14,388: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:16:15,900: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:16:17,415: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2357488562192) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:16:17,418: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:16:20,329: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:16:23,773: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 15:16:27,019: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 15:17:01,814: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 15:17:03,890: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:17:05,256: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:17:06,773: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2357269388880) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:17:06,775: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:17:09,686: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:17:16,030: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 15:17:18,388: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-10 15:17:44,407: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-10 15:17:46,455: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:17:47,863: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:17:49,370: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2357339898448) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:17:49,372: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:17:52,269: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:17:55,591: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-10 15:17:58,630: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:17:58,670: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-10 15:18:01,853: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:18:05,112: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:18:07,074: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:18:07,440: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-10 15:18:10,514: WARNING: utils: Downgrading core protocol version from 66 to 65 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:18:12,018: WARNING: utils: Downgrading core protocol version from 65 to 5 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:18:13,527: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2357482033424) c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:18:13,528: WARNING: utils: Downgrading core protocol version from 5 to 4 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:18:16,430: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:18:19,795: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-10 15:18:22,901: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-10 15:18:29,879: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-10 15:18:32,563: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:18:34,073: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:18:35,598: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2357367332176) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:18:35,600: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:18:38,549: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:18:41,980: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-10 15:18:44,184: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-10 15:18:53,389: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:18:55,270: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 15:18:55,511: INFO: utils: Data Merging commencing]
[2024-01-10 15:18:55,898: INFO: utils: Data Merging complete]
[2024-01-10 15:18:56,757: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 15:18:56,995: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 15:18:56,997: INFO: utils: Renaming Target Column]
[2024-01-10 15:18:57,004: INFO: utils: Mapping Target Column values]
[2024-01-10 15:18:57,881: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 15:18:57,882: INFO: utils: Creating list of column names of input features]
[2024-01-10 15:18:59,299: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 15:18:59,300: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 15:18:59,943: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 15:18:59,994: INFO: utils: Data Merging commencing]
[2024-01-10 15:19:00,094: INFO: utils: Data Merging complete]
[2024-01-10 15:19:00,309: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 15:19:00,368: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 15:19:00,369: INFO: utils: Renaming Target Column]
[2024-01-10 15:19:00,371: INFO: utils: Mapping Target Column values]
[2024-01-10 15:19:00,580: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 15:19:00,581: INFO: utils: Creating list of column names of input features]
[2024-01-10 15:19:00,994: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 15:19:00,995: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 15:19:08,619: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:19:08,633: INFO: utils: yaml file is saved]
[2024-01-10 15:19:12,039: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:19:22,716: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:19:23,935: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:19:23,957: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:19:23,959: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 15:19:23,960: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-10 15:19:23,960: INFO: utils: SmoteTomek obj created]
[2024-01-10 15:19:23,962: INFO: utils: Commencing pipeline transformation]
[2024-01-10 15:19:24,386: INFO: utils: Pipeline transformation complete]
[2024-01-10 15:19:24,386: INFO: utils: Commencing SmoteTomek]
[2024-01-10 15:19:24,667: INFO: utils: SmoteTomek Complete]
[2024-01-10 15:19:24,668: INFO: utils: Returning the transformed dataframe]
[2024-01-10 15:19:24,669: INFO: utils: Saving the pipeline object]
[2024-01-10 15:19:24,675: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-10 15:19:24,676: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-10 15:19:24,676: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 15:19:25,062: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:19:25,075: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:19:25,076: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 15:19:25,103: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 15:19:25,104: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-10 15:19:25,107: INFO: utils: Commencing pipeline transformation]
[2024-01-10 15:19:25,499: INFO: utils: Pipeline transformation complete]
[2024-01-10 15:19:25,500: INFO: utils: Commencing SmoteTomek]
[2024-01-10 15:19:25,543: INFO: utils: SmoteTomek Complete]
[2024-01-10 15:19:25,543: INFO: utils: Returning the transformed dataframe]
[2024-01-10 15:19:25,545: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 15:19:30,031: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:19:30,053: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:19:30,055: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 15:19:30,282: INFO: 5_model_training: Commencing models training]
[2024-01-10 15:20:41,587: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-10 15:20:41,595: INFO: utils: yaml file is saved]
[2024-01-10 15:20:41,596: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-10 15:20:41,598: INFO: utils: yaml file is saved]
[2024-01-10 15:20:41,599: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-10 15:20:41,867: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-10 15:24:34,000: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:24:34,002: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:24:36,073: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:24:37,191: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:24:38,306: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2378815509840) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:24:38,309: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:24:40,842: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:24:46,959: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:24:50,152: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:24:50,195: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 15:24:53,216: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:24:56,304: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:24:59,357: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:02,386: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:06,417: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:09,345: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:12,365: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:16,492: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:19,525: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:22,522: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:25,971: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:26,288: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:25:27,454: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 15:25:30,506: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:25:32,011: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:25:33,542: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2378815519440) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:25:33,544: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:25:36,484: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:25:39,874: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 15:25:42,901: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 15:26:34,952: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 15:26:37,044: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:26:38,492: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:26:39,991: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2378903316688) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:26:39,994: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:26:42,926: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:26:46,301: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 15:26:49,505: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-10 15:27:16,061: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-10 15:27:18,075: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:27:19,299: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:27:20,822: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2378858429136) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:27:20,825: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:27:23,756: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:27:27,221: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-10 15:27:30,413: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:27:30,440: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-10 15:27:33,441: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:27:36,704: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:27:38,594: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:27:38,932: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-10 15:27:41,689: WARNING: utils: Downgrading core protocol version from 66 to 65 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:27:43,170: WARNING: utils: Downgrading core protocol version from 65 to 5 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:27:44,636: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2378817161040) c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:27:44,638: WARNING: utils: Downgrading core protocol version from 5 to 4 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:27:47,622: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:27:50,991: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-10 15:27:54,464: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-10 15:28:03,247: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-10 15:28:06,223: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:28:07,753: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:28:09,217: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2378816713616) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:28:09,219: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:28:12,222: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:28:15,509: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-10 15:28:17,713: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-10 15:28:27,253: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:28:29,502: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 15:28:29,690: INFO: utils: Data Merging commencing]
[2024-01-10 15:28:30,028: INFO: utils: Data Merging complete]
[2024-01-10 15:28:30,933: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 15:28:31,154: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 15:28:31,162: INFO: utils: Renaming Target Column]
[2024-01-10 15:28:31,167: INFO: utils: Mapping Target Column values]
[2024-01-10 15:28:32,187: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 15:28:32,188: INFO: utils: Creating list of column names of input features]
[2024-01-10 15:28:33,654: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 15:28:33,655: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 15:28:34,270: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 15:28:34,317: INFO: utils: Data Merging commencing]
[2024-01-10 15:28:34,407: INFO: utils: Data Merging complete]
[2024-01-10 15:28:34,638: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 15:28:34,702: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 15:28:34,703: INFO: utils: Renaming Target Column]
[2024-01-10 15:28:34,705: INFO: utils: Mapping Target Column values]
[2024-01-10 15:28:34,944: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 15:28:34,945: INFO: utils: Creating list of column names of input features]
[2024-01-10 15:28:35,369: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 15:28:35,370: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 15:28:43,164: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:28:43,181: INFO: utils: yaml file is saved]
[2024-01-10 15:28:46,499: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:28:59,972: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:29:01,362: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:29:01,379: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:29:01,380: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 15:29:01,381: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-10 15:29:01,381: INFO: utils: SmoteTomek obj created]
[2024-01-10 15:29:01,383: INFO: utils: Commencing pipeline transformation]
[2024-01-10 15:29:01,848: INFO: utils: Pipeline transformation complete]
[2024-01-10 15:29:01,849: INFO: utils: Commencing SmoteTomek]
[2024-01-10 15:29:02,086: INFO: utils: SmoteTomek Complete]
[2024-01-10 15:29:02,087: INFO: utils: Returning the transformed dataframe]
[2024-01-10 15:29:02,088: INFO: utils: Saving the pipeline object]
[2024-01-10 15:29:02,091: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-10 15:29:02,092: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-10 15:29:02,093: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 15:29:02,487: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:29:02,500: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:29:02,502: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 15:29:02,520: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 15:29:02,523: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-10 15:29:02,524: INFO: utils: Commencing pipeline transformation]
[2024-01-10 15:29:02,943: INFO: utils: Pipeline transformation complete]
[2024-01-10 15:29:02,944: INFO: utils: Commencing SmoteTomek]
[2024-01-10 15:29:02,994: INFO: utils: SmoteTomek Complete]
[2024-01-10 15:29:02,995: INFO: utils: Returning the transformed dataframe]
[2024-01-10 15:29:02,996: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 15:29:06,667: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:29:06,682: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:29:06,684: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 15:29:06,909: INFO: 5_model_training: Commencing models training]
[2024-01-10 15:30:03,531: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-10 15:30:03,538: INFO: utils: yaml file is saved]
[2024-01-10 15:30:03,538: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-10 15:30:03,540: INFO: utils: yaml file is saved]
[2024-01-10 15:30:03,540: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-10 15:30:03,574: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-10 15:30:44,556: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:30:44,557: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:30:46,644: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:30:47,809: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:30:48,946: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1706363192336) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:30:48,948: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:30:51,485: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:30:54,617: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:30:57,716: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:30:57,745: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 15:30:59,269: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:02,307: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:05,406: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:08,401: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:11,615: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:14,496: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:17,426: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:20,651: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:23,529: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:26,473: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:29,718: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:30,031: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:31:31,275: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 15:31:34,287: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:31:35,798: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:31:38,866: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1706364293392) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:31:38,869: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:31:41,860: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:31:45,182: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 15:31:48,176: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 15:32:22,936: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 15:32:26,034: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:32:27,541: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:32:29,059: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1706364453072) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:32:29,061: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:32:32,002: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:32:36,994: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 15:32:39,343: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-10 15:33:05,011: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-10 15:33:07,837: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:33:09,337: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:33:10,855: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1706432114000) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:33:10,858: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:33:13,837: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:33:17,153: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-10 15:33:20,302: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:33:20,333: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-10 15:33:23,226: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:33:26,394: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:33:28,241: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:33:28,564: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-10 15:33:31,075: WARNING: utils: Downgrading core protocol version from 66 to 65 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:33:32,573: WARNING: utils: Downgrading core protocol version from 65 to 5 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:33:34,065: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1706432764176) c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:33:34,067: WARNING: utils: Downgrading core protocol version from 5 to 4 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:33:37,025: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:33:40,373: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-10 15:33:43,580: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-10 15:33:52,706: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test3-token.json json file is loaded]
[2024-01-10 15:33:55,411: WARNING: utils: Downgrading core protocol version from 66 to 65 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:33:56,916: WARNING: utils: Downgrading core protocol version from 65 to 5 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:33:58,411: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1706371622160) f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:33:58,413: WARNING: utils: Downgrading core protocol version from 5 to 4 for f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:34:01,318: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'f58cbe8a-aeee-45dd-8312-087818381aaa-us-east-2.db.astra.datastax.com:29042:b9df2f5c-764b-47e2-915b-656958e89d04'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:34:04,726: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_3]
[2024-01-10 15:34:07,004: INFO: utils: Data queried from keyspace: scania_truck_failure_test_3]
[2024-01-10 15:34:17,040: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:34:18,911: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 15:34:19,062: INFO: utils: Data Merging commencing]
[2024-01-10 15:34:19,382: INFO: utils: Data Merging complete]
[2024-01-10 15:34:20,133: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 15:34:20,355: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 15:34:20,357: INFO: utils: Renaming Target Column]
[2024-01-10 15:34:20,360: INFO: utils: Mapping Target Column values]
[2024-01-10 15:34:21,264: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 15:34:21,265: INFO: utils: Creating list of column names of input features]
[2024-01-10 15:34:22,718: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 15:34:22,719: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 15:34:23,351: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 15:34:23,400: INFO: utils: Data Merging commencing]
[2024-01-10 15:34:23,497: INFO: utils: Data Merging complete]
[2024-01-10 15:34:23,698: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 15:34:23,766: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 15:34:23,767: INFO: utils: Renaming Target Column]
[2024-01-10 15:34:23,769: INFO: utils: Mapping Target Column values]
[2024-01-10 15:34:24,002: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 15:34:24,003: INFO: utils: Creating list of column names of input features]
[2024-01-10 15:34:24,402: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 15:34:24,403: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 15:34:31,894: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:34:31,917: INFO: utils: yaml file is saved]
[2024-01-10 15:34:35,236: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:34:45,906: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:34:47,301: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:34:47,319: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:34:47,320: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 15:34:47,320: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-10 15:34:47,321: INFO: utils: SmoteTomek obj created]
[2024-01-10 15:34:47,322: INFO: utils: Commencing pipeline transformation]
[2024-01-10 15:34:47,782: INFO: utils: Pipeline transformation complete]
[2024-01-10 15:34:47,783: INFO: utils: Commencing SmoteTomek]
[2024-01-10 15:34:48,033: INFO: utils: SmoteTomek Complete]
[2024-01-10 15:34:48,034: INFO: utils: Returning the transformed dataframe]
[2024-01-10 15:34:48,035: INFO: utils: Saving the pipeline object]
[2024-01-10 15:34:48,039: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-10 15:34:48,040: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-10 15:34:48,040: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 15:34:48,416: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:34:48,434: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:34:48,436: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 15:34:48,457: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 15:34:48,457: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-10 15:34:48,459: INFO: utils: Commencing pipeline transformation]
[2024-01-10 15:34:48,879: INFO: utils: Pipeline transformation complete]
[2024-01-10 15:34:48,879: INFO: utils: Commencing SmoteTomek]
[2024-01-10 15:34:48,919: INFO: utils: SmoteTomek Complete]
[2024-01-10 15:34:48,920: INFO: utils: Returning the transformed dataframe]
[2024-01-10 15:34:48,922: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 15:34:53,104: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:34:53,128: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:34:53,129: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 15:34:53,338: INFO: 5_model_training: Commencing models training]
[2024-01-10 15:38:06,218: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:38:06,244: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 15:38:06,246: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 15:38:06,406: INFO: 5_model_training: Commencing models training]
[2024-01-10 15:39:02,427: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-10 15:39:02,435: INFO: utils: yaml file is saved]
[2024-01-10 15:39:02,435: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-10 15:39:02,436: INFO: utils: yaml file is saved]
[2024-01-10 15:39:02,437: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-10 15:39:02,689: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-10 15:39:29,504: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:39:29,506: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:39:31,597: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:39:32,722: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:39:33,839: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1469519954320) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:39:33,841: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:39:36,396: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:39:39,497: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:39:42,518: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:39:42,554: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 15:39:44,712: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:39:47,862: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:39:51,173: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:39:54,347: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:39:57,347: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:40:00,432: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:40:04,022: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:40:07,008: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:40:09,996: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:40:13,243: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:40:16,291: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:40:16,625: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:40:17,792: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 15:40:19,839: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:40:21,097: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:40:22,610: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1469741434128) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:40:22,612: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:40:25,574: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:40:28,997: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 15:40:32,320: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 15:41:10,184: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 15:41:13,314: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:41:14,833: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:41:16,336: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1469652281936) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:41:16,339: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:41:19,260: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:41:24,348: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 15:41:26,570: INFO: utils: Data queried from keyspace: scania_truck_failure_train3]
[2024-01-10 15:41:53,084: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test1-token.json json file is loaded]
[2024-01-10 15:41:55,480: WARNING: utils: Downgrading core protocol version from 66 to 65 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:41:56,983: WARNING: utils: Downgrading core protocol version from 65 to 5 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:41:58,456: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1469592067280) c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:41:58,459: WARNING: utils: Downgrading core protocol version from 5 to 4 for c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:42:01,357: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c874a867-dc6d-4533-8891-08b679ad0ad3-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:42:07,668: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_1]
[2024-01-10 15:42:13,278: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:42:13,319: INFO: utils: Data queried from keyspace: scania_truck_failure_test_1]
[2024-01-10 15:42:16,358: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:42:20,112: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:42:21,967: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:42:22,326: INFO: utils: Secrets\Tokens\Test Data Tokens\scania_truck_failure_test2-token.json json file is loaded]
[2024-01-10 15:42:28,256: WARNING: utils: [control connection] Error connecting to c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063:]
Traceback (most recent call last):
  File "cassandra\cluster.py", line 3577, in cassandra.cluster.ControlConnection._reconnect_internal
  File "cassandra\cluster.py", line 3599, in cassandra.cluster.ControlConnection._try_connect
  File "cassandra\cluster.py", line 1670, in cassandra.cluster.Cluster.connection_factory
  File "cassandra\connection.py", line 846, in cassandra.connection.Connection.factory
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\site-packages\cassandra\io\asyncorereactor.py", line 354, in __init__
    self._connect_socket()
  File "cassandra\connection.py", line 951, in cassandra.connection.Connection._connect_socket
OSError: [Errno None] Tried connecting to [('18.117.199.14', 29042)]. Last error: timed out
[2024-01-10 15:42:33,281: WARNING: utils: [control connection] Error connecting to c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:847dbac8-8bc6-4961-a566-2ca3a6a3856b:]
Traceback (most recent call last):
  File "cassandra\cluster.py", line 3577, in cassandra.cluster.ControlConnection._reconnect_internal
  File "cassandra\cluster.py", line 3599, in cassandra.cluster.ControlConnection._try_connect
  File "cassandra\cluster.py", line 1670, in cassandra.cluster.Cluster.connection_factory
  File "cassandra\connection.py", line 846, in cassandra.connection.Connection.factory
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\site-packages\cassandra\io\asyncorereactor.py", line 354, in __init__
    self._connect_socket()
  File "cassandra\connection.py", line 951, in cassandra.connection.Connection._connect_socket
OSError: [Errno None] Tried connecting to [('18.117.199.14', 29042)]. Last error: timed out
[2024-01-10 15:42:34,973: WARNING: utils: Downgrading core protocol version from 66 to 65 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:42:36,483: WARNING: utils: Downgrading core protocol version from 65 to 5 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:42:37,965: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1469701341328) c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:42:37,967: WARNING: utils: Downgrading core protocol version from 5 to 4 for c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:42:40,908: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:42:44,246: INFO: utils: connected to cluster/keyspace: scania_truck_failure_test_2]
[2024-01-10 15:42:47,349: INFO: utils: Data queried from keyspace: scania_truck_failure_test_2]
[2024-01-10 15:44:08,867: WARNING: threading: Heartbeat failed for connection (1469521237328) to c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 15:44:08,868: WARNING: thread: Host c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c has been marked down]
[2024-01-10 15:44:11,862: INFO: thread: Successful reconnection to c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c, marking node up if it isn't already]
[2024-01-10 15:44:11,869: INFO: thread: Host c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c may be up; will prepare queries and open connection pool]
[2024-01-10 15:44:11,873: ERROR: thread: Unexpected failure handling node c1933219-acfa-4b41-bf46-935e3c2cefd0-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c being marked up:]
Traceback (most recent call last):
  File "cassandra\cluster.py", line 1925, in cassandra.cluster.Cluster.on_up
  File "cassandra\cluster.py", line 3279, in cassandra.cluster.Session.add_or_renew_pool
  File "cassandra\cluster.py", line 3400, in cassandra.cluster.Session.submit
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\concurrent\futures\thread.py", line 169, in submit
    raise RuntimeError('cannot schedule new futures after '
RuntimeError: cannot schedule new futures after interpreter shutdown
[2024-01-10 15:44:11,879: WARNING: _base: An internally scheduled tasked failed with an unhandled exception:]
Traceback (most recent call last):
  File "cassandra\cluster.py", line 1925, in cassandra.cluster.Cluster.on_up
  File "cassandra\cluster.py", line 3279, in cassandra.cluster.Session.add_or_renew_pool
  File "cassandra\cluster.py", line 3400, in cassandra.cluster.Session.submit
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\concurrent\futures\thread.py", line 169, in submit
    raise RuntimeError('cannot schedule new futures after '
RuntimeError: cannot schedule new futures after interpreter shutdown

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "cassandra\pool.py", line 296, in cassandra.pool._ReconnectionHandler.run
  File "cassandra\pool.py", line 356, in cassandra.pool._HostReconnectionHandler.on_reconnection
  File "cassandra\cluster.py", line 1935, in cassandra.cluster.Cluster.on_up
  File "cassandra\cluster.py", line 1834, in cassandra.cluster.Cluster._cleanup_failed_on_up_handling
  File "cassandra\cluster.py", line 4144, in cassandra.cluster.ControlConnection.on_down
  File "cassandra\cluster.py", line 3662, in cassandra.cluster.ControlConnection.reconnect
  File "cassandra\cluster.py", line 3704, in cassandra.cluster.ControlConnection._submit
  File "F:\iNeuron\Projects\Scania_Truck_Failures\scania_truck\Lib\concurrent\futures\thread.py", line 169, in submit
    raise RuntimeError('cannot schedule new futures after '
RuntimeError: cannot schedule new futures after interpreter shutdown
[2024-01-10 15:44:24,951: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:44:24,952: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:44:27,010: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:44:28,085: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:44:29,212: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2095490406544) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:44:29,214: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:44:31,793: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:44:34,827: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:46:13,396: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:46:13,398: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:46:15,417: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:46:16,521: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:46:17,628: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2002662067600) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:46:17,630: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:46:20,209: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:46:23,227: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:47:53,142: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:47:53,144: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:47:55,130: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:47:56,241: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:47:57,367: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(1908568949264) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:47:57,370: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:47:59,800: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:48:03,093: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:51:11,768: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:51:11,770: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:51:13,780: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:51:14,915: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:51:16,063: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2430210020240) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:51:16,067: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:51:18,610: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:51:21,737: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:52:45,950: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 15:52:45,951: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 15:52:48,006: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:52:49,121: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:52:50,233: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2127251982608) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:52:50,235: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:52:52,797: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:52:57,589: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 15:53:01,139: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:53:01,175: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 15:53:04,115: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:54:19,662: WARNING: threading: Heartbeat failed for connection (2127252166224) to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 15:54:19,663: WARNING: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c has been marked down]
[2024-01-10 15:54:22,478: INFO: thread: Successful reconnection to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c, marking node up if it isn't already]
[2024-01-10 15:54:22,480: INFO: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c may be up; will prepare queries and open connection pool]
[2024-01-10 15:54:22,636: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:54:24,332: INFO: _base: Connection pools established for node 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 15:54:24,713: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:54:26,904: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:54:29,829: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:55:50,110: WARNING: threading: Heartbeat failed for connection (2127308076048) to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 15:55:50,111: WARNING: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c has been marked down]
[2024-01-10 15:55:52,752: INFO: thread: Successful reconnection to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c, marking node up if it isn't already]
[2024-01-10 15:55:52,754: INFO: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c may be up; will prepare queries and open connection pool]
[2024-01-10 15:55:53,277: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:55:54,768: INFO: _base: Connection pools established for node 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 15:55:55,115: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:55:58,037: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:56:01,331: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:56:04,524: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:56:07,522: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:56:07,838: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 15:56:09,083: INFO: utils: Secrets\Tokens\scania_truck_failure_train_2-token.json json file is loaded]
[2024-01-10 15:56:12,059: WARNING: utils: Downgrading core protocol version from 66 to 65 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:56:13,574: WARNING: utils: Downgrading core protocol version from 65 to 5 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:56:15,068: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2127471898832) 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 15:56:15,071: WARNING: utils: Downgrading core protocol version from 5 to 4 for 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 15:56:17,966: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 15:56:21,361: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train2]
[2024-01-10 15:56:24,887: INFO: utils: Data queried from keyspace: scania_truck_failure_train2]
[2024-01-10 15:57:45,921: WARNING: threading: Heartbeat failed for connection (2127440784656) to 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 15:57:45,921: WARNING: thread: Host 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c has been marked down]
[2024-01-10 15:57:48,750: INFO: thread: Successful reconnection to 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c, marking node up if it isn't already]
[2024-01-10 15:57:48,752: INFO: thread: Host 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c may be up; will prepare queries and open connection pool]
[2024-01-10 15:57:51,099: INFO: _base: Connection pools established for node 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 15:58:15,693: WARNING: threading: Heartbeat failed for connection (2127440775440) to 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd]
[2024-01-10 15:58:15,693: WARNING: thread: Host 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd has been marked down]
[2024-01-10 15:58:18,392: INFO: thread: Successful reconnection to 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd, marking node up if it isn't already]
[2024-01-10 15:58:18,393: INFO: thread: Host 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd may be up; will prepare queries and open connection pool]
[2024-01-10 15:58:19,350: WARNING: threading: Heartbeat failed for connection (2127471901456) to 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd]
[2024-01-10 15:58:20,765: INFO: _base: Connection pools established for node 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd]
[2024-01-10 15:59:16,090: WARNING: threading: Heartbeat failed for connection (2127257700240) to 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 15:59:16,091: WARNING: thread: Host 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c has been marked down]
[2024-01-10 15:59:18,897: INFO: thread: Successful reconnection to 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c, marking node up if it isn't already]
[2024-01-10 15:59:18,898: INFO: thread: Host 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c may be up; will prepare queries and open connection pool]
[2024-01-10 15:59:21,309: INFO: _base: Connection pools established for node 096c3072-4bea-4d8c-9dc1-64bd7887fafb-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 16:00:04,687: INFO: utils: Secrets\Tokens\scania_truck_failure_train_3-token.json json file is loaded]
[2024-01-10 16:00:07,735: WARNING: utils: Downgrading core protocol version from 66 to 65 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 16:00:09,245: WARNING: utils: Downgrading core protocol version from 65 to 5 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 16:00:10,771: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2127253115408) dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 16:00:10,773: WARNING: utils: Downgrading core protocol version from 5 to 4 for dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 16:00:13,739: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host 'dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 16:00:18,694: INFO: utils: connected to cluster/keyspace: scania_truck_failure_train3]
[2024-01-10 16:01:41,121: WARNING: threading: Heartbeat failed for connection (2127276924816) to dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd]
[2024-01-10 16:01:41,121: WARNING: thread: Host dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd has been marked down]
[2024-01-10 16:01:43,828: INFO: thread: Successful reconnection to dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd, marking node up if it isn't already]
[2024-01-10 16:01:43,829: INFO: thread: Host dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd may be up; will prepare queries and open connection pool]
[2024-01-10 16:01:46,514: INFO: _base: Connection pools established for node dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:1e8fc4cc-1ad1-42f4-aebe-1f97f329f1fd]
[2024-01-10 16:02:09,506: WARNING: threading: Heartbeat failed for connection (2127276931792) to dff70ac7-abd4-44a8-9ac5-44fca5b6b75d-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 16:34:36,408: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 16:34:36,439: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 16:34:38,595: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 16:34:39,707: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 16:34:40,819: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2629272884432) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 16:34:40,822: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 16:34:43,359: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 16:34:46,489: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 16:36:11,419: WARNING: threading: Heartbeat failed for connection (2629273050960) to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1]
[2024-01-10 16:36:11,419: WARNING: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1 has been marked down]
[2024-01-10 16:36:14,469: INFO: thread: Successful reconnection to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1, marking node up if it isn't already]
[2024-01-10 16:36:14,471: INFO: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1 may be up; will prepare queries and open connection pool]
[2024-01-10 16:36:16,827: INFO: _base: Connection pools established for node 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1]
[2024-01-10 16:36:40,109: WARNING: threading: Heartbeat failed for connection (2629273048336) to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 17:16:10,925: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:16:10,928: INFO: utils: Secrets\Tokens\scania_truck_failure_1-token.json json file is loaded]
[2024-01-10 17:16:12,981: WARNING: utils: Downgrading core protocol version from 66 to 65 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 17:16:14,081: WARNING: utils: Downgrading core protocol version from 65 to 5 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 17:16:15,180: ERROR: asyncorereactor: Closing connection <AsyncoreConnection(2954123626960) 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063> due to protocol error: Error from server: code=000a [Protocol error] message="Beta version of the protocol used (5/v5-beta), but USE_BETA flag is unset"]
[2024-01-10 17:16:15,182: WARNING: utils: Downgrading core protocol version from 5 to 4 for 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063. To avoid this, it is best practice to explicitly set Cluster(protocol_version) to the version supported by your cluster. http://datastax.github.io/python-driver/api/cassandra/cluster.html#cassandra.cluster.Cluster.protocol_version]
[2024-01-10 17:16:17,673: INFO: policies: Using datacenter 'us-east-2' for DCAwareRoundRobinPolicy (via host '3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:8f2a6baa-f35a-4d5e-afe7-73d1932cd063'); if incorrect, please specify a local_dc to the constructor, or limit contact points to local cluster nodes]
[2024-01-10 17:16:23,832: INFO: utils: connected to cluster/keyspace: scania_truck_failure1]
[2024-01-10 17:17:45,256: WARNING: threading: Heartbeat failed for connection (2954123792848) to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 17:17:45,257: WARNING: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c has been marked down]
[2024-01-10 17:17:48,017: INFO: thread: Successful reconnection to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c, marking node up if it isn't already]
[2024-01-10 17:17:48,017: INFO: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c may be up; will prepare queries and open connection pool]
[2024-01-10 17:17:48,399: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 17:17:48,419: INFO: utils: Data queried from keyspace: scania_truck_failure1]
[2024-01-10 17:17:49,702: INFO: _base: Connection pools established for node 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 17:17:49,948: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 17:18:42,585: WARNING: threading: Heartbeat failed for connection (2954123795472) to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1]
[2024-01-10 17:18:42,587: WARNING: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1 has been marked down]
[2024-01-10 17:18:45,732: INFO: thread: Successful reconnection to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1, marking node up if it isn't already]
[2024-01-10 17:18:45,734: INFO: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1 may be up; will prepare queries and open connection pool]
[2024-01-10 17:18:48,750: INFO: _base: Connection pools established for node 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:56902b62-a029-4d03-ada6-2c420d94f0b1]
[2024-01-10 17:19:15,406: WARNING: threading: Heartbeat failed for connection (2954125094864) to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 17:19:15,407: WARNING: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c has been marked down]
[2024-01-10 17:19:18,156: INFO: thread: Successful reconnection to 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c, marking node up if it isn't already]
[2024-01-10 17:19:18,157: INFO: thread: Host 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c may be up; will prepare queries and open connection pool]
[2024-01-10 17:19:18,377: WARNING: asyncorereactor: Failed creating named tuple for results with column names ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class'] (cleaned: ['ident_id', 'aa_000', 'ab_000', 'ac_000', 'ad_000', 'ae_000', 'af_000', 'ag_000', 'ag_001', 'ag_002', 'ag_003', 'ag_004', 'ag_005', 'ag_006', 'ag_007', 'ag_008', 'ag_009', 'ah_000', 'ai_000', 'aj_000', 'ak_000', 'al_000', 'am_0', 'an_000', 'ao_000', 'ap_000', 'aq_000', 'ar_000', 'as_000', 'at_000', 'au_000', 'av_000', 'ax_000', 'ay_000', 'ay_001', 'ay_002', 'ay_003', 'ay_004', 'ay_005', 'ay_006', 'ay_007', 'ay_008', 'ay_009', 'az_000', 'az_001', 'az_002', 'az_003', 'az_004', 'az_005', 'az_006', 'az_007', 'az_008', 'az_009', 'ba_000', 'ba_001', 'ba_002', 'ba_003', 'ba_004', 'ba_005', 'ba_006', 'ba_007', 'ba_008', 'ba_009', 'bb_000', 'bc_000', 'bd_000', 'be_000', 'bf_000', 'bg_000', 'bh_000', 'bi_000', 'bj_000', 'bk_000', 'bl_000', 'class']) (see Python 'namedtuple' documentation for details on name rules). Results will be returned with positional names. Avoid this by choosing different names, using SELECT "<col name>" AS aliases, or specifying a different row_factory on your Session]
[2024-01-10 17:19:19,802: INFO: _base: Connection pools established for node 3670cf92-eb41-41b2-8e3d-c8a5f5d81913-us-east-2.db.astra.datastax.com:29042:c22364fc-3bc3-46a8-988e-53543193b59c]
[2024-01-10 17:30:29,987: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:30:31,398: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 17:30:31,551: INFO: utils: Data Merging commencing]
[2024-01-10 17:30:31,822: INFO: utils: Data Merging complete]
[2024-01-10 17:30:32,517: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 17:30:32,708: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 17:30:32,709: INFO: utils: Renaming Target Column]
[2024-01-10 17:30:32,712: INFO: utils: Mapping Target Column values]
[2024-01-10 17:30:33,344: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 17:30:33,345: INFO: utils: Creating list of column names of input features]
[2024-01-10 17:30:34,438: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 17:30:34,438: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 17:30:34,854: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 17:30:34,890: INFO: utils: Data Merging commencing]
[2024-01-10 17:30:34,986: INFO: utils: Data Merging complete]
[2024-01-10 17:30:35,145: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 17:30:35,195: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 17:30:35,196: INFO: utils: Renaming Target Column]
[2024-01-10 17:30:35,197: INFO: utils: Mapping Target Column values]
[2024-01-10 17:30:35,360: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 17:30:35,361: INFO: utils: Creating list of column names of input features]
[2024-01-10 17:30:35,677: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 17:30:35,677: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 17:30:41,419: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:30:41,430: INFO: utils: yaml file is saved]
[2024-01-10 17:30:43,665: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:30:50,970: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:30:51,815: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:30:51,834: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 17:30:51,843: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 17:30:51,844: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-10 17:30:51,844: INFO: utils: SmoteTomek obj created]
[2024-01-10 17:30:51,844: INFO: utils: Commencing pipeline transformation]
[2024-01-10 17:30:52,159: INFO: utils: Pipeline transformation complete]
[2024-01-10 17:30:52,159: INFO: utils: Commencing SmoteTomek]
[2024-01-10 17:30:52,320: INFO: utils: SmoteTomek Complete]
[2024-01-10 17:30:52,321: INFO: utils: Returning the transformed dataframe]
[2024-01-10 17:30:52,322: INFO: utils: Saving the pipeline object]
[2024-01-10 17:30:52,324: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-10 17:30:52,325: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-10 17:30:52,325: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 17:30:52,630: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:30:52,640: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 17:30:52,641: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 17:30:52,655: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 17:30:52,656: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-10 17:30:52,657: INFO: utils: Commencing pipeline transformation]
[2024-01-10 17:30:52,948: INFO: utils: Pipeline transformation complete]
[2024-01-10 17:30:52,949: INFO: utils: Commencing SmoteTomek]
[2024-01-10 17:30:52,977: INFO: utils: SmoteTomek Complete]
[2024-01-10 17:30:52,978: INFO: utils: Returning the transformed dataframe]
[2024-01-10 17:30:52,979: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 17:30:55,123: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:30:55,133: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 17:30:55,134: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 17:30:55,257: INFO: 5_model_training: Commencing models training]
[2024-01-10 17:31:45,203: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-10 17:31:45,208: INFO: utils: yaml file is saved]
[2024-01-10 17:31:45,210: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-10 17:31:45,212: INFO: utils: yaml file is saved]
[2024-01-10 17:31:45,212: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-10 17:31:45,433: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-10 17:31:47,788: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 17:31:48,052: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 17:31:48,429: INFO: utils: pickled_object: artifacts\model\model.joblib loaded]
[2024-01-10 17:31:59,823: INFO: utils: yaml file is saved]
[2024-01-10 18:37:32,972: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:37:34,389: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 18:37:34,526: INFO: utils: Data Merging commencing]
[2024-01-10 18:37:34,794: INFO: utils: Data Merging complete]
[2024-01-10 18:37:35,736: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 18:37:35,967: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 18:37:35,967: INFO: utils: Renaming Target Column]
[2024-01-10 18:37:35,969: INFO: utils: Mapping Target Column values]
[2024-01-10 18:37:36,648: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 18:37:36,649: INFO: utils: Creating list of column names of input features]
[2024-01-10 18:37:37,741: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 18:37:37,741: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 18:37:38,160: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 18:37:38,203: INFO: utils: Data Merging commencing]
[2024-01-10 18:37:38,279: INFO: utils: Data Merging complete]
[2024-01-10 18:37:38,447: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 18:37:38,496: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 18:37:38,497: INFO: utils: Renaming Target Column]
[2024-01-10 18:37:38,498: INFO: utils: Mapping Target Column values]
[2024-01-10 18:37:38,656: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 18:37:38,657: INFO: utils: Creating list of column names of input features]
[2024-01-10 18:37:38,968: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 18:37:38,969: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 18:37:44,771: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:37:44,782: INFO: utils: yaml file is saved]
[2024-01-10 18:37:47,083: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:37:54,354: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:37:55,245: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:37:55,257: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:37:55,258: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 18:37:55,258: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-10 18:37:55,258: INFO: utils: SmoteTomek obj created]
[2024-01-10 18:37:55,260: INFO: utils: Commencing pipeline transformation]
[2024-01-10 18:37:55,572: INFO: utils: Pipeline transformation complete]
[2024-01-10 18:37:55,572: INFO: utils: Commencing SmoteTomek]
[2024-01-10 18:37:55,728: INFO: utils: SmoteTomek Complete]
[2024-01-10 18:37:55,728: INFO: utils: Returning the transformed dataframe]
[2024-01-10 18:37:55,729: INFO: utils: Saving the pipeline object]
[2024-01-10 18:37:55,732: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-10 18:37:55,732: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-10 18:37:55,732: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 18:37:56,045: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:37:56,055: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:37:56,056: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 18:37:56,076: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 18:37:56,077: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-10 18:37:56,080: INFO: utils: Commencing pipeline transformation]
[2024-01-10 18:37:56,402: INFO: utils: Pipeline transformation complete]
[2024-01-10 18:37:56,402: INFO: utils: Commencing SmoteTomek]
[2024-01-10 18:37:56,433: INFO: utils: SmoteTomek Complete]
[2024-01-10 18:37:56,434: INFO: utils: Returning the transformed dataframe]
[2024-01-10 18:37:56,434: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 18:37:58,529: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:37:58,540: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:37:58,541: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 18:37:58,661: INFO: 5_model_training: Commencing models training]
[2024-01-10 18:40:48,224: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:40:49,649: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 18:40:49,785: INFO: utils: Data Merging commencing]
[2024-01-10 18:40:50,239: INFO: utils: Data Merging complete]
[2024-01-10 18:40:52,132: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 18:40:52,342: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 18:40:52,353: INFO: utils: Renaming Target Column]
[2024-01-10 18:40:52,377: INFO: utils: Mapping Target Column values]
[2024-01-10 18:40:53,183: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 18:40:53,184: INFO: utils: Creating list of column names of input features]
[2024-01-10 18:40:54,502: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 18:40:54,503: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 18:40:54,973: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 18:40:55,028: INFO: utils: Data Merging commencing]
[2024-01-10 18:40:55,111: INFO: utils: Data Merging complete]
[2024-01-10 18:40:55,287: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 18:40:55,340: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 18:40:55,342: INFO: utils: Renaming Target Column]
[2024-01-10 18:40:55,343: INFO: utils: Mapping Target Column values]
[2024-01-10 18:40:55,523: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 18:40:55,524: INFO: utils: Creating list of column names of input features]
[2024-01-10 18:40:55,912: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 18:40:55,912: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 18:41:05,929: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:41:05,964: INFO: utils: yaml file is saved]
[2024-01-10 18:41:09,399: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:41:16,897: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:41:17,784: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:41:17,796: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:41:17,797: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 18:41:17,797: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-10 18:41:17,799: INFO: utils: SmoteTomek obj created]
[2024-01-10 18:41:17,800: INFO: utils: Commencing pipeline transformation]
[2024-01-10 18:41:18,113: INFO: utils: Pipeline transformation complete]
[2024-01-10 18:41:18,113: INFO: utils: Commencing SmoteTomek]
[2024-01-10 18:41:18,264: INFO: utils: SmoteTomek Complete]
[2024-01-10 18:41:18,265: INFO: utils: Returning the transformed dataframe]
[2024-01-10 18:41:18,266: INFO: utils: Saving the pipeline object]
[2024-01-10 18:41:18,268: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-10 18:41:18,269: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-10 18:41:18,269: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 18:41:18,590: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:41:18,600: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:41:18,602: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 18:41:18,630: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 18:41:18,630: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-10 18:41:18,632: INFO: utils: Commencing pipeline transformation]
[2024-01-10 18:41:18,919: INFO: utils: Pipeline transformation complete]
[2024-01-10 18:41:18,919: INFO: utils: Commencing SmoteTomek]
[2024-01-10 18:41:18,953: INFO: utils: SmoteTomek Complete]
[2024-01-10 18:41:18,955: INFO: utils: Returning the transformed dataframe]
[2024-01-10 18:41:18,956: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 18:41:21,172: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:41:21,182: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:41:21,182: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 18:41:21,302: INFO: 5_model_training: Commencing models training]
[2024-01-10 18:42:12,419: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-10 18:42:12,423: INFO: utils: yaml file is saved]
[2024-01-10 18:42:12,424: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-10 18:42:12,431: INFO: utils: yaml file is saved]
[2024-01-10 18:42:12,432: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-10 18:42:12,457: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-10 18:42:15,358: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:42:15,641: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 18:42:15,673: INFO: utils: pickled_object: artifacts\model\model.joblib loaded]
[2024-01-10 18:42:25,053: INFO: utils: yaml file is saved]
[2024-01-10 18:43:14,412: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:43:15,854: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 18:43:15,995: INFO: utils: Data Merging commencing]
[2024-01-10 18:43:16,272: INFO: utils: Data Merging complete]
[2024-01-10 18:43:16,915: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 18:43:17,111: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 18:43:17,112: INFO: utils: Renaming Target Column]
[2024-01-10 18:43:17,115: INFO: utils: Mapping Target Column values]
[2024-01-10 18:43:17,728: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 18:43:17,729: INFO: utils: Creating list of column names of input features]
[2024-01-10 18:43:18,871: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 18:43:18,871: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 18:43:19,306: INFO: utils: Stage 1 Processing Commencing]
[2024-01-10 18:43:19,347: INFO: utils: Data Merging commencing]
[2024-01-10 18:43:19,457: INFO: utils: Data Merging complete]
[2024-01-10 18:43:19,620: INFO: utils: Sorting and reseting_index complete]
[2024-01-10 18:43:19,679: INFO: utils: Dropping column: 'ident_id']
[2024-01-10 18:43:19,680: INFO: utils: Renaming Target Column]
[2024-01-10 18:43:19,681: INFO: utils: Mapping Target Column values]
[2024-01-10 18:43:19,845: INFO: utils: Replacing 'na' to 'np.nan' values]
[2024-01-10 18:43:19,846: INFO: utils: Creating list of column names of input features]
[2024-01-10 18:43:20,182: INFO: utils: dtype of input features converted from 'object' to 'float']
[2024-01-10 18:43:20,182: INFO: utils: Stage 1 processing complete - Returning processed dataframe]
[2024-01-10 18:43:26,113: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:43:26,125: INFO: utils: yaml file is saved]
[2024-01-10 18:43:28,216: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:43:35,636: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:43:36,521: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:43:36,534: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:43:36,535: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 18:43:36,535: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-10 18:43:36,535: INFO: utils: SmoteTomek obj created]
[2024-01-10 18:43:36,537: INFO: utils: Commencing pipeline transformation]
[2024-01-10 18:43:36,885: INFO: utils: Pipeline transformation complete]
[2024-01-10 18:43:36,886: INFO: utils: Commencing SmoteTomek]
[2024-01-10 18:43:37,019: INFO: utils: SmoteTomek Complete]
[2024-01-10 18:43:37,020: INFO: utils: Returning the transformed dataframe]
[2024-01-10 18:43:37,021: INFO: utils: Saving the pipeline object]
[2024-01-10 18:43:37,024: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-10 18:43:37,024: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-10 18:43:37,025: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 18:43:37,338: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:43:37,349: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:43:37,350: INFO: utils: Stage 2 Processing Commencing]
[2024-01-10 18:43:37,362: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 18:43:37,362: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-10 18:43:37,364: INFO: utils: Commencing pipeline transformation]
[2024-01-10 18:43:37,701: INFO: utils: Pipeline transformation complete]
[2024-01-10 18:43:37,701: INFO: utils: Commencing SmoteTomek]
[2024-01-10 18:43:37,732: INFO: utils: SmoteTomek Complete]
[2024-01-10 18:43:37,733: INFO: utils: Returning the transformed dataframe]
[2024-01-10 18:43:37,735: INFO: utils: Stage 2 Processing Complete]
[2024-01-10 18:43:39,871: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:43:39,882: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-10 18:43:39,883: INFO: 5_model_training: loading training and testing datasets]
[2024-01-10 18:43:40,005: INFO: 5_model_training: Commencing models training]
[2024-01-10 18:44:32,078: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-10 18:44:32,100: INFO: utils: yaml file is saved]
[2024-01-10 18:44:32,102: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-10 18:44:32,105: INFO: utils: yaml file is saved]
[2024-01-10 18:44:32,107: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-10 18:44:32,111: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-10 18:44:36,486: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-10 18:44:36,851: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-10 18:44:36,887: INFO: utils: pickled_object: artifacts\model\model.joblib loaded]
[2024-01-10 18:44:37,489: INFO: utils: yaml file is saved]
[2024-01-11 19:13:54,045: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:18:11,792: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:21:52,779: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:22:05,726: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:23:00,425: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:28:27,754: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:49:37,058: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:50:03,878: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:53:23,150: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:56:48,938: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-11 20:57:52,189: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:14:39,769: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:14:39,790: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:14:39,846: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:14:39,884: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:14:39,886: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:14:40,106: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:14:40,119: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:14:41,497: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 00:14:41,499: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:14:41,664: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 00:14:41,664: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:14:41,955: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:14:41,956: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:14:42,166: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:14:42,167: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:14:42,300: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:14:42,301: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:14:42,386: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:14:42,387: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:14:42,472: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 00:14:42,473: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:14:42,625: INFO: tpe: build_posterior_wrapper took 0.000984 seconds]
[2024-01-12 00:14:42,625: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:14:42,773: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:14:42,773: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:14:42,888: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:14:42,888: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:14:43,102: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:14:43,622: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 00:14:43,623: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:14:43,683: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:14:43,683: INFO: tpe: TPE using 1/1 trials with best loss 205490.000000]
[2024-01-12 00:14:43,727: INFO: tpe: build_posterior_wrapper took 0.003011 seconds]
[2024-01-12 00:14:43,728: INFO: tpe: TPE using 2/2 trials with best loss 151920.000000]
[2024-01-12 00:14:43,751: INFO: tpe: build_posterior_wrapper took 0.002001 seconds]
[2024-01-12 00:14:43,752: INFO: tpe: TPE using 3/3 trials with best loss 151920.000000]
[2024-01-12 00:14:43,792: INFO: tpe: build_posterior_wrapper took 0.001999 seconds]
[2024-01-12 00:14:43,794: INFO: tpe: TPE using 4/4 trials with best loss 151920.000000]
[2024-01-12 00:14:43,861: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 00:14:43,865: INFO: tpe: TPE using 5/5 trials with best loss 151920.000000]
[2024-01-12 00:14:43,888: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:14:43,889: INFO: tpe: TPE using 6/6 trials with best loss 141110.000000]
[2024-01-12 00:14:43,937: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:14:43,938: INFO: tpe: TPE using 7/7 trials with best loss 141110.000000]
[2024-01-12 00:14:43,964: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:14:43,965: INFO: tpe: TPE using 8/8 trials with best loss 141110.000000]
[2024-01-12 00:14:43,987: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:14:43,988: INFO: tpe: TPE using 9/9 trials with best loss 141110.000000]
[2024-01-12 00:14:44,062: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:00,171: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:20:00,178: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:00,188: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:20:00,200: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:20:00,201: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:20:00,307: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:20:00,314: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:00,861: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:20:00,861: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:20:00,922: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:00,923: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:20:00,982: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:00,983: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:20:01,043: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:01,044: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:20:01,106: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:01,107: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:20:01,169: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:01,170: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:20:01,228: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 00:20:01,228: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:20:01,288: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:01,289: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:20:01,350: INFO: tpe: build_posterior_wrapper took 0.000499 seconds]
[2024-01-12 00:20:01,351: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:20:01,421: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:01,422: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:20:25,260: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:20:25,268: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:25,277: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:20:25,289: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:20:25,291: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:20:25,388: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:20:25,394: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:25,942: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:25,943: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:20:26,005: INFO: tpe: build_posterior_wrapper took 0.001017 seconds]
[2024-01-12 00:20:26,005: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 00:20:26,066: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:26,066: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 00:20:26,124: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:26,125: INFO: tpe: TPE using 3/3 trials with best loss 443680.000000]
[2024-01-12 00:20:26,189: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:26,189: INFO: tpe: TPE using 4/4 trials with best loss 443680.000000]
[2024-01-12 00:20:26,251: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 00:20:26,251: INFO: tpe: TPE using 5/5 trials with best loss 443680.000000]
[2024-01-12 00:20:26,309: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:26,310: INFO: tpe: TPE using 6/6 trials with best loss 443680.000000]
[2024-01-12 00:20:26,369: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:26,370: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:20:26,431: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:26,432: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:20:26,492: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:26,492: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:20:44,811: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:20:44,819: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:44,833: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:20:44,844: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:20:44,846: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:20:44,952: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:20:44,960: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:45,528: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:20:45,528: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:20:45,589: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:45,590: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 00:20:45,650: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:45,651: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 00:20:45,709: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:45,709: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:20:45,769: INFO: tpe: build_posterior_wrapper took 0.000986 seconds]
[2024-01-12 00:20:45,769: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:20:45,828: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:45,829: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:20:45,892: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:45,893: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:20:45,955: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:45,955: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:20:46,016: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:46,017: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:20:46,073: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:46,074: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:20:56,915: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:20:56,923: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:56,936: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:20:56,947: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:20:56,947: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:20:57,060: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:20:57,068: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:57,657: INFO: tpe: build_posterior_wrapper took 0.000970 seconds]
[2024-01-12 00:20:57,657: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:20:57,720: INFO: tpe: build_posterior_wrapper took 0.000340 seconds]
[2024-01-12 00:20:57,721: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:20:57,792: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 00:20:57,792: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:20:57,857: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:57,858: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:20:57,921: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 00:20:57,921: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:20:57,980: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:57,981: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:20:58,104: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,104: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:20:58,165: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,166: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:20:58,230: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,231: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:20:58,294: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,294: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:20:58,366: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:20:58,673: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:20:58,674: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:20:58,691: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,692: INFO: tpe: TPE using 1/1 trials with best loss 156580.000000]
[2024-01-12 00:20:58,710: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,711: INFO: tpe: TPE using 2/2 trials with best loss 124920.000000]
[2024-01-12 00:20:58,730: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,731: INFO: tpe: TPE using 3/3 trials with best loss 122410.000000]
[2024-01-12 00:20:58,752: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 00:20:58,753: INFO: tpe: TPE using 4/4 trials with best loss 122410.000000]
[2024-01-12 00:20:58,782: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,783: INFO: tpe: TPE using 5/5 trials with best loss 122410.000000]
[2024-01-12 00:20:58,809: INFO: tpe: build_posterior_wrapper took 0.000918 seconds]
[2024-01-12 00:20:58,810: INFO: tpe: TPE using 6/6 trials with best loss 99510.000000]
[2024-01-12 00:20:58,834: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 00:20:58,835: INFO: tpe: TPE using 7/7 trials with best loss 99510.000000]
[2024-01-12 00:20:58,881: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:20:58,882: INFO: tpe: TPE using 8/8 trials with best loss 99510.000000]
[2024-01-12 00:20:58,901: INFO: tpe: build_posterior_wrapper took 0.000616 seconds]
[2024-01-12 00:20:58,902: INFO: tpe: TPE using 9/9 trials with best loss 21660.000000]
[2024-01-12 00:20:58,935: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:23:42,463: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:23:42,472: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:23:42,482: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:23:42,493: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:23:42,493: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:23:42,590: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:23:42,598: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:23:43,151: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:23:43,151: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:23:43,213: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:23:43,214: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:23:43,273: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:23:43,274: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:23:43,333: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:23:43,333: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:23:43,395: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 00:23:43,395: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:23:43,455: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:23:43,456: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:23:43,514: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 00:23:43,514: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:23:43,575: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:23:43,576: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:23:43,635: INFO: tpe: build_posterior_wrapper took 0.000977 seconds]
[2024-01-12 00:23:43,636: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:23:43,697: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:23:43,698: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:24:53,386: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:24:53,394: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:24:53,405: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:24:53,415: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:24:53,416: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:24:53,510: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:24:53,518: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:24:54,076: INFO: tpe: build_posterior_wrapper took 0.001019 seconds]
[2024-01-12 00:24:54,076: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:24:54,137: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:24:54,137: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:24:54,194: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:24:54,194: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:24:54,256: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:24:54,257: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:24:54,319: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:24:54,320: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:24:54,381: INFO: tpe: build_posterior_wrapper took 0.000970 seconds]
[2024-01-12 00:24:54,381: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:24:54,439: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:24:54,440: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:24:54,503: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:24:54,503: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:24:54,568: INFO: tpe: build_posterior_wrapper took 0.001012 seconds]
[2024-01-12 00:24:54,568: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:24:54,632: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:24:54,633: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:26:27,307: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:26:27,314: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:26:27,324: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:26:27,334: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:26:27,335: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:26:27,436: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:26:27,444: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:26:27,991: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:27,992: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:26:28,052: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:28,052: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 00:26:28,115: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:28,116: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 00:26:28,176: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:28,177: INFO: tpe: TPE using 3/3 trials with best loss 443680.000000]
[2024-01-12 00:26:28,236: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:28,237: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:26:28,299: INFO: tpe: build_posterior_wrapper took 0.000962 seconds]
[2024-01-12 00:26:28,299: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:26:28,357: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:28,358: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:26:28,422: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:28,423: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:26:28,488: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:28,490: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:26:28,568: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:26:28,569: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:27:20,669: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:27:20,686: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:27:20,708: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:27:20,718: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:27:20,721: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:27:20,844: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:27:20,852: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:27:21,448: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:27:21,449: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:27:21,529: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 00:27:21,530: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:27:21,604: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:27:21,605: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:27:21,661: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 00:27:21,661: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:27:21,726: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:27:21,727: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:27:21,789: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:27:21,790: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:27:21,853: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:27:21,853: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:27:21,912: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 00:27:21,913: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:27:21,975: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:27:21,975: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:27:22,036: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:27:22,037: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:27:22,112: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:27:22,345: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 00:27:22,346: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:27:22,366: INFO: tpe: build_posterior_wrapper took 0.000617 seconds]
[2024-01-12 00:27:22,367: INFO: tpe: TPE using 1/1 trials with best loss 311540.000000]
[2024-01-12 00:27:22,413: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 00:27:22,413: INFO: tpe: TPE using 2/2 trials with best loss 212410.000000]
[2024-01-12 00:27:22,433: INFO: tpe: build_posterior_wrapper took 0.000500 seconds]
[2024-01-12 00:27:22,434: INFO: tpe: TPE using 3/3 trials with best loss 131370.000000]
[2024-01-12 00:27:22,453: INFO: tpe: build_posterior_wrapper took 0.000819 seconds]
[2024-01-12 00:27:22,455: INFO: tpe: TPE using 4/4 trials with best loss 24390.000000]
[2024-01-12 00:27:22,472: INFO: tpe: build_posterior_wrapper took 0.001545 seconds]
[2024-01-12 00:27:22,473: INFO: tpe: TPE using 5/5 trials with best loss 24390.000000]
[2024-01-12 00:27:22,493: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:27:22,494: INFO: tpe: TPE using 6/6 trials with best loss 24390.000000]
[2024-01-12 00:27:22,514: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 00:27:22,515: INFO: tpe: TPE using 7/7 trials with best loss 24390.000000]
[2024-01-12 00:27:22,550: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 00:27:22,551: INFO: tpe: TPE using 8/8 trials with best loss 24390.000000]
[2024-01-12 00:27:22,607: INFO: tpe: build_posterior_wrapper took 0.000909 seconds]
[2024-01-12 00:27:22,608: INFO: tpe: TPE using 9/9 trials with best loss 24390.000000]
[2024-01-12 00:27:22,632: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:28:03,502: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:28:03,509: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:28:03,518: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:28:03,530: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:28:03,531: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:28:03,636: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:28:03,643: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:28:04,226: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:04,226: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:28:04,284: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:04,285: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 00:28:04,346: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:04,347: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:28:04,405: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 00:28:04,405: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:28:04,464: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 00:28:04,464: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:28:04,524: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:04,525: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:28:04,585: INFO: tpe: build_posterior_wrapper took 0.000984 seconds]
[2024-01-12 00:28:04,585: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:28:04,641: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:04,641: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:28:04,703: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:04,704: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:28:04,762: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:28:04,763: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:28:04,830: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:28:05,091: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 00:28:05,092: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:28:05,121: INFO: tpe: build_posterior_wrapper took 0.001085 seconds]
[2024-01-12 00:28:05,122: INFO: tpe: TPE using 1/1 trials with best loss 211540.000000]
[2024-01-12 00:28:05,138: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:05,139: INFO: tpe: TPE using 2/2 trials with best loss 59470.000000]
[2024-01-12 00:28:05,161: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:05,162: INFO: tpe: TPE using 3/3 trials with best loss 59470.000000]
[2024-01-12 00:28:05,218: INFO: tpe: build_posterior_wrapper took 0.000941 seconds]
[2024-01-12 00:28:05,218: INFO: tpe: TPE using 4/4 trials with best loss 55270.000000]
[2024-01-12 00:28:05,243: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 00:28:05,243: INFO: tpe: TPE using 5/5 trials with best loss 55270.000000]
[2024-01-12 00:28:05,263: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:05,264: INFO: tpe: TPE using 6/6 trials with best loss 53510.000000]
[2024-01-12 00:28:05,284: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:05,285: INFO: tpe: TPE using 7/7 trials with best loss 53510.000000]
[2024-01-12 00:28:05,300: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:28:05,302: INFO: tpe: TPE using 8/8 trials with best loss 53510.000000]
[2024-01-12 00:28:05,319: INFO: tpe: build_posterior_wrapper took 0.001007 seconds]
[2024-01-12 00:28:05,320: INFO: tpe: TPE using 9/9 trials with best loss 53510.000000]
[2024-01-12 00:28:05,357: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:29:52,173: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:29:52,180: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:29:52,192: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:29:52,204: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:29:52,205: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:29:52,313: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:29:52,321: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:29:52,866: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:29:52,867: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:29:52,923: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 00:29:52,923: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:29:52,978: INFO: tpe: build_posterior_wrapper took 0.000984 seconds]
[2024-01-12 00:29:52,978: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:29:53,036: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 00:29:53,036: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:29:53,091: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:29:53,091: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:29:53,144: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:29:53,144: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:29:53,201: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:29:53,202: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:29:53,256: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:29:53,257: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:29:53,311: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:29:53,311: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:29:53,374: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:29:53,374: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:30:44,917: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:30:44,926: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:30:44,936: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:30:44,947: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:30:44,948: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:30:45,053: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:30:45,061: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:30:45,617: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 00:30:45,617: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:30:45,674: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 00:30:45,674: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 00:30:45,729: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:45,730: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:30:45,784: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:45,784: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:30:45,842: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:45,843: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:30:45,896: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:45,896: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:30:45,956: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:45,957: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:30:46,016: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:46,016: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:30:46,079: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:46,080: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:30:46,134: INFO: tpe: build_posterior_wrapper took 0.000992 seconds]
[2024-01-12 00:30:46,134: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:30:46,201: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:30:46,531: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:46,532: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:30:46,550: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:46,552: INFO: tpe: TPE using 1/1 trials with best loss 498570.000000]
[2024-01-12 00:30:46,591: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:46,592: INFO: tpe: TPE using 2/2 trials with best loss 498570.000000]
[2024-01-12 00:30:46,605: INFO: tpe: build_posterior_wrapper took 0.001998 seconds]
[2024-01-12 00:30:46,606: INFO: tpe: TPE using 3/3 trials with best loss 43210.000000]
[2024-01-12 00:30:46,641: INFO: tpe: build_posterior_wrapper took 0.001018 seconds]
[2024-01-12 00:30:46,642: INFO: tpe: TPE using 4/4 trials with best loss 43210.000000]
[2024-01-12 00:30:46,658: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:30:46,659: INFO: tpe: TPE using 5/5 trials with best loss 43210.000000]
[2024-01-12 00:30:46,742: INFO: tpe: build_posterior_wrapper took 0.000606 seconds]
[2024-01-12 00:30:46,742: INFO: tpe: TPE using 6/6 trials with best loss 4840.000000]
[2024-01-12 00:30:46,762: INFO: tpe: build_posterior_wrapper took 0.000526 seconds]
[2024-01-12 00:30:46,763: INFO: tpe: TPE using 7/7 trials with best loss 4840.000000]
[2024-01-12 00:30:46,790: INFO: tpe: build_posterior_wrapper took 0.000909 seconds]
[2024-01-12 00:30:46,790: INFO: tpe: TPE using 8/8 trials with best loss 4840.000000]
[2024-01-12 00:30:46,834: INFO: tpe: build_posterior_wrapper took 0.000973 seconds]
[2024-01-12 00:30:46,836: INFO: tpe: TPE using 9/9 trials with best loss 4840.000000]
[2024-01-12 00:30:46,869: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:32:23,426: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:32:23,433: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:32:23,445: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:32:23,456: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:32:23,457: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:32:23,558: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:32:23,566: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:32:24,115: INFO: tpe: build_posterior_wrapper took 0.001024 seconds]
[2024-01-12 00:32:24,115: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:32:24,170: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:24,171: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:32:24,224: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:24,224: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:32:24,277: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 00:32:24,277: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:32:24,337: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:24,338: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:32:24,405: INFO: tpe: build_posterior_wrapper took 0.000632 seconds]
[2024-01-12 00:32:24,406: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:32:24,476: INFO: tpe: build_posterior_wrapper took 0.000500 seconds]
[2024-01-12 00:32:24,476: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:32:24,536: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:24,537: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:32:24,593: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:24,593: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:32:24,646: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:24,647: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 00:32:33,537: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 00:32:33,545: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:32:33,558: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:32:33,568: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 00:32:33,569: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 00:32:33,668: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 00:32:33,677: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 00:32:34,240: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:34,241: INFO: tpe: TPE using 0 trials]
[2024-01-12 00:32:34,297: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:34,298: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 00:32:34,354: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:34,355: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 00:32:34,415: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:34,415: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 00:32:34,475: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:34,475: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 00:32:34,529: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:34,530: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 00:32:34,585: INFO: tpe: build_posterior_wrapper took 0.000982 seconds]
[2024-01-12 00:32:34,585: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 00:32:34,642: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:34,643: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 00:32:34,698: INFO: tpe: build_posterior_wrapper took 0.000982 seconds]
[2024-01-12 00:32:34,698: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 00:32:34,753: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 00:32:34,754: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 07:53:47,791: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 07:53:47,804: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 07:53:47,820: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 07:53:47,830: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 07:53:47,831: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 07:53:47,969: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 07:53:47,976: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 07:53:48,538: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:53:48,539: INFO: tpe: TPE using 0 trials]
[2024-01-12 07:53:48,599: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:53:48,599: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 07:53:48,660: INFO: tpe: build_posterior_wrapper took 0.000975 seconds]
[2024-01-12 07:53:48,661: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 07:53:48,722: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:53:48,722: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 07:53:48,785: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:53:48,786: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 07:53:48,846: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:53:48,847: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 07:53:48,904: INFO: tpe: build_posterior_wrapper took 0.000981 seconds]
[2024-01-12 07:53:48,904: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 07:53:48,967: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:53:48,968: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 07:53:49,031: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:53:49,031: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 07:53:49,094: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:53:49,095: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 07:56:33,934: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 07:56:33,943: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 07:56:33,955: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 07:56:33,968: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 07:56:33,968: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 07:56:34,086: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 07:56:34,095: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 07:56:34,640: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:34,641: INFO: tpe: TPE using 0 trials]
[2024-01-12 07:56:34,706: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 07:56:34,706: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 07:56:34,770: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:34,770: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 07:56:34,826: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:34,826: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 07:56:34,891: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:34,891: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 07:56:34,953: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 07:56:34,953: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 07:56:35,012: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,014: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 07:56:35,074: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,075: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 07:56:35,140: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,140: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 07:56:35,202: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 07:56:35,202: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 07:56:35,276: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 07:56:35,525: INFO: tpe: build_posterior_wrapper took 0.001020 seconds]
[2024-01-12 07:56:35,525: INFO: tpe: TPE using 0 trials]
[2024-01-12 07:56:35,555: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,557: INFO: tpe: TPE using 1/1 trials with best loss 151450.000000]
[2024-01-12 07:56:35,606: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,607: INFO: tpe: TPE using 2/2 trials with best loss 151450.000000]
[2024-01-12 07:56:35,621: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,622: INFO: tpe: TPE using 3/3 trials with best loss 64750.000000]
[2024-01-12 07:56:35,654: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,655: INFO: tpe: TPE using 4/4 trials with best loss 64750.000000]
[2024-01-12 07:56:35,672: INFO: tpe: build_posterior_wrapper took 0.000976 seconds]
[2024-01-12 07:56:35,673: INFO: tpe: TPE using 5/5 trials with best loss 15060.000000]
[2024-01-12 07:56:35,689: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,690: INFO: tpe: TPE using 6/6 trials with best loss 15060.000000]
[2024-01-12 07:56:35,719: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 07:56:35,720: INFO: tpe: TPE using 7/7 trials with best loss 15060.000000]
[2024-01-12 07:56:35,772: INFO: tpe: build_posterior_wrapper took 0.001034 seconds]
[2024-01-12 07:56:35,773: INFO: tpe: TPE using 8/8 trials with best loss 15060.000000]
[2024-01-12 07:56:35,795: INFO: tpe: build_posterior_wrapper took 0.000920 seconds]
[2024-01-12 07:56:35,796: INFO: tpe: TPE using 9/9 trials with best loss 15060.000000]
[2024-01-12 07:56:35,839: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:11:48,902: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 08:11:48,909: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:11:48,922: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:11:48,931: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:11:48,932: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 08:11:49,034: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 08:11:49,042: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:11:49,586: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 08:11:49,586: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:11:49,642: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:49,643: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 08:11:49,707: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:49,708: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 08:11:49,766: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:49,767: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 08:11:49,828: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:49,828: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 08:11:49,890: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:49,890: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 08:11:49,955: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:49,955: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 08:11:50,016: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:50,017: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 08:11:50,082: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 08:11:50,083: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 08:11:50,157: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:50,158: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 08:11:50,229: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:11:50,513: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:50,514: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:11:50,599: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:50,600: INFO: tpe: TPE using 1/1 trials with best loss 165430.000000]
[2024-01-12 08:11:50,621: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 08:11:50,622: INFO: tpe: TPE using 2/2 trials with best loss 154570.000000]
[2024-01-12 08:11:50,644: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 08:11:50,644: INFO: tpe: TPE using 3/3 trials with best loss 100190.000000]
[2024-01-12 08:11:50,679: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 08:11:50,679: INFO: tpe: TPE using 4/4 trials with best loss 58540.000000]
[2024-01-12 08:11:50,701: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 08:11:50,701: INFO: tpe: TPE using 5/5 trials with best loss 58540.000000]
[2024-01-12 08:11:50,762: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:50,763: INFO: tpe: TPE using 6/6 trials with best loss 58540.000000]
[2024-01-12 08:11:50,794: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:11:50,794: INFO: tpe: TPE using 7/7 trials with best loss 55270.000000]
[2024-01-12 08:11:50,867: INFO: tpe: build_posterior_wrapper took 0.001006 seconds]
[2024-01-12 08:11:50,869: INFO: tpe: TPE using 8/8 trials with best loss 54270.000000]
[2024-01-12 08:11:50,886: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 08:11:50,886: INFO: tpe: TPE using 9/9 trials with best loss 54270.000000]
[2024-01-12 08:11:50,928: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:15:53,795: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 08:15:53,804: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:15:53,813: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:15:53,825: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:15:53,826: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 08:15:53,929: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 08:15:53,936: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:15:54,479: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:54,480: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:15:54,545: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:54,546: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 08:15:54,608: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:54,609: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 08:15:54,666: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:54,667: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 08:15:54,733: INFO: tpe: build_posterior_wrapper took 0.000980 seconds]
[2024-01-12 08:15:54,733: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 08:15:54,797: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:54,797: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 08:15:54,855: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 08:15:54,856: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 08:15:54,918: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:54,919: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 08:15:54,980: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:54,980: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 08:15:55,044: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:55,044: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 08:15:55,116: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:15:55,372: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 08:15:55,372: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:15:55,387: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:55,388: INFO: tpe: TPE using 1/1 trials with best loss 270610.000000]
[2024-01-12 08:15:55,413: INFO: tpe: build_posterior_wrapper took 0.001087 seconds]
[2024-01-12 08:15:55,414: INFO: tpe: TPE using 2/2 trials with best loss 136270.000000]
[2024-01-12 08:15:55,430: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:55,431: INFO: tpe: TPE using 3/3 trials with best loss 136270.000000]
[2024-01-12 08:15:55,460: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:15:55,461: INFO: tpe: TPE using 4/4 trials with best loss 95470.000000]
[2024-01-12 08:15:55,481: INFO: tpe: build_posterior_wrapper took 0.000960 seconds]
[2024-01-12 08:15:55,482: INFO: tpe: TPE using 5/5 trials with best loss 46350.000000]
[2024-01-12 08:15:55,498: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 08:15:55,499: INFO: tpe: TPE using 6/6 trials with best loss 46350.000000]
[2024-01-12 08:15:55,519: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 08:15:55,520: INFO: tpe: TPE using 7/7 trials with best loss 46350.000000]
[2024-01-12 08:15:55,551: INFO: tpe: build_posterior_wrapper took 0.001064 seconds]
[2024-01-12 08:15:55,552: INFO: tpe: TPE using 8/8 trials with best loss 46350.000000]
[2024-01-12 08:15:55,571: INFO: tpe: build_posterior_wrapper took 0.000905 seconds]
[2024-01-12 08:15:55,571: INFO: tpe: TPE using 9/9 trials with best loss 5790.000000]
[2024-01-12 08:15:55,660: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:16:21,856: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 08:16:21,863: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:16:21,873: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:16:21,884: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:16:21,884: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 08:16:21,981: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 08:16:21,989: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:16:22,543: INFO: tpe: build_posterior_wrapper took 0.001029 seconds]
[2024-01-12 08:16:22,543: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:16:22,603: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:22,604: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 08:16:22,670: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 08:16:22,670: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 08:16:22,732: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 08:16:22,733: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 08:16:22,797: INFO: tpe: build_posterior_wrapper took 0.000977 seconds]
[2024-01-12 08:16:22,798: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 08:16:22,858: INFO: tpe: build_posterior_wrapper took 0.001016 seconds]
[2024-01-12 08:16:22,858: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 08:16:22,925: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:22,926: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 08:16:22,992: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 08:16:22,992: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 08:16:23,061: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 08:16:23,061: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 08:16:23,124: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 08:16:23,124: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 08:16:23,200: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:16:23,553: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 08:16:23,553: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:16:23,591: INFO: tpe: build_posterior_wrapper took 0.001039 seconds]
[2024-01-12 08:16:23,592: INFO: tpe: TPE using 1/1 trials with best loss 401510.000000]
[2024-01-12 08:16:23,611: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 08:16:23,612: INFO: tpe: TPE using 2/2 trials with best loss 149660.000000]
[2024-01-12 08:16:23,638: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:23,639: INFO: tpe: TPE using 3/3 trials with best loss 149660.000000]
[2024-01-12 08:16:23,677: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:23,678: INFO: tpe: TPE using 4/4 trials with best loss 149660.000000]
[2024-01-12 08:16:23,706: INFO: tpe: build_posterior_wrapper took 0.001019 seconds]
[2024-01-12 08:16:23,706: INFO: tpe: TPE using 5/5 trials with best loss 149660.000000]
[2024-01-12 08:16:23,771: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:23,773: INFO: tpe: TPE using 6/6 trials with best loss 149660.000000]
[2024-01-12 08:16:23,796: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:23,797: INFO: tpe: TPE using 7/7 trials with best loss 141390.000000]
[2024-01-12 08:16:23,832: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 08:16:23,832: INFO: tpe: TPE using 8/8 trials with best loss 141390.000000]
[2024-01-12 08:16:23,890: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:23,891: INFO: tpe: TPE using 9/9 trials with best loss 141390.000000]
[2024-01-12 08:16:23,947: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:16:50,555: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 08:16:50,563: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:16:50,572: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:16:50,583: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:16:50,584: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 08:16:50,682: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 08:16:50,690: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:16:51,231: INFO: tpe: build_posterior_wrapper took 0.000986 seconds]
[2024-01-12 08:16:51,231: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:16:51,295: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:51,296: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 08:16:51,358: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:51,359: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 08:16:51,419: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:51,421: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 08:16:51,486: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:51,488: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 08:16:51,549: INFO: tpe: build_posterior_wrapper took 0.001044 seconds]
[2024-01-12 08:16:51,549: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 08:16:51,607: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:51,607: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 08:16:51,663: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:51,663: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 08:16:51,720: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 08:16:51,721: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 08:16:51,775: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:51,776: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 08:16:51,845: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:16:52,214: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 08:16:52,214: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:16:52,239: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:52,240: INFO: tpe: TPE using 1/1 trials with best loss 128800.000000]
[2024-01-12 08:16:52,291: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:52,292: INFO: tpe: TPE using 2/2 trials with best loss 54170.000000]
[2024-01-12 08:16:52,308: INFO: tpe: build_posterior_wrapper took 0.001039 seconds]
[2024-01-12 08:16:52,308: INFO: tpe: TPE using 3/3 trials with best loss 54170.000000]
[2024-01-12 08:16:52,330: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 08:16:52,330: INFO: tpe: TPE using 4/4 trials with best loss 54170.000000]
[2024-01-12 08:16:52,347: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:52,348: INFO: tpe: TPE using 5/5 trials with best loss 54170.000000]
[2024-01-12 08:16:52,377: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:52,378: INFO: tpe: TPE using 6/6 trials with best loss 54170.000000]
[2024-01-12 08:16:52,395: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:52,396: INFO: tpe: TPE using 7/7 trials with best loss 54170.000000]
[2024-01-12 08:16:52,421: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:16:52,423: INFO: tpe: TPE using 8/8 trials with best loss 54170.000000]
[2024-01-12 08:16:52,456: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 08:16:52,458: INFO: tpe: TPE using 9/9 trials with best loss 54170.000000]
[2024-01-12 08:16:52,506: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:18:39,233: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 08:18:39,241: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:18:39,252: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:18:39,265: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:18:39,265: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 08:18:39,365: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 08:18:39,373: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:18:39,918: INFO: tpe: build_posterior_wrapper took 0.000978 seconds]
[2024-01-12 08:18:39,918: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:18:39,975: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 08:18:39,975: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 08:18:40,030: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 08:18:40,030: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 08:18:40,091: INFO: tpe: build_posterior_wrapper took 0.001567 seconds]
[2024-01-12 08:18:40,092: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 08:18:40,179: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,180: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 08:18:40,238: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,238: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 08:18:40,296: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,297: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 08:18:40,354: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,354: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 08:18:40,413: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 08:18:40,413: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 08:18:40,468: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,469: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 08:18:40,536: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:18:40,852: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,853: INFO: tpe: TPE using 0 trials]
[2024-01-12 08:18:40,869: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,870: INFO: tpe: TPE using 1/1 trials with best loss 183000.000000]
[2024-01-12 08:18:40,888: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 08:18:40,888: INFO: tpe: TPE using 2/2 trials with best loss 147510.000000]
[2024-01-12 08:18:40,914: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,915: INFO: tpe: TPE using 3/3 trials with best loss 147510.000000]
[2024-01-12 08:18:40,934: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:40,935: INFO: tpe: TPE using 4/4 trials with best loss 147510.000000]
[2024-01-12 08:18:40,975: INFO: tpe: build_posterior_wrapper took 0.001856 seconds]
[2024-01-12 08:18:40,977: INFO: tpe: TPE using 5/5 trials with best loss 62750.000000]
[2024-01-12 08:18:41,030: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:41,031: INFO: tpe: TPE using 6/6 trials with best loss 62750.000000]
[2024-01-12 08:18:41,088: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 08:18:41,089: INFO: tpe: TPE using 7/7 trials with best loss 62750.000000]
[2024-01-12 08:18:41,127: INFO: tpe: build_posterior_wrapper took 0.000906 seconds]
[2024-01-12 08:18:41,128: INFO: tpe: TPE using 8/8 trials with best loss 62750.000000]
[2024-01-12 08:18:41,148: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 08:18:41,149: INFO: tpe: TPE using 9/9 trials with best loss 62750.000000]
[2024-01-12 08:18:41,180: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:21:39,455: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 08:21:39,463: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:21:39,472: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:21:40,360: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 08:21:40,368: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 08:21:40,379: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:21:40,390: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 08:21:40,391: INFO: utils: Stage 2 Processing Commencing]
[2024-01-12 08:21:40,404: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-12 08:21:40,404: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-12 08:21:40,430: INFO: utils: Commencing pipeline transformation]
[2024-01-12 11:31:00,666: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:31:00,689: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:31:00,717: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:31:00,745: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:31:00,746: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:31:00,949: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:31:00,969: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:31:03,015: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 11:31:03,016: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:31:03,345: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:03,347: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 11:31:03,634: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:03,634: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 11:31:03,921: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:03,922: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:31:04,229: INFO: tpe: build_posterior_wrapper took 0.001973 seconds]
[2024-01-12 11:31:04,230: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:31:04,580: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:04,581: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:31:04,850: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:04,851: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:31:05,107: INFO: tpe: build_posterior_wrapper took 0.000991 seconds]
[2024-01-12 11:31:05,108: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:31:05,331: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:05,332: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:31:05,569: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:05,571: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:31:53,620: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:31:53,638: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:31:53,654: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:31:53,667: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:31:53,669: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:31:53,823: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:31:53,841: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:31:55,457: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 11:31:55,457: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:31:55,586: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:55,587: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 11:31:55,707: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 11:31:55,707: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:31:55,855: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:55,856: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:31:56,006: INFO: tpe: build_posterior_wrapper took 0.001082 seconds]
[2024-01-12 11:31:56,007: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:31:56,153: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:56,155: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:31:56,286: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:56,287: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:31:56,543: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 11:31:56,544: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:31:56,719: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:56,719: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:31:56,874: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:56,876: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:31:57,038: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:31:57,444: INFO: tpe: build_posterior_wrapper took 0.001997 seconds]
[2024-01-12 11:31:57,445: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:31:57,510: INFO: tpe: build_posterior_wrapper took 0.001017 seconds]
[2024-01-12 11:31:57,511: INFO: tpe: TPE using 1/1 trials with best loss 239570.000000]
[2024-01-12 11:31:57,606: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 11:31:57,607: INFO: tpe: TPE using 2/2 trials with best loss 94130.000000]
[2024-01-12 11:31:57,642: INFO: tpe: build_posterior_wrapper took 0.000990 seconds]
[2024-01-12 11:31:57,643: INFO: tpe: TPE using 3/3 trials with best loss 94130.000000]
[2024-01-12 11:31:57,672: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:31:57,673: INFO: tpe: TPE using 4/4 trials with best loss 94130.000000]
[2024-01-12 11:31:57,715: INFO: tpe: build_posterior_wrapper took 0.000513 seconds]
[2024-01-12 11:31:57,715: INFO: tpe: TPE using 5/5 trials with best loss 94130.000000]
[2024-01-12 11:31:57,745: INFO: tpe: build_posterior_wrapper took 0.001011 seconds]
[2024-01-12 11:31:57,746: INFO: tpe: TPE using 6/6 trials with best loss 94130.000000]
[2024-01-12 11:31:57,791: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 11:31:57,792: INFO: tpe: TPE using 7/7 trials with best loss 94130.000000]
[2024-01-12 11:31:57,870: INFO: tpe: build_posterior_wrapper took 0.001999 seconds]
[2024-01-12 11:31:57,871: INFO: tpe: TPE using 8/8 trials with best loss 27720.000000]
[2024-01-12 11:31:57,920: INFO: tpe: build_posterior_wrapper took 0.001005 seconds]
[2024-01-12 11:31:57,921: INFO: tpe: TPE using 9/9 trials with best loss 27720.000000]
[2024-01-12 11:36:22,951: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:36:22,961: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:36:22,980: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:36:23,000: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:36:23,001: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:36:23,145: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:36:23,158: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:36:24,206: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:36:24,207: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:36:24,346: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:36:24,346: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 11:36:24,452: INFO: tpe: build_posterior_wrapper took 0.000986 seconds]
[2024-01-12 11:36:24,452: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:36:24,589: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:36:24,589: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:36:24,788: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 11:36:24,789: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:36:24,950: INFO: tpe: build_posterior_wrapper took 0.000904 seconds]
[2024-01-12 11:36:24,950: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:36:25,075: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 11:36:25,075: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:36:25,210: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:36:25,211: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:36:25,342: INFO: tpe: build_posterior_wrapper took 0.000926 seconds]
[2024-01-12 11:36:25,347: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:36:25,481: INFO: tpe: build_posterior_wrapper took 0.000990 seconds]
[2024-01-12 11:36:25,481: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:36:25,597: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:36:26,119: INFO: tpe: build_posterior_wrapper took 0.000987 seconds]
[2024-01-12 11:36:26,120: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:36:26,185: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:36:26,186: INFO: tpe: TPE using 1/1 trials with best loss 444580.000000]
[2024-01-12 11:36:26,207: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:36:26,208: INFO: tpe: TPE using 2/2 trials with best loss 188310.000000]
[2024-01-12 11:36:26,249: INFO: tpe: build_posterior_wrapper took 0.000520 seconds]
[2024-01-12 11:36:26,250: INFO: tpe: TPE using 3/3 trials with best loss 82940.000000]
[2024-01-12 11:36:26,310: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:36:26,311: INFO: tpe: TPE using 4/4 trials with best loss 44150.000000]
[2024-01-12 11:36:26,372: INFO: tpe: build_posterior_wrapper took 0.001074 seconds]
[2024-01-12 11:36:26,373: INFO: tpe: TPE using 5/5 trials with best loss 44150.000000]
[2024-01-12 11:36:26,467: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:36:26,468: INFO: tpe: TPE using 6/6 trials with best loss 44150.000000]
[2024-01-12 11:36:26,500: INFO: tpe: build_posterior_wrapper took 0.000901 seconds]
[2024-01-12 11:36:26,501: INFO: tpe: TPE using 7/7 trials with best loss 44150.000000]
[2024-01-12 11:36:26,529: INFO: tpe: build_posterior_wrapper took 0.000916 seconds]
[2024-01-12 11:36:26,530: INFO: tpe: TPE using 8/8 trials with best loss 44150.000000]
[2024-01-12 11:36:26,595: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:36:26,597: INFO: tpe: TPE using 9/9 trials with best loss 44150.000000]
[2024-01-12 11:36:59,761: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:36:59,771: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:36:59,786: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:36:59,802: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:36:59,803: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:36:59,946: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:36:59,956: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:37:00,970: INFO: tpe: build_posterior_wrapper took 0.001006 seconds]
[2024-01-12 11:37:00,970: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:37:01,048: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:37:01,049: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 11:37:01,128: INFO: tpe: build_posterior_wrapper took 0.000984 seconds]
[2024-01-12 11:37:01,128: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:37:01,225: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:37:01,226: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:37:01,343: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:37:01,344: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:37:01,484: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:37:01,485: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:37:01,689: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:37:01,690: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:37:01,978: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:37:01,979: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:37:02,148: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:37:02,151: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:37:02,410: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:37:02,411: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:37:02,701: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:37:03,227: INFO: tpe: build_posterior_wrapper took 0.000946 seconds]
[2024-01-12 11:37:03,227: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:37:03,253: INFO: tpe: build_posterior_wrapper took 0.001030 seconds]
[2024-01-12 11:37:03,255: INFO: tpe: TPE using 1/1 trials with best loss 172680.000000]
[2024-01-12 11:37:03,342: INFO: tpe: build_posterior_wrapper took 0.001016 seconds]
[2024-01-12 11:37:03,343: INFO: tpe: TPE using 2/2 trials with best loss 172680.000000]
[2024-01-12 11:37:03,372: INFO: tpe: build_posterior_wrapper took 0.001073 seconds]
[2024-01-12 11:37:03,374: INFO: tpe: TPE using 3/3 trials with best loss 172680.000000]
[2024-01-12 11:37:03,416: INFO: tpe: build_posterior_wrapper took 0.000989 seconds]
[2024-01-12 11:37:03,417: INFO: tpe: TPE using 4/4 trials with best loss 92160.000000]
[2024-01-12 11:37:03,450: INFO: tpe: build_posterior_wrapper took 0.002005 seconds]
[2024-01-12 11:37:03,451: INFO: tpe: TPE using 5/5 trials with best loss 92160.000000]
[2024-01-12 11:37:03,502: INFO: tpe: build_posterior_wrapper took 0.001187 seconds]
[2024-01-12 11:37:03,503: INFO: tpe: TPE using 6/6 trials with best loss 92160.000000]
[2024-01-12 11:37:03,528: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 11:37:03,528: INFO: tpe: TPE using 7/7 trials with best loss 92160.000000]
[2024-01-12 11:37:03,565: INFO: tpe: build_posterior_wrapper took 0.001018 seconds]
[2024-01-12 11:37:03,567: INFO: tpe: TPE using 8/8 trials with best loss 84080.000000]
[2024-01-12 11:37:03,608: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 11:37:03,609: INFO: tpe: TPE using 9/9 trials with best loss 84080.000000]
[2024-01-12 11:40:54,267: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:40:54,280: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:40:54,301: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:40:54,319: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:40:54,321: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:40:54,490: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:40:54,500: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:40:55,410: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:40:55,410: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:40:55,613: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:40:55,614: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 11:40:56,014: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 11:40:56,015: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:40:56,179: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 11:40:56,180: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:40:56,273: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:40:56,274: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:40:56,361: INFO: tpe: build_posterior_wrapper took 0.000984 seconds]
[2024-01-12 11:40:56,362: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:40:56,470: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:40:56,471: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:40:56,584: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 11:40:56,584: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:40:56,932: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:40:56,934: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:40:57,287: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:40:57,289: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:40:57,697: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:40:58,135: INFO: tpe: build_posterior_wrapper took 0.000954 seconds]
[2024-01-12 11:40:58,137: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:40:58,176: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:40:58,178: INFO: tpe: TPE using 1/1 trials with best loss 172690.000000]
[2024-01-12 11:40:58,210: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 11:40:58,211: INFO: tpe: TPE using 2/2 trials with best loss 124990.000000]
[2024-01-12 11:40:58,245: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 11:40:58,247: INFO: tpe: TPE using 3/3 trials with best loss 124990.000000]
[2024-01-12 11:40:58,278: INFO: tpe: build_posterior_wrapper took 0.001117 seconds]
[2024-01-12 11:40:58,279: INFO: tpe: TPE using 4/4 trials with best loss 124990.000000]
[2024-01-12 11:40:58,361: INFO: tpe: build_posterior_wrapper took 0.000953 seconds]
[2024-01-12 11:40:58,362: INFO: tpe: TPE using 5/5 trials with best loss 4230.000000]
[2024-01-12 11:40:58,396: INFO: tpe: build_posterior_wrapper took 0.001993 seconds]
[2024-01-12 11:40:58,398: INFO: tpe: TPE using 6/6 trials with best loss 4230.000000]
[2024-01-12 11:40:58,438: INFO: tpe: build_posterior_wrapper took 0.001904 seconds]
[2024-01-12 11:40:58,439: INFO: tpe: TPE using 7/7 trials with best loss 4230.000000]
[2024-01-12 11:40:58,473: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 11:40:58,475: INFO: tpe: TPE using 8/8 trials with best loss 4230.000000]
[2024-01-12 11:40:58,569: INFO: tpe: build_posterior_wrapper took 0.000896 seconds]
[2024-01-12 11:40:58,570: INFO: tpe: TPE using 9/9 trials with best loss 4230.000000]
[2024-01-12 11:42:18,581: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:42:18,591: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:42:18,609: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:42:18,620: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:42:18,621: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:42:18,752: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:42:18,763: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:42:20,805: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:20,805: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:42:20,988: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:20,988: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 11:42:21,303: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:21,304: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:42:21,697: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:21,699: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:42:22,089: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:22,091: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:42:22,480: INFO: tpe: build_posterior_wrapper took 0.000955 seconds]
[2024-01-12 11:42:22,482: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:42:22,888: INFO: tpe: build_posterior_wrapper took 0.001139 seconds]
[2024-01-12 11:42:22,889: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:42:23,108: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 11:42:23,108: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:42:23,265: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:23,266: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:42:23,366: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:23,366: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:42:23,485: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:42:23,829: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:23,831: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:42:23,864: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:23,866: INFO: tpe: TPE using 1/1 trials with best loss 164290.000000]
[2024-01-12 11:42:23,897: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:23,899: INFO: tpe: TPE using 2/2 trials with best loss 131750.000000]
[2024-01-12 11:42:23,936: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 11:42:23,938: INFO: tpe: TPE using 3/3 trials with best loss 131750.000000]
[2024-01-12 11:42:23,964: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:23,965: INFO: tpe: TPE using 4/4 trials with best loss 131750.000000]
[2024-01-12 11:42:24,012: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 11:42:24,013: INFO: tpe: TPE using 5/5 trials with best loss 131750.000000]
[2024-01-12 11:42:24,057: INFO: tpe: build_posterior_wrapper took 0.001263 seconds]
[2024-01-12 11:42:24,059: INFO: tpe: TPE using 6/6 trials with best loss 131750.000000]
[2024-01-12 11:42:24,099: INFO: tpe: build_posterior_wrapper took 0.001083 seconds]
[2024-01-12 11:42:24,100: INFO: tpe: TPE using 7/7 trials with best loss 131750.000000]
[2024-01-12 11:42:24,149: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:24,151: INFO: tpe: TPE using 8/8 trials with best loss 131750.000000]
[2024-01-12 11:42:24,181: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:42:24,183: INFO: tpe: TPE using 9/9 trials with best loss 117360.000000]
[2024-01-12 11:43:59,681: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:43:59,692: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:43:59,703: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:43:59,717: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:43:59,719: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:43:59,848: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:43:59,859: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:44:00,842: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:00,842: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:44:00,946: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:44:00,946: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 11:44:01,030: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:44:01,030: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:44:01,116: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:01,117: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:44:01,207: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:01,208: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:44:01,293: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:44:01,294: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:44:01,378: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 11:44:01,378: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:44:01,467: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:01,468: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:44:01,565: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:01,566: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:44:01,650: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 11:44:01,651: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:44:01,859: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:44:02,279: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 11:44:02,280: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:44:02,306: INFO: tpe: build_posterior_wrapper took 0.001997 seconds]
[2024-01-12 11:44:02,307: INFO: tpe: TPE using 1/1 trials with best loss 186260.000000]
[2024-01-12 11:44:02,347: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:02,349: INFO: tpe: TPE using 2/2 trials with best loss 186260.000000]
[2024-01-12 11:44:02,374: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:02,376: INFO: tpe: TPE using 3/3 trials with best loss 186260.000000]
[2024-01-12 11:44:02,410: INFO: tpe: build_posterior_wrapper took 0.001060 seconds]
[2024-01-12 11:44:02,412: INFO: tpe: TPE using 4/4 trials with best loss 114810.000000]
[2024-01-12 11:44:02,462: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 11:44:02,463: INFO: tpe: TPE using 5/5 trials with best loss 114810.000000]
[2024-01-12 11:44:02,510: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 11:44:02,511: INFO: tpe: TPE using 6/6 trials with best loss 114810.000000]
[2024-01-12 11:44:02,536: INFO: tpe: build_posterior_wrapper took 0.002010 seconds]
[2024-01-12 11:44:02,538: INFO: tpe: TPE using 7/7 trials with best loss 114810.000000]
[2024-01-12 11:44:02,562: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:02,564: INFO: tpe: TPE using 8/8 trials with best loss 94940.000000]
[2024-01-12 11:44:02,610: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:02,611: INFO: tpe: TPE using 9/9 trials with best loss 44340.000000]
[2024-01-12 11:44:47,409: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:44:47,417: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:44:47,434: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:44:47,445: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:44:47,446: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:44:47,569: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:44:47,579: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:44:48,989: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:48,990: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:44:49,182: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:49,183: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 11:44:49,275: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:49,276: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 11:44:49,358: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:44:49,358: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:44:49,441: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:49,442: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:44:49,533: INFO: tpe: build_posterior_wrapper took 0.000986 seconds]
[2024-01-12 11:44:49,533: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:44:49,635: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:49,636: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:44:49,766: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:49,767: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:44:49,866: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 11:44:49,866: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:44:49,949: INFO: tpe: build_posterior_wrapper took 0.001017 seconds]
[2024-01-12 11:44:49,949: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:44:50,126: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:44:50,472: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:50,474: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:44:50,509: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 11:44:50,511: INFO: tpe: TPE using 1/1 trials with best loss 3930.000000]
[2024-01-12 11:44:50,532: INFO: tpe: build_posterior_wrapper took 0.001027 seconds]
[2024-01-12 11:44:50,533: INFO: tpe: TPE using 2/2 trials with best loss 3930.000000]
[2024-01-12 11:44:50,554: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:50,556: INFO: tpe: TPE using 3/3 trials with best loss 3930.000000]
[2024-01-12 11:44:50,586: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:44:50,587: INFO: tpe: TPE using 4/4 trials with best loss 3930.000000]
[2024-01-12 11:44:50,634: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:44:50,635: INFO: tpe: TPE using 5/5 trials with best loss 3930.000000]
[2024-01-12 11:44:50,661: INFO: tpe: build_posterior_wrapper took 0.001017 seconds]
[2024-01-12 11:44:50,663: INFO: tpe: TPE using 6/6 trials with best loss 3930.000000]
[2024-01-12 11:44:50,749: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:44:50,750: INFO: tpe: TPE using 7/7 trials with best loss 3930.000000]
[2024-01-12 11:44:50,774: INFO: tpe: build_posterior_wrapper took 0.000949 seconds]
[2024-01-12 11:44:50,776: INFO: tpe: TPE using 8/8 trials with best loss 3930.000000]
[2024-01-12 11:44:50,799: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:44:50,799: INFO: tpe: TPE using 9/9 trials with best loss 3930.000000]
[2024-01-12 11:52:38,175: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:52:38,189: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:52:38,204: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:52:38,215: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:52:38,217: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:52:38,346: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:52:38,364: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:52:38,972: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:38,973: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:52:39,039: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:39,040: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 11:52:39,095: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:52:39,095: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:52:39,151: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:39,152: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:52:39,209: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:39,210: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:52:39,270: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:52:39,270: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:52:39,328: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:39,328: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:52:39,386: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:39,387: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:52:39,443: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:39,443: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:52:39,499: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:39,500: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:52:39,565: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:52:39,907: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:39,908: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:52:39,954: INFO: tpe: build_posterior_wrapper took 0.000948 seconds]
[2024-01-12 11:52:39,956: INFO: tpe: TPE using 1/1 trials with best loss 290740.000000]
[2024-01-12 11:52:39,976: INFO: tpe: build_posterior_wrapper took 0.001087 seconds]
[2024-01-12 11:52:39,977: INFO: tpe: TPE using 2/2 trials with best loss 290740.000000]
[2024-01-12 11:52:40,009: INFO: tpe: build_posterior_wrapper took 0.001027 seconds]
[2024-01-12 11:52:40,010: INFO: tpe: TPE using 3/3 trials with best loss 64760.000000]
[2024-01-12 11:52:40,061: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 11:52:40,062: INFO: tpe: TPE using 4/4 trials with best loss 64760.000000]
[2024-01-12 11:52:40,091: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:40,093: INFO: tpe: TPE using 5/5 trials with best loss 64760.000000]
[2024-01-12 11:52:40,113: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:40,114: INFO: tpe: TPE using 6/6 trials with best loss 64760.000000]
[2024-01-12 11:52:40,140: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:52:40,141: INFO: tpe: TPE using 7/7 trials with best loss 64760.000000]
[2024-01-12 11:52:40,179: INFO: tpe: build_posterior_wrapper took 0.001077 seconds]
[2024-01-12 11:52:40,180: INFO: tpe: TPE using 8/8 trials with best loss 64760.000000]
[2024-01-12 11:52:40,214: INFO: tpe: build_posterior_wrapper took 0.000990 seconds]
[2024-01-12 11:52:40,216: INFO: tpe: TPE using 9/9 trials with best loss 64760.000000]
[2024-01-12 11:53:13,875: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:53:13,884: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:53:13,901: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:53:13,914: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:53:13,918: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:53:14,066: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:53:14,075: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:53:14,631: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:53:14,631: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:53:14,694: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:14,694: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 11:53:14,749: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:14,750: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:53:14,808: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:14,808: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:53:14,867: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 11:53:14,868: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:53:14,925: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:14,926: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:53:14,981: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:14,982: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:53:15,044: INFO: tpe: build_posterior_wrapper took 0.001019 seconds]
[2024-01-12 11:53:15,044: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:53:15,102: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:15,104: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:53:15,160: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 11:53:15,160: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:53:15,229: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:53:15,625: INFO: tpe: build_posterior_wrapper took 0.000754 seconds]
[2024-01-12 11:53:15,626: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:53:15,701: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:15,702: INFO: tpe: TPE using 1/1 trials with best loss 455750.000000]
[2024-01-12 11:53:15,725: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 11:53:15,726: INFO: tpe: TPE using 2/2 trials with best loss 217420.000000]
[2024-01-12 11:53:15,759: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:53:15,760: INFO: tpe: TPE using 3/3 trials with best loss 134640.000000]
[2024-01-12 11:53:15,794: INFO: tpe: build_posterior_wrapper took 0.000991 seconds]
[2024-01-12 11:53:15,795: INFO: tpe: TPE using 4/4 trials with best loss 134640.000000]
[2024-01-12 11:53:15,815: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:15,817: INFO: tpe: TPE using 5/5 trials with best loss 116220.000000]
[2024-01-12 11:53:15,907: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 11:53:15,908: INFO: tpe: TPE using 6/6 trials with best loss 116220.000000]
[2024-01-12 11:53:15,930: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:15,931: INFO: tpe: TPE using 7/7 trials with best loss 47800.000000]
[2024-01-12 11:53:15,955: INFO: tpe: build_posterior_wrapper took 0.001027 seconds]
[2024-01-12 11:53:15,957: INFO: tpe: TPE using 8/8 trials with best loss 47800.000000]
[2024-01-12 11:53:15,993: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:53:15,993: INFO: tpe: TPE using 9/9 trials with best loss 47800.000000]
[2024-01-12 11:53:37,371: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:53:37,381: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:53:37,390: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:53:37,403: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:53:37,404: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:53:37,520: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:53:37,530: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:53:38,130: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 11:53:38,130: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:53:38,187: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:38,187: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 11:53:38,243: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:38,243: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:53:38,309: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:38,309: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:53:38,382: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:38,383: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:53:38,452: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 11:53:38,452: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:53:38,521: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:38,521: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:53:38,585: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:38,586: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:53:38,650: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:53:38,650: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:53:38,705: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:38,706: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:53:38,774: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:53:39,078: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:39,079: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:53:39,108: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:39,109: INFO: tpe: TPE using 1/1 trials with best loss 410810.000000]
[2024-01-12 11:53:39,130: INFO: tpe: build_posterior_wrapper took 0.001086 seconds]
[2024-01-12 11:53:39,131: INFO: tpe: TPE using 2/2 trials with best loss 205540.000000]
[2024-01-12 11:53:39,206: INFO: tpe: build_posterior_wrapper took 0.000961 seconds]
[2024-01-12 11:53:39,207: INFO: tpe: TPE using 3/3 trials with best loss 205540.000000]
[2024-01-12 11:53:39,227: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 11:53:39,227: INFO: tpe: TPE using 4/4 trials with best loss 194110.000000]
[2024-01-12 11:53:39,254: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:39,255: INFO: tpe: TPE using 5/5 trials with best loss 194110.000000]
[2024-01-12 11:53:39,316: INFO: tpe: build_posterior_wrapper took 0.001990 seconds]
[2024-01-12 11:53:39,318: INFO: tpe: TPE using 6/6 trials with best loss 165890.000000]
[2024-01-12 11:53:39,371: INFO: tpe: build_posterior_wrapper took 0.000992 seconds]
[2024-01-12 11:53:39,372: INFO: tpe: TPE using 7/7 trials with best loss 165890.000000]
[2024-01-12 11:53:39,392: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:53:39,393: INFO: tpe: TPE using 8/8 trials with best loss 154740.000000]
[2024-01-12 11:53:39,417: INFO: tpe: build_posterior_wrapper took 0.001042 seconds]
[2024-01-12 11:53:39,419: INFO: tpe: TPE using 9/9 trials with best loss 150830.000000]
[2024-01-12 11:57:48,544: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 11:57:48,555: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:57:48,567: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:57:48,576: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 11:57:48,578: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 11:57:48,747: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 11:57:48,757: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:57:49,322: INFO: tpe: build_posterior_wrapper took 0.000973 seconds]
[2024-01-12 11:57:49,322: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:57:49,383: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 11:57:49,383: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 11:57:49,439: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:57:49,440: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 11:57:49,494: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 11:57:49,496: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 11:57:49,554: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:57:49,555: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 11:57:49,610: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:57:49,610: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 11:57:49,669: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:57:49,670: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 11:57:49,725: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:57:49,726: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 11:57:49,787: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:57:49,787: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 11:57:49,848: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:57:49,848: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 11:57:49,915: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 11:57:50,217: INFO: tpe: build_posterior_wrapper took 0.001061 seconds]
[2024-01-12 11:57:50,219: INFO: tpe: TPE using 0 trials]
[2024-01-12 11:57:50,272: INFO: tpe: build_posterior_wrapper took 0.001033 seconds]
[2024-01-12 11:57:50,273: INFO: tpe: TPE using 1/1 trials with best loss 411180.000000]
[2024-01-12 11:57:50,301: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 11:57:50,302: INFO: tpe: TPE using 2/2 trials with best loss 72410.000000]
[2024-01-12 11:57:50,322: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 11:57:50,323: INFO: tpe: TPE using 3/3 trials with best loss 72410.000000]
[2024-01-12 11:57:50,355: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 11:57:50,355: INFO: tpe: TPE using 4/4 trials with best loss 72410.000000]
[2024-01-12 11:57:50,386: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 11:57:50,387: INFO: tpe: TPE using 5/5 trials with best loss 72410.000000]
[2024-01-12 11:57:50,407: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:57:50,409: INFO: tpe: TPE using 6/6 trials with best loss 72410.000000]
[2024-01-12 11:57:50,438: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:57:50,440: INFO: tpe: TPE using 7/7 trials with best loss 72410.000000]
[2024-01-12 11:57:50,493: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 11:57:50,494: INFO: tpe: TPE using 8/8 trials with best loss 72410.000000]
[2024-01-12 11:57:50,510: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 11:57:50,511: INFO: tpe: TPE using 9/9 trials with best loss 72410.000000]
[2024-01-12 12:02:13,082: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:02:13,092: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:02:13,107: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:02:13,116: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:02:13,117: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:02:13,246: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:02:13,255: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:02:13,844: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:13,844: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:02:13,904: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:13,905: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 12:02:13,963: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 12:02:13,963: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 12:02:14,021: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 12:02:14,021: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 12:02:14,077: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,078: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 12:02:14,138: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,138: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 12:02:14,194: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,195: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 12:02:14,258: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,259: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 12:02:14,319: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,319: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:02:14,374: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,374: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:02:14,442: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:02:14,739: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,740: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:02:14,773: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,774: INFO: tpe: TPE using 1/1 trials with best loss 61950.000000]
[2024-01-12 12:02:14,838: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,839: INFO: tpe: TPE using 2/2 trials with best loss 61950.000000]
[2024-01-12 12:02:14,857: INFO: tpe: build_posterior_wrapper took 0.000976 seconds]
[2024-01-12 12:02:14,858: INFO: tpe: TPE using 3/3 trials with best loss 61950.000000]
[2024-01-12 12:02:14,932: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:14,933: INFO: tpe: TPE using 4/4 trials with best loss 61950.000000]
[2024-01-12 12:02:14,958: INFO: tpe: build_posterior_wrapper took 0.001056 seconds]
[2024-01-12 12:02:14,958: INFO: tpe: TPE using 5/5 trials with best loss 61950.000000]
[2024-01-12 12:02:14,991: INFO: tpe: build_posterior_wrapper took 0.001043 seconds]
[2024-01-12 12:02:14,993: INFO: tpe: TPE using 6/6 trials with best loss 61950.000000]
[2024-01-12 12:02:15,019: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:02:15,020: INFO: tpe: TPE using 7/7 trials with best loss 61950.000000]
[2024-01-12 12:02:15,049: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 12:02:15,051: INFO: tpe: TPE using 8/8 trials with best loss 61950.000000]
[2024-01-12 12:02:15,096: INFO: tpe: build_posterior_wrapper took 0.000940 seconds]
[2024-01-12 12:02:15,097: INFO: tpe: TPE using 9/9 trials with best loss 61950.000000]
[2024-01-12 12:04:00,296: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:04:00,305: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:04:00,315: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:04:00,327: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:04:00,330: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:04:00,456: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:04:00,465: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:04:01,052: INFO: tpe: build_posterior_wrapper took 0.001023 seconds]
[2024-01-12 12:04:01,052: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:04:01,108: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,109: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 12:04:01,162: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,163: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 12:04:01,219: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,220: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 12:04:01,278: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,278: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 12:04:01,332: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,333: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 12:04:01,391: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,391: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 12:04:01,447: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,448: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 12:04:01,502: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,503: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:04:01,564: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,565: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:04:01,631: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:04:01,913: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:01,914: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:04:01,940: INFO: tpe: build_posterior_wrapper took 0.001420 seconds]
[2024-01-12 12:04:01,942: INFO: tpe: TPE using 1/1 trials with best loss 165550.000000]
[2024-01-12 12:04:01,972: INFO: tpe: build_posterior_wrapper took 0.000850 seconds]
[2024-01-12 12:04:01,975: INFO: tpe: TPE using 2/2 trials with best loss 165550.000000]
[2024-01-12 12:04:02,033: INFO: tpe: build_posterior_wrapper took 0.000318 seconds]
[2024-01-12 12:04:02,034: INFO: tpe: TPE using 3/3 trials with best loss 165550.000000]
[2024-01-12 12:04:02,062: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:02,063: INFO: tpe: TPE using 4/4 trials with best loss 165550.000000]
[2024-01-12 12:04:02,087: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:02,088: INFO: tpe: TPE using 5/5 trials with best loss 32310.000000]
[2024-01-12 12:04:02,115: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:04:02,116: INFO: tpe: TPE using 6/6 trials with best loss 32310.000000]
[2024-01-12 12:04:02,178: INFO: tpe: build_posterior_wrapper took 0.001029 seconds]
[2024-01-12 12:04:02,179: INFO: tpe: TPE using 7/7 trials with best loss 32310.000000]
[2024-01-12 12:04:02,209: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 12:04:02,210: INFO: tpe: TPE using 8/8 trials with best loss 32310.000000]
[2024-01-12 12:04:02,235: INFO: tpe: build_posterior_wrapper took 0.001045 seconds]
[2024-01-12 12:04:02,236: INFO: tpe: TPE using 9/9 trials with best loss 32310.000000]
[2024-01-12 12:05:03,772: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:05:03,781: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:05:03,794: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:05:03,810: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:05:03,812: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:05:03,929: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:05:03,938: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:05:04,511: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:04,511: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:05:04,568: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:04,568: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 12:05:04,625: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:04,626: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 12:05:04,679: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:04,680: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 12:05:04,744: INFO: tpe: build_posterior_wrapper took 0.000379 seconds]
[2024-01-12 12:05:04,745: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 12:05:04,847: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:04,848: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 12:05:04,910: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:04,911: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 12:05:04,963: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 12:05:04,963: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 12:05:05,021: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:05,022: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:05:05,078: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 12:05:05,078: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:05:05,146: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:05:05,395: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:05,396: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:05:05,427: INFO: tpe: build_posterior_wrapper took 0.001079 seconds]
[2024-01-12 12:05:05,428: INFO: tpe: TPE using 1/1 trials with best loss 379830.000000]
[2024-01-12 12:05:05,448: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:05,449: INFO: tpe: TPE using 2/2 trials with best loss 312920.000000]
[2024-01-12 12:05:05,475: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:05,477: INFO: tpe: TPE using 3/3 trials with best loss 312920.000000]
[2024-01-12 12:05:05,505: INFO: tpe: build_posterior_wrapper took 0.002046 seconds]
[2024-01-12 12:05:05,507: INFO: tpe: TPE using 4/4 trials with best loss 312920.000000]
[2024-01-12 12:05:05,529: INFO: tpe: build_posterior_wrapper took 0.001027 seconds]
[2024-01-12 12:05:05,530: INFO: tpe: TPE using 5/5 trials with best loss 210740.000000]
[2024-01-12 12:05:05,559: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:05:05,560: INFO: tpe: TPE using 6/6 trials with best loss 210740.000000]
[2024-01-12 12:05:05,618: INFO: tpe: build_posterior_wrapper took 0.001036 seconds]
[2024-01-12 12:05:05,620: INFO: tpe: TPE using 7/7 trials with best loss 210740.000000]
[2024-01-12 12:05:05,665: INFO: tpe: build_posterior_wrapper took 0.001020 seconds]
[2024-01-12 12:05:05,667: INFO: tpe: TPE using 8/8 trials with best loss 112780.000000]
[2024-01-12 12:05:05,691: INFO: tpe: build_posterior_wrapper took 0.001043 seconds]
[2024-01-12 12:05:05,692: INFO: tpe: TPE using 9/9 trials with best loss 59150.000000]
[2024-01-12 12:06:08,812: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:06:08,824: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:06:08,839: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:06:08,853: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:06:08,854: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:06:08,975: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:06:08,984: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:06:09,552: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:06:09,552: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:06:09,608: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 12:06:09,608: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 12:06:09,664: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:06:09,664: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 12:06:09,721: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:06:09,721: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 12:06:09,781: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 12:06:09,781: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 12:06:09,835: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:06:09,836: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 12:06:09,889: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:06:09,889: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 12:06:09,949: INFO: tpe: build_posterior_wrapper took 0.001013 seconds]
[2024-01-12 12:06:09,949: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 12:06:10,003: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 12:06:10,003: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:06:10,060: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:06:10,061: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:06:10,129: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:06:10,402: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:06:10,403: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:06:10,425: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 12:06:10,426: INFO: tpe: TPE using 1/1 trials with best loss 157760.000000]
[2024-01-12 12:06:10,499: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:06:10,500: INFO: tpe: TPE using 2/2 trials with best loss 65440.000000]
[2024-01-12 12:06:10,524: INFO: tpe: build_posterior_wrapper took 0.001021 seconds]
[2024-01-12 12:06:10,525: INFO: tpe: TPE using 3/3 trials with best loss 65440.000000]
[2024-01-12 12:06:10,542: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 12:06:10,543: INFO: tpe: TPE using 4/4 trials with best loss 65440.000000]
[2024-01-12 12:06:10,565: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 12:06:10,567: INFO: tpe: TPE using 5/5 trials with best loss 65440.000000]
[2024-01-12 12:06:10,592: INFO: tpe: build_posterior_wrapper took 0.001042 seconds]
[2024-01-12 12:06:10,593: INFO: tpe: TPE using 6/6 trials with best loss 65440.000000]
[2024-01-12 12:06:10,621: INFO: tpe: build_posterior_wrapper took 0.001042 seconds]
[2024-01-12 12:06:10,621: INFO: tpe: TPE using 7/7 trials with best loss 65440.000000]
[2024-01-12 12:06:10,688: INFO: tpe: build_posterior_wrapper took 0.000920 seconds]
[2024-01-12 12:06:10,689: INFO: tpe: TPE using 8/8 trials with best loss 65440.000000]
[2024-01-12 12:06:10,707: INFO: tpe: build_posterior_wrapper took 0.000922 seconds]
[2024-01-12 12:06:10,707: INFO: tpe: TPE using 9/9 trials with best loss 65440.000000]
[2024-01-12 12:06:10,738: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:07:05,866: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:07:05,875: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:07:05,891: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:07:05,902: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:07:05,902: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:07:06,042: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:07:06,050: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:07:06,615: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 12:07:06,615: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:07:06,671: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 12:07:06,671: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 12:07:06,724: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:06,725: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 12:07:06,787: INFO: tpe: build_posterior_wrapper took 0.001020 seconds]
[2024-01-12 12:07:06,787: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 12:07:06,846: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:06,847: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 12:07:06,908: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:06,909: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 12:07:06,968: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:06,969: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 12:07:07,033: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:07,033: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 12:07:07,089: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:07,090: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:07:07,149: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 12:07:07,149: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:07:07,215: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:07:07,534: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:07,534: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:07:07,553: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:07,554: INFO: tpe: TPE using 1/1 trials with best loss 161050.000000]
[2024-01-12 12:07:07,574: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 12:07:07,575: INFO: tpe: TPE using 2/2 trials with best loss 161050.000000]
[2024-01-12 12:07:07,601: INFO: tpe: build_posterior_wrapper took 0.000900 seconds]
[2024-01-12 12:07:07,602: INFO: tpe: TPE using 3/3 trials with best loss 161050.000000]
[2024-01-12 12:07:07,621: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:07,622: INFO: tpe: TPE using 4/4 trials with best loss 161050.000000]
[2024-01-12 12:07:07,643: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 12:07:07,645: INFO: tpe: TPE using 5/5 trials with best loss 36450.000000]
[2024-01-12 12:07:07,671: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:07,672: INFO: tpe: TPE using 6/6 trials with best loss 36450.000000]
[2024-01-12 12:07:07,704: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 12:07:07,705: INFO: tpe: TPE using 7/7 trials with best loss 36450.000000]
[2024-01-12 12:07:07,732: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 12:07:07,735: INFO: tpe: TPE using 8/8 trials with best loss 36450.000000]
[2024-01-12 12:07:07,761: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:07:07,762: INFO: tpe: TPE using 9/9 trials with best loss 36450.000000]
[2024-01-12 12:07:07,810: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:08:42,478: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:08:42,487: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:08:42,496: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:08:42,511: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:08:42,514: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:08:42,620: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:08:42,630: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:08:43,221: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:43,222: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:08:43,279: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:43,279: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 12:08:43,336: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 12:08:43,336: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 12:08:43,393: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:43,395: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 12:08:43,451: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:43,451: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 12:08:43,507: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 12:08:43,507: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 12:08:43,565: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:43,565: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 12:08:43,621: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:43,622: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 12:08:43,681: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:43,681: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:08:43,739: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:43,740: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:08:43,840: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:08:44,137: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:44,138: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:08:44,168: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:44,169: INFO: tpe: TPE using 1/1 trials with best loss 103060.000000]
[2024-01-12 12:08:44,201: INFO: tpe: build_posterior_wrapper took 0.000981 seconds]
[2024-01-12 12:08:44,202: INFO: tpe: TPE using 2/2 trials with best loss 103060.000000]
[2024-01-12 12:08:44,264: INFO: tpe: build_posterior_wrapper took 0.001005 seconds]
[2024-01-12 12:08:44,266: INFO: tpe: TPE using 3/3 trials with best loss 103060.000000]
[2024-01-12 12:08:44,344: INFO: tpe: build_posterior_wrapper took 0.002089 seconds]
[2024-01-12 12:08:44,346: INFO: tpe: TPE using 4/4 trials with best loss 103060.000000]
[2024-01-12 12:08:44,422: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 12:08:44,423: INFO: tpe: TPE using 5/5 trials with best loss 103060.000000]
[2024-01-12 12:08:44,471: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:44,472: INFO: tpe: TPE using 6/6 trials with best loss 103060.000000]
[2024-01-12 12:08:44,540: INFO: tpe: build_posterior_wrapper took 0.000915 seconds]
[2024-01-12 12:08:44,542: INFO: tpe: TPE using 7/7 trials with best loss 103060.000000]
[2024-01-12 12:08:44,564: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:08:44,565: INFO: tpe: TPE using 8/8 trials with best loss 103060.000000]
[2024-01-12 12:08:44,601: INFO: tpe: build_posterior_wrapper took 0.001873 seconds]
[2024-01-12 12:08:44,602: INFO: tpe: TPE using 9/9 trials with best loss 103060.000000]
[2024-01-12 12:08:44,651: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:09:51,763: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:09:51,772: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:09:51,786: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:09:51,796: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:09:51,797: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:09:51,914: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:09:51,925: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:09:52,524: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:52,524: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:09:52,582: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:52,584: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 12:09:52,642: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:52,643: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 12:09:52,699: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 12:09:52,699: INFO: tpe: TPE using 3/3 trials with best loss 443680.000000]
[2024-01-12 12:09:52,758: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 12:09:52,758: INFO: tpe: TPE using 4/4 trials with best loss 443680.000000]
[2024-01-12 12:09:52,813: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:52,814: INFO: tpe: TPE using 5/5 trials with best loss 443680.000000]
[2024-01-12 12:09:52,872: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:52,873: INFO: tpe: TPE using 6/6 trials with best loss 443680.000000]
[2024-01-12 12:09:52,929: INFO: tpe: build_posterior_wrapper took 0.001021 seconds]
[2024-01-12 12:09:52,929: INFO: tpe: TPE using 7/7 trials with best loss 443680.000000]
[2024-01-12 12:09:53,012: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 12:09:53,012: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:09:53,104: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 12:09:53,104: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:09:53,171: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:09:53,478: INFO: tpe: build_posterior_wrapper took 0.000883 seconds]
[2024-01-12 12:09:53,479: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:09:53,514: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 12:09:53,515: INFO: tpe: TPE using 1/1 trials with best loss 119910.000000]
[2024-01-12 12:09:53,542: INFO: tpe: build_posterior_wrapper took 0.000994 seconds]
[2024-01-12 12:09:53,542: INFO: tpe: TPE using 2/2 trials with best loss 119910.000000]
[2024-01-12 12:09:53,565: INFO: tpe: build_posterior_wrapper took 0.000818 seconds]
[2024-01-12 12:09:53,566: INFO: tpe: TPE using 3/3 trials with best loss 119910.000000]
[2024-01-12 12:09:53,593: INFO: tpe: build_posterior_wrapper took 0.001045 seconds]
[2024-01-12 12:09:53,595: INFO: tpe: TPE using 4/4 trials with best loss 116530.000000]
[2024-01-12 12:09:53,625: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:53,626: INFO: tpe: TPE using 5/5 trials with best loss 116530.000000]
[2024-01-12 12:09:53,707: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:53,708: INFO: tpe: TPE using 6/6 trials with best loss 43430.000000]
[2024-01-12 12:09:53,722: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:53,723: INFO: tpe: TPE using 7/7 trials with best loss 43430.000000]
[2024-01-12 12:09:53,744: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:09:53,745: INFO: tpe: TPE using 8/8 trials with best loss 43430.000000]
[2024-01-12 12:09:53,844: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 12:09:53,845: INFO: tpe: TPE using 9/9 trials with best loss 43430.000000]
[2024-01-12 12:09:53,899: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:15:57,401: INFO: tpe: build_posterior_wrapper took 0.001050 seconds]
[2024-01-12 12:15:57,401: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:16:07,869: INFO: tpe: build_posterior_wrapper took 0.002013 seconds]
[2024-01-12 12:16:07,870: INFO: tpe: TPE using 1/1 trials with best loss 89080.000000]
[2024-01-12 12:16:14,039: INFO: tpe: build_posterior_wrapper took 0.001992 seconds]
[2024-01-12 12:16:14,040: INFO: tpe: TPE using 2/2 trials with best loss 48590.000000]
[2024-01-12 12:17:12,041: INFO: tpe: build_posterior_wrapper took 0.000987 seconds]
[2024-01-12 12:17:12,042: INFO: tpe: TPE using 3/3 trials with best loss 48590.000000]
[2024-01-12 12:17:13,586: INFO: tpe: build_posterior_wrapper took 0.000920 seconds]
[2024-01-12 12:17:13,587: INFO: tpe: TPE using 4/4 trials with best loss 44590.000000]
[2024-01-12 12:17:21,657: INFO: tpe: build_posterior_wrapper took 0.000965 seconds]
[2024-01-12 12:17:21,658: INFO: tpe: TPE using 5/5 trials with best loss 44590.000000]
[2024-01-12 12:17:25,510: INFO: tpe: build_posterior_wrapper took 0.066027 seconds]
[2024-01-12 12:17:25,511: INFO: tpe: TPE using 6/6 trials with best loss 44590.000000]
[2024-01-12 12:17:26,881: INFO: tpe: build_posterior_wrapper took 0.000944 seconds]
[2024-01-12 12:17:26,883: INFO: tpe: TPE using 7/7 trials with best loss 44590.000000]
[2024-01-12 12:17:41,848: INFO: tpe: build_posterior_wrapper took 0.002008 seconds]
[2024-01-12 12:17:41,849: INFO: tpe: TPE using 8/8 trials with best loss 44590.000000]
[2024-01-12 12:17:46,651: INFO: tpe: build_posterior_wrapper took 0.001045 seconds]
[2024-01-12 12:17:46,652: INFO: tpe: TPE using 9/9 trials with best loss 44590.000000]
[2024-01-12 12:19:11,313: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:29:25,772: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:29:25,773: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:30:06,602: INFO: tpe: build_posterior_wrapper took 0.000923 seconds]
[2024-01-12 12:30:06,603: INFO: tpe: TPE using 1/1 trials with best loss 107540.000000]
[2024-01-12 12:31:19,930: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 12:31:19,931: INFO: tpe: TPE using 2/2 trials with best loss 103040.000000]
[2024-01-12 12:31:55,240: INFO: tpe: build_posterior_wrapper took 0.001139 seconds]
[2024-01-12 12:31:55,241: INFO: tpe: TPE using 3/3 trials with best loss 103040.000000]
[2024-01-12 12:33:30,567: INFO: tpe: build_posterior_wrapper took 0.000927 seconds]
[2024-01-12 12:33:30,568: INFO: tpe: TPE using 4/4 trials with best loss 103040.000000]
[2024-01-12 12:34:52,368: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:34:52,368: INFO: tpe: TPE using 5/5 trials with best loss 103040.000000]
[2024-01-12 12:35:13,150: INFO: tpe: build_posterior_wrapper took 0.001006 seconds]
[2024-01-12 12:35:13,151: INFO: tpe: TPE using 6/6 trials with best loss 103040.000000]
[2024-01-12 12:36:04,872: INFO: tpe: build_posterior_wrapper took 0.001035 seconds]
[2024-01-12 12:36:04,873: INFO: tpe: TPE using 7/7 trials with best loss 103040.000000]
[2024-01-12 12:36:12,738: INFO: tpe: build_posterior_wrapper took 0.000954 seconds]
[2024-01-12 12:36:12,739: INFO: tpe: TPE using 8/8 trials with best loss 103040.000000]
[2024-01-12 12:37:31,767: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:37:31,768: INFO: tpe: TPE using 9/9 trials with best loss 103040.000000]
[2024-01-12 12:37:41,089: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:49:44,224: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:49:44,233: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:49:44,247: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:49:44,265: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:49:44,267: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:49:44,380: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:49:44,390: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:49:45,014: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 12:49:45,014: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:49:45,068: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:45,070: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 12:49:45,128: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:45,129: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 12:49:45,187: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:45,187: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 12:49:45,243: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 12:49:45,243: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 12:49:45,305: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 12:49:45,305: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 12:49:45,358: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:45,359: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 12:49:45,418: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:45,419: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 12:49:45,475: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:45,476: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:49:45,534: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:45,535: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:49:45,598: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:49:45,959: INFO: tpe: build_posterior_wrapper took 0.001922 seconds]
[2024-01-12 12:49:45,960: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:49:46,006: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 12:49:46,007: INFO: tpe: TPE using 1/1 trials with best loss 51970.000000]
[2024-01-12 12:49:46,044: INFO: tpe: build_posterior_wrapper took 0.000901 seconds]
[2024-01-12 12:49:46,045: INFO: tpe: TPE using 2/2 trials with best loss 51970.000000]
[2024-01-12 12:49:46,066: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 12:49:46,068: INFO: tpe: TPE using 3/3 trials with best loss 51970.000000]
[2024-01-12 12:49:46,107: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:46,108: INFO: tpe: TPE using 4/4 trials with best loss 51970.000000]
[2024-01-12 12:49:46,132: INFO: tpe: build_posterior_wrapper took 0.000976 seconds]
[2024-01-12 12:49:46,133: INFO: tpe: TPE using 5/5 trials with best loss 51970.000000]
[2024-01-12 12:49:46,163: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 12:49:46,163: INFO: tpe: TPE using 6/6 trials with best loss 51970.000000]
[2024-01-12 12:49:46,191: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 12:49:46,191: INFO: tpe: TPE using 7/7 trials with best loss 51970.000000]
[2024-01-12 12:49:46,213: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:46,214: INFO: tpe: TPE using 8/8 trials with best loss 51970.000000]
[2024-01-12 12:49:46,245: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:49:46,246: INFO: tpe: TPE using 9/9 trials with best loss 51970.000000]
[2024-01-12 12:49:46,307: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:51:09,162: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 12:51:09,172: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:51:09,185: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:51:09,198: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 12:51:09,199: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 12:51:09,336: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 12:51:09,346: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:51:10,287: INFO: tpe: build_posterior_wrapper took 0.000359 seconds]
[2024-01-12 12:51:10,287: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:51:10,368: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 12:51:10,368: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 12:51:10,449: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:10,450: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 12:51:10,510: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:10,511: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 12:51:10,566: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:10,567: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 12:51:10,623: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:10,625: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 12:51:10,682: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:10,682: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 12:51:10,744: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:10,745: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 12:51:10,796: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:10,796: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 12:51:10,845: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:10,846: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 12:51:10,905: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:51:11,140: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:11,141: INFO: tpe: TPE using 0 trials]
[2024-01-12 12:51:11,196: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:11,197: INFO: tpe: TPE using 1/1 trials with best loss 123250.000000]
[2024-01-12 12:51:11,227: INFO: tpe: build_posterior_wrapper took 0.001059 seconds]
[2024-01-12 12:51:11,228: INFO: tpe: TPE using 2/2 trials with best loss 123250.000000]
[2024-01-12 12:51:11,253: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 12:51:11,255: INFO: tpe: TPE using 3/3 trials with best loss 123250.000000]
[2024-01-12 12:51:11,273: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:11,274: INFO: tpe: TPE using 4/4 trials with best loss 98580.000000]
[2024-01-12 12:51:11,317: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:11,318: INFO: tpe: TPE using 5/5 trials with best loss 98580.000000]
[2024-01-12 12:51:11,333: INFO: tpe: build_posterior_wrapper took 0.001081 seconds]
[2024-01-12 12:51:11,333: INFO: tpe: TPE using 6/6 trials with best loss 98580.000000]
[2024-01-12 12:51:11,367: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 12:51:11,368: INFO: tpe: TPE using 7/7 trials with best loss 98580.000000]
[2024-01-12 12:51:11,425: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:11,426: INFO: tpe: TPE using 8/8 trials with best loss 98580.000000]
[2024-01-12 12:51:11,449: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 12:51:11,450: INFO: tpe: TPE using 9/9 trials with best loss 98580.000000]
[2024-01-12 12:51:11,486: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 12:59:59,713: INFO: tpe: build_posterior_wrapper took 0.000957 seconds]
[2024-01-12 12:59:59,714: INFO: tpe: TPE using 0 trials]
[2024-01-12 13:00:07,791: INFO: tpe: build_posterior_wrapper took 0.002080 seconds]
[2024-01-12 13:00:07,792: INFO: tpe: TPE using 1/1 trials with best loss 78080.000000]
[2024-01-12 13:00:18,419: INFO: tpe: build_posterior_wrapper took 0.001090 seconds]
[2024-01-12 13:00:18,420: INFO: tpe: TPE using 2/2 trials with best loss 72080.000000]
[2024-01-12 13:00:29,270: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 13:00:29,271: INFO: tpe: TPE using 3/3 trials with best loss 51090.000000]
[2024-01-12 13:00:45,206: INFO: tpe: build_posterior_wrapper took 0.062292 seconds]
[2024-01-12 13:00:45,207: INFO: tpe: TPE using 4/4 trials with best loss 51090.000000]
[2024-01-12 13:00:50,496: INFO: tpe: build_posterior_wrapper took 0.001038 seconds]
[2024-01-12 13:00:50,497: INFO: tpe: TPE using 5/5 trials with best loss 51090.000000]
[2024-01-12 13:01:00,339: INFO: tpe: build_posterior_wrapper took 0.001086 seconds]
[2024-01-12 13:01:00,340: INFO: tpe: TPE using 6/6 trials with best loss 51090.000000]
[2024-01-12 13:01:23,067: INFO: tpe: build_posterior_wrapper took 0.001082 seconds]
[2024-01-12 13:01:23,068: INFO: tpe: TPE using 7/7 trials with best loss 51090.000000]
[2024-01-12 13:01:41,508: INFO: tpe: build_posterior_wrapper took 0.000971 seconds]
[2024-01-12 13:01:41,509: INFO: tpe: TPE using 8/8 trials with best loss 51090.000000]
[2024-01-12 13:04:24,620: INFO: tpe: build_posterior_wrapper took 0.000990 seconds]
[2024-01-12 13:04:24,622: INFO: tpe: TPE using 9/9 trials with best loss 51090.000000]
[2024-01-12 13:05:27,057: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 13:15:35,610: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 13:15:35,610: INFO: tpe: TPE using 0 trials]
[2024-01-12 13:16:41,274: INFO: tpe: build_posterior_wrapper took 0.000910 seconds]
[2024-01-12 13:16:41,275: INFO: tpe: TPE using 1/1 trials with best loss 128040.000000]
[2024-01-12 13:17:24,437: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 13:17:24,438: INFO: tpe: TPE using 2/2 trials with best loss 128040.000000]
[2024-01-12 13:17:54,396: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 13:17:54,397: INFO: tpe: TPE using 3/3 trials with best loss 128040.000000]
[2024-01-12 13:19:05,261: INFO: tpe: build_posterior_wrapper took 0.001029 seconds]
[2024-01-12 13:19:05,262: INFO: tpe: TPE using 4/4 trials with best loss 128040.000000]
[2024-01-12 13:19:17,758: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 13:19:17,760: INFO: tpe: TPE using 5/5 trials with best loss 115040.000000]
[2024-01-12 13:20:02,107: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 13:20:02,108: INFO: tpe: TPE using 6/6 trials with best loss 106540.000000]
[2024-01-12 13:20:17,975: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 13:20:17,976: INFO: tpe: TPE using 7/7 trials with best loss 106540.000000]
[2024-01-12 13:20:45,508: INFO: tpe: build_posterior_wrapper took 0.001044 seconds]
[2024-01-12 13:20:45,509: INFO: tpe: TPE using 8/8 trials with best loss 106540.000000]
[2024-01-12 13:21:59,457: INFO: tpe: build_posterior_wrapper took 0.001080 seconds]
[2024-01-12 13:21:59,458: INFO: tpe: TPE using 9/9 trials with best loss 106540.000000]
[2024-01-12 13:23:39,560: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 14:01:15,213: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 14:01:15,223: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 14:01:15,233: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 14:01:15,246: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 14:01:15,247: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 14:01:15,355: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 14:01:15,365: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 14:01:15,957: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:15,957: INFO: tpe: TPE using 0 trials]
[2024-01-12 14:01:16,015: INFO: tpe: build_posterior_wrapper took 0.001019 seconds]
[2024-01-12 14:01:16,015: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 14:01:16,067: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:16,067: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 14:01:16,124: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:16,125: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 14:01:16,179: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:16,180: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 14:01:16,233: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:16,233: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 14:01:16,291: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 14:01:16,291: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 14:01:16,347: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:16,348: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 14:01:16,402: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:16,402: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 14:01:16,457: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:16,458: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 14:01:16,519: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 14:01:16,873: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:16,874: INFO: tpe: TPE using 0 trials]
[2024-01-12 14:01:16,905: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 14:01:16,906: INFO: tpe: TPE using 1/1 trials with best loss 497220.000000]
[2024-01-12 14:01:16,931: INFO: tpe: build_posterior_wrapper took 0.001007 seconds]
[2024-01-12 14:01:16,931: INFO: tpe: TPE using 2/2 trials with best loss 65610.000000]
[2024-01-12 14:01:17,015: INFO: tpe: build_posterior_wrapper took 0.000955 seconds]
[2024-01-12 14:01:17,016: INFO: tpe: TPE using 3/3 trials with best loss 65610.000000]
[2024-01-12 14:01:17,064: INFO: tpe: build_posterior_wrapper took 0.001043 seconds]
[2024-01-12 14:01:17,065: INFO: tpe: TPE using 4/4 trials with best loss 65610.000000]
[2024-01-12 14:01:17,080: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:17,081: INFO: tpe: TPE using 5/5 trials with best loss 65610.000000]
[2024-01-12 14:01:17,103: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:17,104: INFO: tpe: TPE using 6/6 trials with best loss 65610.000000]
[2024-01-12 14:01:17,121: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:17,122: INFO: tpe: TPE using 7/7 trials with best loss 65610.000000]
[2024-01-12 14:01:17,149: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:01:17,150: INFO: tpe: TPE using 8/8 trials with best loss 63300.000000]
[2024-01-12 14:01:17,171: INFO: tpe: build_posterior_wrapper took 0.000964 seconds]
[2024-01-12 14:01:17,172: INFO: tpe: TPE using 9/9 trials with best loss 63300.000000]
[2024-01-12 14:01:17,241: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 14:11:14,428: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 14:11:14,428: INFO: tpe: TPE using 0 trials]
[2024-01-12 14:11:28,024: INFO: tpe: build_posterior_wrapper took 0.002026 seconds]
[2024-01-12 14:11:28,024: INFO: tpe: TPE using 1/1 trials with best loss 51080.000000]
[2024-01-12 14:11:30,153: INFO: tpe: build_posterior_wrapper took 0.001032 seconds]
[2024-01-12 14:11:30,154: INFO: tpe: TPE using 2/2 trials with best loss 51080.000000]
[2024-01-12 14:11:49,940: INFO: tpe: build_posterior_wrapper took 0.000976 seconds]
[2024-01-12 14:11:49,941: INFO: tpe: TPE using 3/3 trials with best loss 51080.000000]
[2024-01-12 14:12:39,694: INFO: tpe: build_posterior_wrapper took 0.001082 seconds]
[2024-01-12 14:12:39,695: INFO: tpe: TPE using 4/4 trials with best loss 51080.000000]
[2024-01-12 14:12:41,278: INFO: tpe: build_posterior_wrapper took 0.001915 seconds]
[2024-01-12 14:12:41,278: INFO: tpe: TPE using 5/5 trials with best loss 48100.000000]
[2024-01-12 14:13:06,982: INFO: tpe: build_posterior_wrapper took 0.001949 seconds]
[2024-01-12 14:13:06,982: INFO: tpe: TPE using 6/6 trials with best loss 48100.000000]
[2024-01-12 14:16:33,716: INFO: tpe: build_posterior_wrapper took 0.002033 seconds]
[2024-01-12 14:16:33,720: INFO: tpe: TPE using 7/7 trials with best loss 48100.000000]
[2024-01-12 14:18:50,562: INFO: tpe: build_posterior_wrapper took 0.002067 seconds]
[2024-01-12 14:18:50,563: INFO: tpe: TPE using 8/8 trials with best loss 48100.000000]
[2024-01-12 14:18:53,190: INFO: tpe: build_posterior_wrapper took 0.001029 seconds]
[2024-01-12 14:18:53,191: INFO: tpe: TPE using 9/9 trials with best loss 48100.000000]
[2024-01-12 14:19:10,999: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 14:30:40,707: INFO: tpe: build_posterior_wrapper took 0.000925 seconds]
[2024-01-12 14:30:40,707: INFO: tpe: TPE using 0 trials]
[2024-01-12 14:31:26,930: INFO: tpe: build_posterior_wrapper took 0.001032 seconds]
[2024-01-12 14:31:26,930: INFO: tpe: TPE using 1/1 trials with best loss 131540.000000]
[2024-01-12 14:31:52,248: INFO: tpe: build_posterior_wrapper took 0.000633 seconds]
[2024-01-12 14:31:52,249: INFO: tpe: TPE using 2/2 trials with best loss 115540.000000]
[2024-01-12 14:33:29,064: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 14:33:29,065: INFO: tpe: TPE using 3/3 trials with best loss 101540.000000]
[2024-01-12 14:34:34,195: INFO: tpe: build_posterior_wrapper took 0.001052 seconds]
[2024-01-12 14:34:34,195: INFO: tpe: TPE using 4/4 trials with best loss 101540.000000]
[2024-01-12 14:36:28,172: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 14:36:28,173: INFO: tpe: TPE using 5/5 trials with best loss 101540.000000]
[2024-01-12 14:37:07,071: INFO: tpe: build_posterior_wrapper took 0.000910 seconds]
[2024-01-12 14:37:07,072: INFO: tpe: TPE using 6/6 trials with best loss 101540.000000]
[2024-01-12 14:39:01,575: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 14:39:01,576: INFO: tpe: TPE using 7/7 trials with best loss 101540.000000]
[2024-01-12 14:40:35,276: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 14:40:35,277: INFO: tpe: TPE using 8/8 trials with best loss 101540.000000]
[2024-01-12 14:41:45,619: INFO: tpe: build_posterior_wrapper took 0.000968 seconds]
[2024-01-12 14:41:45,619: INFO: tpe: TPE using 9/9 trials with best loss 101540.000000]
[2024-01-12 14:42:34,302: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 14:45:05,890: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 14:45:05,890: INFO: tpe: TPE using 0 trials]
[2024-01-12 14:45:10,068: INFO: tpe: build_posterior_wrapper took 0.001993 seconds]
[2024-01-12 14:45:10,068: INFO: tpe: TPE using 1/1 trials with best loss 103060.000000]
[2024-01-12 14:46:03,393: INFO: tpe: build_posterior_wrapper took 0.002076 seconds]
[2024-01-12 14:46:03,393: INFO: tpe: TPE using 2/2 trials with best loss 103060.000000]
[2024-01-12 14:46:56,871: INFO: tpe: build_posterior_wrapper took 0.001095 seconds]
[2024-01-12 14:46:56,872: INFO: tpe: TPE using 3/3 trials with best loss 103060.000000]
[2024-01-12 14:47:48,094: INFO: tpe: build_posterior_wrapper took 0.001096 seconds]
[2024-01-12 14:47:48,095: INFO: tpe: TPE using 4/4 trials with best loss 103060.000000]
[2024-01-12 14:47:52,759: INFO: tpe: build_posterior_wrapper took 0.000961 seconds]
[2024-01-12 14:47:52,760: INFO: tpe: TPE using 5/5 trials with best loss 99060.000000]
[2024-01-12 14:48:46,079: INFO: tpe: build_posterior_wrapper took 0.001043 seconds]
[2024-01-12 14:48:46,080: INFO: tpe: TPE using 6/6 trials with best loss 99060.000000]
[2024-01-12 14:48:50,631: INFO: tpe: build_posterior_wrapper took 0.001082 seconds]
[2024-01-12 14:48:50,631: INFO: tpe: TPE using 7/7 trials with best loss 90070.000000]
[2024-01-12 14:48:57,888: INFO: tpe: build_posterior_wrapper took 0.001034 seconds]
[2024-01-12 14:48:57,888: INFO: tpe: TPE using 8/8 trials with best loss 90070.000000]
[2024-01-12 14:49:05,934: INFO: tpe: build_posterior_wrapper took 0.000912 seconds]
[2024-01-12 14:49:05,935: INFO: tpe: TPE using 9/9 trials with best loss 90070.000000]
[2024-01-12 14:49:59,957: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:09:53,276: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:09:53,277: INFO: tpe: TPE using 0 trials]
[2024-01-12 15:12:05,957: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:12:05,958: INFO: tpe: TPE using 1/1 trials with best loss 140080.000000]
[2024-01-12 15:15:28,337: INFO: tpe: build_posterior_wrapper took 0.000916 seconds]
[2024-01-12 15:15:28,338: INFO: tpe: TPE using 2/2 trials with best loss 127080.000000]
[2024-01-12 15:20:04,706: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:20:04,708: INFO: tpe: TPE using 3/3 trials with best loss 127080.000000]
[2024-01-12 15:21:19,509: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:21:19,510: INFO: tpe: TPE using 4/4 trials with best loss 127080.000000]
[2024-01-12 15:23:15,693: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:23:15,694: INFO: tpe: TPE using 5/5 trials with best loss 127080.000000]
[2024-01-12 15:24:57,799: INFO: tpe: build_posterior_wrapper took 0.000894 seconds]
[2024-01-12 15:24:57,800: INFO: tpe: TPE using 6/6 trials with best loss 126080.000000]
[2024-01-12 15:25:58,619: INFO: tpe: build_posterior_wrapper took 0.000965 seconds]
[2024-01-12 15:25:58,620: INFO: tpe: TPE using 7/7 trials with best loss 126080.000000]
[2024-01-12 15:26:57,696: INFO: tpe: build_posterior_wrapper took 0.000953 seconds]
[2024-01-12 15:26:57,697: INFO: tpe: TPE using 8/8 trials with best loss 126080.000000]
[2024-01-12 15:28:23,849: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:28:23,851: INFO: tpe: TPE using 9/9 trials with best loss 126080.000000]
[2024-01-12 15:30:33,234: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:30:48,089: INFO: tpe: build_posterior_wrapper took 0.001074 seconds]
[2024-01-12 15:30:48,090: INFO: tpe: TPE using 0 trials]
[2024-01-12 15:30:56,025: INFO: tpe: build_posterior_wrapper took 0.001086 seconds]
[2024-01-12 15:30:56,026: INFO: tpe: TPE using 1/1 trials with best loss 243590.000000]
[2024-01-12 15:30:59,344: INFO: tpe: build_posterior_wrapper took 0.001993 seconds]
[2024-01-12 15:30:59,345: INFO: tpe: TPE using 2/2 trials with best loss 122080.000000]
[2024-01-12 15:31:04,323: INFO: tpe: build_posterior_wrapper took 0.001091 seconds]
[2024-01-12 15:31:04,324: INFO: tpe: TPE using 3/3 trials with best loss 122080.000000]
[2024-01-12 15:31:05,365: INFO: tpe: build_posterior_wrapper took 0.001023 seconds]
[2024-01-12 15:31:05,366: INFO: tpe: TPE using 4/4 trials with best loss 61100.000000]
[2024-01-12 15:31:12,804: INFO: tpe: build_posterior_wrapper took 0.001073 seconds]
[2024-01-12 15:31:12,805: INFO: tpe: TPE using 5/5 trials with best loss 61100.000000]
[2024-01-12 15:31:13,084: INFO: tpe: build_posterior_wrapper took 0.001079 seconds]
[2024-01-12 15:31:13,085: INFO: tpe: TPE using 6/6 trials with best loss 61100.000000]
[2024-01-12 15:31:15,772: INFO: tpe: build_posterior_wrapper took 0.001046 seconds]
[2024-01-12 15:31:15,773: INFO: tpe: TPE using 7/7 trials with best loss 61100.000000]
[2024-01-12 15:31:20,072: INFO: tpe: build_posterior_wrapper took 0.002080 seconds]
[2024-01-12 15:31:20,073: INFO: tpe: TPE using 8/8 trials with best loss 61100.000000]
[2024-01-12 15:31:22,017: INFO: tpe: build_posterior_wrapper took 0.000978 seconds]
[2024-01-12 15:31:22,018: INFO: tpe: TPE using 9/9 trials with best loss 61100.000000]
[2024-01-12 15:31:28,674: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:31:52,531: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:31:52,532: INFO: tpe: TPE using 0 trials]
[2024-01-12 15:31:54,792: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:31:54,792: INFO: tpe: TPE using 1/1 trials with best loss 76050.000000]
[2024-01-12 15:31:57,156: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 15:31:57,156: INFO: tpe: TPE using 2/2 trials with best loss 76050.000000]
[2024-01-12 15:31:59,729: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:31:59,730: INFO: tpe: TPE using 3/3 trials with best loss 76050.000000]
[2024-01-12 15:32:02,442: INFO: tpe: build_posterior_wrapper took 0.001072 seconds]
[2024-01-12 15:32:02,443: INFO: tpe: TPE using 4/4 trials with best loss 76050.000000]
[2024-01-12 15:32:04,651: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:32:04,652: INFO: tpe: TPE using 5/5 trials with best loss 75550.000000]
[2024-01-12 15:32:06,882: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:32:06,883: INFO: tpe: TPE using 6/6 trials with best loss 75550.000000]
[2024-01-12 15:32:09,197: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 15:32:09,197: INFO: tpe: TPE using 7/7 trials with best loss 75550.000000]
[2024-01-12 15:32:11,843: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 15:32:11,844: INFO: tpe: TPE using 8/8 trials with best loss 75550.000000]
[2024-01-12 15:32:14,262: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 15:32:14,262: INFO: tpe: TPE using 9/9 trials with best loss 75550.000000]
[2024-01-12 15:32:16,973: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:32:17,203: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 15:32:17,204: INFO: tpe: TPE using 0 trials]
[2024-01-12 15:32:17,237: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 15:32:17,237: INFO: tpe: TPE using 1/1 trials with best loss 379070.000000]
[2024-01-12 15:32:17,250: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 15:32:17,251: INFO: tpe: TPE using 2/2 trials with best loss 204140.000000]
[2024-01-12 15:32:17,278: INFO: tpe: build_posterior_wrapper took 0.000901 seconds]
[2024-01-12 15:32:17,279: INFO: tpe: TPE using 3/3 trials with best loss 97570.000000]
[2024-01-12 15:32:17,320: INFO: tpe: build_posterior_wrapper took 0.000969 seconds]
[2024-01-12 15:32:17,321: INFO: tpe: TPE using 4/4 trials with best loss 92100.000000]
[2024-01-12 15:32:17,363: INFO: tpe: build_posterior_wrapper took 0.001020 seconds]
[2024-01-12 15:32:17,365: INFO: tpe: TPE using 5/5 trials with best loss 92100.000000]
[2024-01-12 15:32:17,405: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 15:32:17,406: INFO: tpe: TPE using 6/6 trials with best loss 92100.000000]
[2024-01-12 15:32:17,438: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 15:32:17,438: INFO: tpe: TPE using 7/7 trials with best loss 92100.000000]
[2024-01-12 15:32:17,473: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 15:32:17,474: INFO: tpe: TPE using 8/8 trials with best loss 92100.000000]
[2024-01-12 15:32:17,691: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 15:32:17,692: INFO: tpe: TPE using 9/9 trials with best loss 92100.000000]
[2024-01-12 15:32:17,750: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:44:53,930: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 15:44:53,931: INFO: tpe: TPE using 0 trials]
[2024-01-12 15:44:54,255: INFO: tpe: build_posterior_wrapper took 0.002005 seconds]
[2024-01-12 15:44:54,256: INFO: tpe: TPE using 1/1 trials with best loss 492510.000000]
[2024-01-12 15:47:29,461: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 15:47:29,463: INFO: tpe: TPE using 2/2 trials with best loss 75570.000000]
[2024-01-12 15:47:30,289: INFO: tpe: build_posterior_wrapper took 0.001997 seconds]
[2024-01-12 15:47:30,290: INFO: tpe: TPE using 3/3 trials with best loss 75570.000000]
[2024-01-12 15:50:26,368: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 15:50:26,369: INFO: tpe: TPE using 4/4 trials with best loss 75570.000000]
[2024-01-12 15:50:27,727: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 15:50:27,728: INFO: tpe: TPE using 5/5 trials with best loss 75570.000000]
[2024-01-12 15:50:33,151: INFO: tpe: build_posterior_wrapper took 0.002001 seconds]
[2024-01-12 15:50:33,152: INFO: tpe: TPE using 6/6 trials with best loss 75570.000000]
[2024-01-12 15:51:26,352: INFO: tpe: build_posterior_wrapper took 0.001505 seconds]
[2024-01-12 15:51:26,353: INFO: tpe: TPE using 7/7 trials with best loss 75570.000000]
[2024-01-12 15:51:36,673: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 15:51:36,674: INFO: tpe: TPE using 8/8 trials with best loss 75060.000000]
[2024-01-12 15:52:07,370: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 15:52:07,372: INFO: tpe: TPE using 9/9 trials with best loss 75060.000000]
[2024-01-12 15:52:08,571: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:55:36,112: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 15:55:36,117: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:55:36,129: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 15:55:36,140: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 15:55:36,141: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 15:55:36,296: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 15:55:36,301: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:55:38,878: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 15:55:38,879: INFO: tpe: TPE using 0 trials]
[2024-01-12 15:55:39,461: INFO: tpe: build_posterior_wrapper took 0.000921 seconds]
[2024-01-12 15:55:39,462: INFO: tpe: TPE using 1/1 trials with best loss 112730.000000]
[2024-01-12 15:55:40,066: INFO: tpe: build_posterior_wrapper took 0.000923 seconds]
[2024-01-12 15:55:40,067: INFO: tpe: TPE using 2/2 trials with best loss 110230.000000]
[2024-01-12 15:55:40,094: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 15:55:40,095: INFO: tpe: TPE using 3/3 trials with best loss 109220.000000]
[2024-01-12 15:55:40,664: INFO: tpe: build_posterior_wrapper took 0.000893 seconds]
[2024-01-12 15:55:40,665: INFO: tpe: TPE using 4/4 trials with best loss 96230.000000]
[2024-01-12 15:55:41,231: INFO: tpe: build_posterior_wrapper took 0.000949 seconds]
[2024-01-12 15:55:41,232: INFO: tpe: TPE using 5/5 trials with best loss 96230.000000]
[2024-01-12 15:55:41,778: INFO: tpe: build_posterior_wrapper took 0.001030 seconds]
[2024-01-12 15:55:41,780: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 15:55:41,811: INFO: tpe: build_posterior_wrapper took 0.001092 seconds]
[2024-01-12 15:55:41,811: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 15:55:42,386: INFO: tpe: build_posterior_wrapper took 0.000969 seconds]
[2024-01-12 15:55:42,387: INFO: tpe: TPE using 8/8 trials with best loss 96230.000000]
[2024-01-12 15:55:42,897: INFO: tpe: build_posterior_wrapper took 0.000954 seconds]
[2024-01-12 15:55:42,898: INFO: tpe: TPE using 9/9 trials with best loss 96230.000000]
[2024-01-12 15:55:42,935: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 15:57:28,910: INFO: tpe: build_posterior_wrapper took 0.001050 seconds]
[2024-01-12 15:57:28,911: INFO: tpe: TPE using 0 trials]
[2024-01-12 15:57:43,282: INFO: tpe: build_posterior_wrapper took 0.001088 seconds]
[2024-01-12 15:57:43,284: INFO: tpe: TPE using 1/1 trials with best loss 400580.000000]
[2024-01-12 15:57:53,494: INFO: tpe: build_posterior_wrapper took 0.001919 seconds]
[2024-01-12 15:57:53,495: INFO: tpe: TPE using 2/2 trials with best loss 354190.000000]
[2024-01-12 15:58:13,226: INFO: tpe: build_posterior_wrapper took 0.002013 seconds]
[2024-01-12 15:58:13,227: INFO: tpe: TPE using 3/3 trials with best loss 354190.000000]
[2024-01-12 15:59:14,137: INFO: tpe: build_posterior_wrapper took 0.002086 seconds]
[2024-01-12 15:59:14,137: INFO: tpe: TPE using 4/4 trials with best loss 208650.000000]
[2024-01-12 15:59:21,486: INFO: tpe: build_posterior_wrapper took 0.001991 seconds]
[2024-01-12 15:59:21,487: INFO: tpe: TPE using 5/5 trials with best loss 208650.000000]
[2024-01-12 15:59:22,869: INFO: tpe: build_posterior_wrapper took 0.000945 seconds]
[2024-01-12 15:59:22,870: INFO: tpe: TPE using 6/6 trials with best loss 166360.000000]
[2024-01-12 15:59:52,047: INFO: tpe: build_posterior_wrapper took 0.001898 seconds]
[2024-01-12 15:59:52,047: INFO: tpe: TPE using 7/7 trials with best loss 166360.000000]
[2024-01-12 15:59:59,747: INFO: tpe: build_posterior_wrapper took 0.002080 seconds]
[2024-01-12 15:59:59,747: INFO: tpe: TPE using 8/8 trials with best loss 166360.000000]
[2024-01-12 16:00:04,246: INFO: tpe: build_posterior_wrapper took 0.002006 seconds]
[2024-01-12 16:00:04,247: INFO: tpe: TPE using 9/9 trials with best loss 166360.000000]
[2024-01-12 16:25:39,240: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 16:25:39,246: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:25:39,255: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 16:25:39,267: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 16:25:39,268: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 16:25:39,377: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 16:25:39,383: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:25:39,978: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 16:25:39,978: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:25:40,042: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:40,042: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 16:25:40,100: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 16:25:40,100: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 16:25:40,160: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:40,161: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 16:25:40,219: INFO: tpe: build_posterior_wrapper took 0.000981 seconds]
[2024-01-12 16:25:40,220: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 16:25:40,277: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 16:25:40,277: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 16:25:40,333: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 16:25:40,333: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 16:25:40,391: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:40,391: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 16:25:40,449: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:40,449: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 16:25:40,508: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:40,508: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 16:25:40,568: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:25:40,911: INFO: tpe: build_posterior_wrapper took 0.000960 seconds]
[2024-01-12 16:25:40,911: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:25:40,959: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:40,960: INFO: tpe: TPE using 1/1 trials with best loss 222270.000000]
[2024-01-12 16:25:40,980: INFO: tpe: build_posterior_wrapper took 0.001064 seconds]
[2024-01-12 16:25:40,980: INFO: tpe: TPE using 2/2 trials with best loss 130430.000000]
[2024-01-12 16:25:41,004: INFO: tpe: build_posterior_wrapper took 0.000931 seconds]
[2024-01-12 16:25:41,006: INFO: tpe: TPE using 3/3 trials with best loss 122500.000000]
[2024-01-12 16:25:41,051: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 16:25:41,052: INFO: tpe: TPE using 4/4 trials with best loss 122500.000000]
[2024-01-12 16:25:41,078: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:41,079: INFO: tpe: TPE using 5/5 trials with best loss 95100.000000]
[2024-01-12 16:25:41,098: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:41,099: INFO: tpe: TPE using 6/6 trials with best loss 95100.000000]
[2024-01-12 16:25:41,128: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:41,129: INFO: tpe: TPE using 7/7 trials with best loss 95100.000000]
[2024-01-12 16:25:41,147: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:41,149: INFO: tpe: TPE using 8/8 trials with best loss 95100.000000]
[2024-01-12 16:25:41,216: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 16:25:41,217: INFO: tpe: TPE using 9/9 trials with best loss 95100.000000]
[2024-01-12 16:25:41,259: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:25:43,520: INFO: tpe: build_posterior_wrapper took 0.000916 seconds]
[2024-01-12 16:25:43,520: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:25:44,119: INFO: tpe: build_posterior_wrapper took 0.000953 seconds]
[2024-01-12 16:25:44,120: INFO: tpe: TPE using 1/1 trials with best loss 110230.000000]
[2024-01-12 16:25:44,153: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:25:44,154: INFO: tpe: TPE using 2/2 trials with best loss 110230.000000]
[2024-01-12 16:25:44,246: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 16:25:44,247: INFO: tpe: TPE using 3/3 trials with best loss 110230.000000]
[2024-01-12 16:25:44,278: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:25:44,278: INFO: tpe: TPE using 4/4 trials with best loss 110230.000000]
[2024-01-12 16:25:44,374: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 16:25:44,374: INFO: tpe: TPE using 5/5 trials with best loss 110230.000000]
[2024-01-12 16:25:44,893: INFO: tpe: build_posterior_wrapper took 0.000987 seconds]
[2024-01-12 16:25:44,894: INFO: tpe: TPE using 6/6 trials with best loss 110230.000000]
[2024-01-12 16:25:45,360: INFO: tpe: build_posterior_wrapper took 0.000907 seconds]
[2024-01-12 16:25:45,361: INFO: tpe: TPE using 7/7 trials with best loss 110230.000000]
[2024-01-12 16:25:45,394: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:25:45,394: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 16:25:45,494: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:25:45,494: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 16:38:05,827: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 16:38:05,833: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:38:05,847: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 16:38:05,857: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 16:38:05,858: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 16:38:05,957: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 16:38:05,963: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:38:06,530: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:06,531: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:38:06,582: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 16:38:06,582: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 16:38:06,637: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:06,638: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 16:38:06,692: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:06,693: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 16:38:06,746: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:06,747: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 16:38:06,801: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:38:06,801: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 16:38:06,855: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:06,855: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 16:38:06,910: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:06,911: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 16:38:06,966: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:38:06,966: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 16:38:07,024: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:07,025: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 16:38:07,083: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:38:07,315: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 16:38:07,316: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:38:07,344: INFO: tpe: build_posterior_wrapper took 0.001045 seconds]
[2024-01-12 16:38:07,345: INFO: tpe: TPE using 1/1 trials with best loss 284050.000000]
[2024-01-12 16:38:07,387: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:07,389: INFO: tpe: TPE using 2/2 trials with best loss 284050.000000]
[2024-01-12 16:38:07,408: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:07,409: INFO: tpe: TPE using 3/3 trials with best loss 222660.000000]
[2024-01-12 16:38:07,442: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:38:07,443: INFO: tpe: TPE using 4/4 trials with best loss 222660.000000]
[2024-01-12 16:38:07,465: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:07,466: INFO: tpe: TPE using 5/5 trials with best loss 222660.000000]
[2024-01-12 16:38:07,492: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:07,493: INFO: tpe: TPE using 6/6 trials with best loss 222660.000000]
[2024-01-12 16:38:07,509: INFO: tpe: build_posterior_wrapper took 0.001043 seconds]
[2024-01-12 16:38:07,510: INFO: tpe: TPE using 7/7 trials with best loss 92970.000000]
[2024-01-12 16:38:07,548: INFO: tpe: build_posterior_wrapper took 0.000944 seconds]
[2024-01-12 16:38:07,549: INFO: tpe: TPE using 8/8 trials with best loss 34900.000000]
[2024-01-12 16:38:07,571: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 16:38:07,572: INFO: tpe: TPE using 9/9 trials with best loss 34900.000000]
[2024-01-12 16:38:07,610: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:38:09,628: INFO: tpe: build_posterior_wrapper took 0.000897 seconds]
[2024-01-12 16:38:09,629: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:38:10,111: INFO: tpe: build_posterior_wrapper took 0.000925 seconds]
[2024-01-12 16:38:10,112: INFO: tpe: TPE using 1/1 trials with best loss 111710.000000]
[2024-01-12 16:38:10,142: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:38:10,143: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 16:38:10,680: INFO: tpe: build_posterior_wrapper took 0.000927 seconds]
[2024-01-12 16:38:10,681: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 16:38:11,141: INFO: tpe: build_posterior_wrapper took 0.001088 seconds]
[2024-01-12 16:38:11,142: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 16:38:11,633: INFO: tpe: build_posterior_wrapper took 0.001032 seconds]
[2024-01-12 16:38:11,634: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 16:38:12,110: INFO: tpe: build_posterior_wrapper took 0.001035 seconds]
[2024-01-12 16:38:12,111: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 16:38:12,133: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:38:12,133: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 16:38:12,629: INFO: tpe: build_posterior_wrapper took 0.000892 seconds]
[2024-01-12 16:38:12,630: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 16:38:12,655: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:38:12,655: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 16:38:13,221: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:42:54,716: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 16:42:54,721: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:42:54,731: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 16:42:54,743: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 16:42:54,745: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 16:42:54,868: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 16:42:54,874: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:42:55,509: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:55,510: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:42:55,569: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:55,570: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 16:42:55,627: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:55,627: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 16:42:55,683: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:55,683: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 16:42:55,741: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:55,741: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 16:42:55,795: INFO: tpe: build_posterior_wrapper took 0.001017 seconds]
[2024-01-12 16:42:55,795: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 16:42:55,858: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 16:42:55,858: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 16:42:55,910: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:55,911: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 16:42:55,969: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:55,969: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 16:42:56,026: INFO: tpe: build_posterior_wrapper took 0.001016 seconds]
[2024-01-12 16:42:56,026: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 16:42:56,086: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:42:56,360: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:56,361: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:42:56,400: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:56,402: INFO: tpe: TPE using 1/1 trials with best loss 437420.000000]
[2024-01-12 16:42:56,421: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 16:42:56,421: INFO: tpe: TPE using 2/2 trials with best loss 240570.000000]
[2024-01-12 16:42:56,453: INFO: tpe: build_posterior_wrapper took 0.000971 seconds]
[2024-01-12 16:42:56,455: INFO: tpe: TPE using 3/3 trials with best loss 218060.000000]
[2024-01-12 16:42:56,479: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:56,480: INFO: tpe: TPE using 4/4 trials with best loss 63340.000000]
[2024-01-12 16:42:56,500: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:56,501: INFO: tpe: TPE using 5/5 trials with best loss 63340.000000]
[2024-01-12 16:42:56,575: INFO: tpe: build_posterior_wrapper took 0.001085 seconds]
[2024-01-12 16:42:56,576: INFO: tpe: TPE using 6/6 trials with best loss 57100.000000]
[2024-01-12 16:42:56,600: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 16:42:56,602: INFO: tpe: TPE using 7/7 trials with best loss 57100.000000]
[2024-01-12 16:42:56,623: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:42:56,624: INFO: tpe: TPE using 8/8 trials with best loss 57100.000000]
[2024-01-12 16:42:56,646: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 16:42:56,646: INFO: tpe: TPE using 9/9 trials with best loss 57100.000000]
[2024-01-12 16:42:56,689: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 16:43:00,579: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 16:43:00,579: INFO: tpe: TPE using 0 trials]
[2024-01-12 16:43:01,111: INFO: tpe: build_posterior_wrapper took 0.001049 seconds]
[2024-01-12 16:43:01,112: INFO: tpe: TPE using 1/1 trials with best loss 144690.000000]
[2024-01-12 16:43:01,632: INFO: tpe: build_posterior_wrapper took 0.000917 seconds]
[2024-01-12 16:43:01,634: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 16:43:01,654: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 16:43:01,655: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 16:43:01,689: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:43:01,690: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 16:43:02,238: INFO: tpe: build_posterior_wrapper took 0.001153 seconds]
[2024-01-12 16:43:02,239: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 16:43:02,271: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 16:43:02,272: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 16:43:02,308: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 16:43:02,309: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 16:43:02,872: INFO: tpe: build_posterior_wrapper took 0.000964 seconds]
[2024-01-12 16:43:02,873: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 16:43:02,961: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 16:43:02,961: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 16:43:03,618: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:19:16,705: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:19:16,710: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:19:16,719: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:19:16,731: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:19:16,732: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:19:16,858: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:19:16,865: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:19:17,460: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:17,460: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:19:17,513: INFO: tpe: build_posterior_wrapper took 0.001013 seconds]
[2024-01-12 17:19:17,513: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 17:19:17,567: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:17,568: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:19:17,622: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:17,623: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:19:17,678: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:17,679: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:19:17,730: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:19:17,731: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:19:17,786: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:17,787: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:19:17,841: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:19:17,841: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:19:17,895: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:19:17,895: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:19:17,953: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:17,953: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:19:18,040: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:19:18,347: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 17:19:18,348: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:19:18,369: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:18,370: INFO: tpe: TPE using 1/1 trials with best loss 62300.000000]
[2024-01-12 17:19:18,393: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:18,394: INFO: tpe: TPE using 2/2 trials with best loss 62300.000000]
[2024-01-12 17:19:18,415: INFO: tpe: build_posterior_wrapper took 0.001021 seconds]
[2024-01-12 17:19:18,416: INFO: tpe: TPE using 3/3 trials with best loss 62300.000000]
[2024-01-12 17:19:18,434: INFO: tpe: build_posterior_wrapper took 0.001007 seconds]
[2024-01-12 17:19:18,435: INFO: tpe: TPE using 4/4 trials with best loss 62300.000000]
[2024-01-12 17:19:18,458: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 17:19:18,459: INFO: tpe: TPE using 5/5 trials with best loss 62300.000000]
[2024-01-12 17:19:18,477: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 17:19:18,478: INFO: tpe: TPE using 6/6 trials with best loss 62300.000000]
[2024-01-12 17:19:18,506: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:18,507: INFO: tpe: TPE using 7/7 trials with best loss 62300.000000]
[2024-01-12 17:19:18,581: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:18,582: INFO: tpe: TPE using 8/8 trials with best loss 62300.000000]
[2024-01-12 17:19:18,610: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:18,611: INFO: tpe: TPE using 9/9 trials with best loss 62300.000000]
[2024-01-12 17:19:18,647: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:19:22,143: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:19:22,144: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:19:22,614: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 17:19:22,615: INFO: tpe: TPE using 1/1 trials with best loss 144690.000000]
[2024-01-12 17:19:22,649: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:19:22,649: INFO: tpe: TPE using 2/2 trials with best loss 109220.000000]
[2024-01-12 17:19:22,682: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:19:22,683: INFO: tpe: TPE using 3/3 trials with best loss 109220.000000]
[2024-01-12 17:19:23,148: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:19:23,150: INFO: tpe: TPE using 4/4 trials with best loss 109220.000000]
[2024-01-12 17:19:23,236: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:19:23,236: INFO: tpe: TPE using 5/5 trials with best loss 109220.000000]
[2024-01-12 17:19:23,262: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:19:23,262: INFO: tpe: TPE using 6/6 trials with best loss 109220.000000]
[2024-01-12 17:19:23,292: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:19:23,293: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:19:23,887: INFO: tpe: build_posterior_wrapper took 0.001042 seconds]
[2024-01-12 17:19:23,888: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:19:24,425: INFO: tpe: build_posterior_wrapper took 0.001030 seconds]
[2024-01-12 17:19:24,426: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:19:24,567: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:20:03,510: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:20:03,515: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:20:03,524: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:20:03,537: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:20:03,540: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:20:03,646: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:20:03,652: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:20:04,286: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 17:20:04,286: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:20:04,339: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:04,340: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 17:20:04,400: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:04,400: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:20:04,460: INFO: tpe: build_posterior_wrapper took 0.000981 seconds]
[2024-01-12 17:20:04,460: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:20:04,516: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 17:20:04,516: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:20:04,572: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 17:20:04,572: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:20:04,631: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:20:04,631: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:20:04,686: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:04,686: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:20:04,746: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:04,746: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:20:04,803: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:04,804: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:20:04,868: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:20:05,215: INFO: tpe: build_posterior_wrapper took 0.000941 seconds]
[2024-01-12 17:20:05,216: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:20:05,230: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:05,232: INFO: tpe: TPE using 1/1 trials with best loss 166570.000000]
[2024-01-12 17:20:05,261: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:20:05,263: INFO: tpe: TPE using 2/2 trials with best loss 133650.000000]
[2024-01-12 17:20:05,286: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:05,286: INFO: tpe: TPE using 3/3 trials with best loss 133650.000000]
[2024-01-12 17:20:05,316: INFO: tpe: build_posterior_wrapper took 0.001012 seconds]
[2024-01-12 17:20:05,317: INFO: tpe: TPE using 4/4 trials with best loss 133650.000000]
[2024-01-12 17:20:05,395: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:05,396: INFO: tpe: TPE using 5/5 trials with best loss 133650.000000]
[2024-01-12 17:20:05,423: INFO: tpe: build_posterior_wrapper took 0.000911 seconds]
[2024-01-12 17:20:05,424: INFO: tpe: TPE using 6/6 trials with best loss 123730.000000]
[2024-01-12 17:20:05,467: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:05,468: INFO: tpe: TPE using 7/7 trials with best loss 58630.000000]
[2024-01-12 17:20:05,500: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 17:20:05,500: INFO: tpe: TPE using 8/8 trials with best loss 58630.000000]
[2024-01-12 17:20:05,528: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:20:05,529: INFO: tpe: TPE using 9/9 trials with best loss 58630.000000]
[2024-01-12 17:20:05,566: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:20:07,855: INFO: tpe: build_posterior_wrapper took 0.002015 seconds]
[2024-01-12 17:20:07,857: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:20:08,387: INFO: tpe: build_posterior_wrapper took 0.000890 seconds]
[2024-01-12 17:20:08,388: INFO: tpe: TPE using 1/1 trials with best loss 96220.000000]
[2024-01-12 17:20:08,485: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:20:08,486: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 17:20:08,579: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:20:08,580: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 17:20:08,614: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:20:08,614: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 17:20:08,710: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:20:08,711: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 17:20:08,807: INFO: tpe: build_posterior_wrapper took 0.000902 seconds]
[2024-01-12 17:20:08,808: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 17:20:08,903: INFO: tpe: build_posterior_wrapper took 0.001011 seconds]
[2024-01-12 17:20:08,904: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:20:09,474: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 17:20:09,475: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:20:10,023: INFO: tpe: build_posterior_wrapper took 0.001998 seconds]
[2024-01-12 17:20:10,024: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:20:10,579: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:21:08,732: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:21:08,739: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:21:08,753: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:21:08,765: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:21:08,765: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:21:08,884: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:21:08,890: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:21:09,465: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:09,465: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:21:09,522: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:09,522: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:21:09,578: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:09,579: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:21:09,638: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:09,639: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:21:09,696: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:09,696: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:21:09,758: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:21:09,758: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:21:09,819: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 17:21:09,820: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:21:09,877: INFO: tpe: build_posterior_wrapper took 0.001013 seconds]
[2024-01-12 17:21:09,877: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:21:09,939: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:21:09,939: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:21:10,004: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:10,005: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:21:10,070: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:21:10,360: INFO: tpe: build_posterior_wrapper took 0.001050 seconds]
[2024-01-12 17:21:10,361: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:21:10,380: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:10,381: INFO: tpe: TPE using 1/1 trials with best loss 202700.000000]
[2024-01-12 17:21:10,404: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 17:21:10,406: INFO: tpe: TPE using 2/2 trials with best loss 202700.000000]
[2024-01-12 17:21:10,453: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:10,456: INFO: tpe: TPE using 3/3 trials with best loss 189630.000000]
[2024-01-12 17:21:10,475: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:21:10,476: INFO: tpe: TPE using 4/4 trials with best loss 100120.000000]
[2024-01-12 17:21:10,504: INFO: tpe: build_posterior_wrapper took 0.001096 seconds]
[2024-01-12 17:21:10,506: INFO: tpe: TPE using 5/5 trials with best loss 100120.000000]
[2024-01-12 17:21:10,533: INFO: tpe: build_posterior_wrapper took 0.001891 seconds]
[2024-01-12 17:21:10,534: INFO: tpe: TPE using 6/6 trials with best loss 100120.000000]
[2024-01-12 17:21:10,579: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:21:10,580: INFO: tpe: TPE using 7/7 trials with best loss 100120.000000]
[2024-01-12 17:21:10,610: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:10,611: INFO: tpe: TPE using 8/8 trials with best loss 84880.000000]
[2024-01-12 17:21:10,645: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:21:10,645: INFO: tpe: TPE using 9/9 trials with best loss 81170.000000]
[2024-01-12 17:21:10,737: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:21:14,231: INFO: tpe: build_posterior_wrapper took 0.001075 seconds]
[2024-01-12 17:21:14,232: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:21:14,271: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:21:14,271: INFO: tpe: TPE using 1/1 trials with best loss 111710.000000]
[2024-01-12 17:21:14,303: INFO: tpe: build_posterior_wrapper took 0.000981 seconds]
[2024-01-12 17:21:14,304: INFO: tpe: TPE using 2/2 trials with best loss 109220.000000]
[2024-01-12 17:21:14,341: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:21:14,341: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 17:21:14,367: INFO: tpe: build_posterior_wrapper took 0.000986 seconds]
[2024-01-12 17:21:14,369: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 17:21:14,896: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:14,897: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 17:21:14,922: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:21:14,922: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 17:21:14,949: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 17:21:14,950: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:21:14,989: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:21:14,990: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:21:15,559: INFO: tpe: build_posterior_wrapper took 0.001026 seconds]
[2024-01-12 17:21:15,560: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:21:58,497: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:21:58,504: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:21:58,520: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:21:58,530: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:21:58,531: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:21:58,640: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:21:58,646: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:21:59,293: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:59,293: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:21:59,350: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:59,350: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 17:21:59,411: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:59,411: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:21:59,467: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:21:59,467: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:21:59,531: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:59,531: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:21:59,595: INFO: tpe: build_posterior_wrapper took 0.000989 seconds]
[2024-01-12 17:21:59,595: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:21:59,653: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:59,653: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:21:59,715: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:59,716: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:21:59,778: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:21:59,778: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:21:59,836: INFO: tpe: build_posterior_wrapper took 0.001013 seconds]
[2024-01-12 17:21:59,836: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:21:59,925: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:22:00,214: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:22:00,215: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:22:00,238: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:22:00,239: INFO: tpe: TPE using 1/1 trials with best loss 82660.000000]
[2024-01-12 17:22:00,277: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:22:00,279: INFO: tpe: TPE using 2/2 trials with best loss 82660.000000]
[2024-01-12 17:22:00,300: INFO: tpe: build_posterior_wrapper took 0.000994 seconds]
[2024-01-12 17:22:00,300: INFO: tpe: TPE using 3/3 trials with best loss 82660.000000]
[2024-01-12 17:22:00,319: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:22:00,320: INFO: tpe: TPE using 4/4 trials with best loss 82660.000000]
[2024-01-12 17:22:00,348: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:22:00,349: INFO: tpe: TPE using 5/5 trials with best loss 73590.000000]
[2024-01-12 17:22:00,427: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:22:00,428: INFO: tpe: TPE using 6/6 trials with best loss 73590.000000]
[2024-01-12 17:22:00,450: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:22:00,451: INFO: tpe: TPE using 7/7 trials with best loss 73590.000000]
[2024-01-12 17:22:00,477: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 17:22:00,479: INFO: tpe: TPE using 8/8 trials with best loss 73590.000000]
[2024-01-12 17:22:00,513: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:22:00,514: INFO: tpe: TPE using 9/9 trials with best loss 73590.000000]
[2024-01-12 17:22:00,555: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:22:04,449: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:22:04,449: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:22:04,475: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:22:04,475: INFO: tpe: TPE using 1/1 trials with best loss 109220.000000]
[2024-01-12 17:22:04,580: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 17:22:04,581: INFO: tpe: TPE using 2/2 trials with best loss 109220.000000]
[2024-01-12 17:22:05,063: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:22:05,064: INFO: tpe: TPE using 3/3 trials with best loss 109220.000000]
[2024-01-12 17:22:05,091: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:22:05,092: INFO: tpe: TPE using 4/4 trials with best loss 109220.000000]
[2024-01-12 17:22:05,629: INFO: tpe: build_posterior_wrapper took 0.000948 seconds]
[2024-01-12 17:22:05,630: INFO: tpe: TPE using 5/5 trials with best loss 109220.000000]
[2024-01-12 17:22:06,207: INFO: tpe: build_posterior_wrapper took 0.001007 seconds]
[2024-01-12 17:22:06,209: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 17:22:06,231: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 17:22:06,233: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 17:22:06,325: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:22:06,326: INFO: tpe: TPE using 8/8 trials with best loss 96230.000000]
[2024-01-12 17:22:06,882: INFO: tpe: build_posterior_wrapper took 0.001041 seconds]
[2024-01-12 17:22:06,882: INFO: tpe: TPE using 9/9 trials with best loss 96230.000000]
[2024-01-12 17:22:07,409: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:33:48,116: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:33:48,122: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:33:48,144: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:33:48,166: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:33:48,167: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:33:48,357: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:33:48,362: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:33:49,308: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:49,308: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:33:49,435: INFO: tpe: build_posterior_wrapper took 0.000981 seconds]
[2024-01-12 17:33:49,435: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:33:49,546: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:49,547: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:33:49,627: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:49,628: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:33:49,709: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:49,709: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:33:49,844: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:49,845: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:33:49,977: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:49,978: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:33:50,099: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:50,100: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:33:50,201: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:33:50,201: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:33:50,298: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:50,299: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:33:50,403: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:33:50,718: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:33:50,718: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:33:50,767: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:33:50,767: INFO: tpe: TPE using 1/1 trials with best loss 123800.000000]
[2024-01-12 17:33:50,813: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:33:50,814: INFO: tpe: TPE using 2/2 trials with best loss 79310.000000]
[2024-01-12 17:33:50,840: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 17:33:50,841: INFO: tpe: TPE using 3/3 trials with best loss 79310.000000]
[2024-01-12 17:33:50,874: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 17:33:50,876: INFO: tpe: TPE using 4/4 trials with best loss 79310.000000]
[2024-01-12 17:33:50,901: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:33:50,902: INFO: tpe: TPE using 5/5 trials with best loss 79310.000000]
[2024-01-12 17:33:50,944: INFO: tpe: build_posterior_wrapper took 0.000991 seconds]
[2024-01-12 17:33:50,945: INFO: tpe: TPE using 6/6 trials with best loss 79310.000000]
[2024-01-12 17:33:50,976: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:33:50,977: INFO: tpe: TPE using 7/7 trials with best loss 74470.000000]
[2024-01-12 17:33:51,069: INFO: tpe: build_posterior_wrapper took 0.001922 seconds]
[2024-01-12 17:33:51,070: INFO: tpe: TPE using 8/8 trials with best loss 74470.000000]
[2024-01-12 17:33:51,127: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:33:51,128: INFO: tpe: TPE using 9/9 trials with best loss 74470.000000]
[2024-01-12 17:33:51,179: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:33:54,772: INFO: tpe: build_posterior_wrapper took 0.000910 seconds]
[2024-01-12 17:33:54,773: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:33:54,821: INFO: tpe: build_posterior_wrapper took 0.002996 seconds]
[2024-01-12 17:33:54,822: INFO: tpe: TPE using 1/1 trials with best loss 96220.000000]
[2024-01-12 17:33:55,536: INFO: tpe: build_posterior_wrapper took 0.001026 seconds]
[2024-01-12 17:33:55,536: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 17:33:56,253: INFO: tpe: build_posterior_wrapper took 0.001028 seconds]
[2024-01-12 17:33:56,254: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 17:33:56,946: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:33:56,947: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 17:33:56,996: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 17:33:56,997: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 17:33:57,140: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:33:57,140: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 17:33:57,170: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:33:57,173: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:33:57,223: INFO: tpe: build_posterior_wrapper took 0.002015 seconds]
[2024-01-12 17:33:57,224: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:33:57,367: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 17:33:57,367: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:39:46,033: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:39:46,042: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:39:46,059: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:39:46,077: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:39:46,077: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:39:46,222: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:39:46,228: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:39:48,690: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 17:39:48,690: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:39:48,946: INFO: tpe: build_posterior_wrapper took 0.001038 seconds]
[2024-01-12 17:39:48,947: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 17:39:49,087: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:39:49,088: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:39:49,176: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:39:49,176: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:39:49,270: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:39:49,271: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:39:49,368: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:39:49,369: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:39:49,454: INFO: tpe: build_posterior_wrapper took 0.001006 seconds]
[2024-01-12 17:39:49,455: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:39:49,569: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:39:49,570: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:39:49,667: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 17:39:49,667: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:39:49,867: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:39:49,868: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:39:50,068: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:39:50,598: INFO: tpe: build_posterior_wrapper took 0.000991 seconds]
[2024-01-12 17:39:50,599: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:39:50,651: INFO: tpe: build_posterior_wrapper took 0.000967 seconds]
[2024-01-12 17:39:50,652: INFO: tpe: TPE using 1/1 trials with best loss 113140.000000]
[2024-01-12 17:39:50,687: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 17:39:50,688: INFO: tpe: TPE using 2/2 trials with best loss 53640.000000]
[2024-01-12 17:39:50,770: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:39:50,771: INFO: tpe: TPE using 3/3 trials with best loss 53640.000000]
[2024-01-12 17:39:50,803: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:39:50,804: INFO: tpe: TPE using 4/4 trials with best loss 53640.000000]
[2024-01-12 17:39:50,836: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:39:50,836: INFO: tpe: TPE using 5/5 trials with best loss 53640.000000]
[2024-01-12 17:39:50,915: INFO: tpe: build_posterior_wrapper took 0.000883 seconds]
[2024-01-12 17:39:50,916: INFO: tpe: TPE using 6/6 trials with best loss 53640.000000]
[2024-01-12 17:39:50,943: INFO: tpe: build_posterior_wrapper took 0.001024 seconds]
[2024-01-12 17:39:50,944: INFO: tpe: TPE using 7/7 trials with best loss 53640.000000]
[2024-01-12 17:39:51,004: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:39:51,005: INFO: tpe: TPE using 8/8 trials with best loss 53640.000000]
[2024-01-12 17:39:51,071: INFO: tpe: build_posterior_wrapper took 0.000904 seconds]
[2024-01-12 17:39:51,072: INFO: tpe: TPE using 9/9 trials with best loss 53640.000000]
[2024-01-12 17:39:51,160: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:39:56,605: INFO: tpe: build_posterior_wrapper took 0.001984 seconds]
[2024-01-12 17:39:56,605: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:39:57,430: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 17:39:57,433: INFO: tpe: TPE using 1/1 trials with best loss 109220.000000]
[2024-01-12 17:39:57,535: INFO: tpe: build_posterior_wrapper took 0.004014 seconds]
[2024-01-12 17:39:57,538: INFO: tpe: TPE using 2/2 trials with best loss 109220.000000]
[2024-01-12 17:39:57,597: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:39:57,598: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 17:39:57,743: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 17:39:57,744: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 17:39:57,791: INFO: tpe: build_posterior_wrapper took 0.003001 seconds]
[2024-01-12 17:39:57,793: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 17:39:58,549: INFO: tpe: build_posterior_wrapper took 0.001048 seconds]
[2024-01-12 17:39:58,550: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 17:39:59,245: INFO: tpe: build_posterior_wrapper took 0.001050 seconds]
[2024-01-12 17:39:59,245: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:39:59,384: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 17:39:59,384: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:40:00,055: INFO: tpe: build_posterior_wrapper took 0.000946 seconds]
[2024-01-12 17:40:00,056: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:40:58,864: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:40:58,870: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:40:58,891: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:40:58,913: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:40:58,915: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:40:59,076: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:40:59,086: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:41:01,014: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:41:01,015: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:41:01,295: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 17:41:01,295: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:41:01,565: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:41:01,566: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 17:41:01,851: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:41:01,852: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:41:02,001: INFO: tpe: build_posterior_wrapper took 0.001104 seconds]
[2024-01-12 17:41:02,002: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:41:02,299: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:41:02,300: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:41:02,466: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:41:02,467: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:41:02,731: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:41:02,732: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:41:03,014: INFO: tpe: build_posterior_wrapper took 0.001011 seconds]
[2024-01-12 17:41:03,015: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:41:03,186: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:41:03,186: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:41:03,302: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:41:03,864: INFO: tpe: build_posterior_wrapper took 0.002639 seconds]
[2024-01-12 17:41:03,864: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:41:03,921: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 17:41:03,922: INFO: tpe: TPE using 1/1 trials with best loss 375500.000000]
[2024-01-12 17:41:03,985: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 17:41:03,987: INFO: tpe: TPE using 2/2 trials with best loss 88000.000000]
[2024-01-12 17:41:04,078: INFO: tpe: build_posterior_wrapper took 0.001005 seconds]
[2024-01-12 17:41:04,080: INFO: tpe: TPE using 3/3 trials with best loss 88000.000000]
[2024-01-12 17:41:04,121: INFO: tpe: build_posterior_wrapper took 0.001995 seconds]
[2024-01-12 17:41:04,122: INFO: tpe: TPE using 4/4 trials with best loss 77920.000000]
[2024-01-12 17:41:04,173: INFO: tpe: build_posterior_wrapper took 0.001011 seconds]
[2024-01-12 17:41:04,174: INFO: tpe: TPE using 5/5 trials with best loss 77920.000000]
[2024-01-12 17:41:04,240: INFO: tpe: build_posterior_wrapper took 0.001021 seconds]
[2024-01-12 17:41:04,242: INFO: tpe: TPE using 6/6 trials with best loss 77920.000000]
[2024-01-12 17:41:04,305: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 17:41:04,306: INFO: tpe: TPE using 7/7 trials with best loss 77920.000000]
[2024-01-12 17:41:04,471: INFO: tpe: build_posterior_wrapper took 0.000991 seconds]
[2024-01-12 17:41:04,472: INFO: tpe: TPE using 8/8 trials with best loss 77920.000000]
[2024-01-12 17:41:04,543: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:41:04,544: INFO: tpe: TPE using 9/9 trials with best loss 77920.000000]
[2024-01-12 17:41:04,587: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:41:09,122: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 17:41:09,123: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:41:09,833: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 17:41:09,833: INFO: tpe: TPE using 1/1 trials with best loss 112730.000000]
[2024-01-12 17:41:09,874: INFO: tpe: build_posterior_wrapper took 0.002023 seconds]
[2024-01-12 17:41:09,875: INFO: tpe: TPE using 2/2 trials with best loss 112730.000000]
[2024-01-12 17:41:09,918: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:41:09,918: INFO: tpe: TPE using 3/3 trials with best loss 112730.000000]
[2024-01-12 17:41:09,962: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:41:09,963: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 17:41:10,675: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:41:10,676: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 17:41:11,388: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:41:11,389: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 17:41:11,512: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:41:11,513: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:41:11,559: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:41:11,560: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:41:12,245: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:41:12,247: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:41:12,330: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:43:46,226: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:43:46,236: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:43:46,251: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:43:46,269: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:43:46,271: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:43:46,413: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:43:46,420: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:43:47,762: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:43:47,762: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:43:47,894: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:43:47,894: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:43:48,025: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:43:48,025: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:43:48,137: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:43:48,137: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:43:48,281: INFO: tpe: build_posterior_wrapper took 0.001016 seconds]
[2024-01-12 17:43:48,281: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:43:48,403: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:43:48,403: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:43:48,541: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:43:48,542: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:43:48,669: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:43:48,670: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:43:48,815: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:43:48,816: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:43:49,026: INFO: tpe: build_posterior_wrapper took 0.000994 seconds]
[2024-01-12 17:43:49,027: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:43:49,164: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:43:49,603: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:43:49,604: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:43:49,635: INFO: tpe: build_posterior_wrapper took 0.000950 seconds]
[2024-01-12 17:43:49,636: INFO: tpe: TPE using 1/1 trials with best loss 312250.000000]
[2024-01-12 17:43:49,681: INFO: tpe: build_posterior_wrapper took 0.000980 seconds]
[2024-01-12 17:43:49,681: INFO: tpe: TPE using 2/2 trials with best loss 225520.000000]
[2024-01-12 17:43:49,762: INFO: tpe: build_posterior_wrapper took 0.000989 seconds]
[2024-01-12 17:43:49,763: INFO: tpe: TPE using 3/3 trials with best loss 114240.000000]
[2024-01-12 17:43:49,804: INFO: tpe: build_posterior_wrapper took 0.001080 seconds]
[2024-01-12 17:43:49,806: INFO: tpe: TPE using 4/4 trials with best loss 114240.000000]
[2024-01-12 17:43:49,872: INFO: tpe: build_posterior_wrapper took 0.001023 seconds]
[2024-01-12 17:43:49,873: INFO: tpe: TPE using 5/5 trials with best loss 114240.000000]
[2024-01-12 17:43:49,948: INFO: tpe: build_posterior_wrapper took 0.001088 seconds]
[2024-01-12 17:43:49,949: INFO: tpe: TPE using 6/6 trials with best loss 112060.000000]
[2024-01-12 17:43:50,011: INFO: tpe: build_posterior_wrapper took 0.000922 seconds]
[2024-01-12 17:43:50,012: INFO: tpe: TPE using 7/7 trials with best loss 112060.000000]
[2024-01-12 17:43:50,092: INFO: tpe: build_posterior_wrapper took 0.000994 seconds]
[2024-01-12 17:43:50,093: INFO: tpe: TPE using 8/8 trials with best loss 112060.000000]
[2024-01-12 17:43:50,160: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 17:43:50,161: INFO: tpe: TPE using 9/9 trials with best loss 112060.000000]
[2024-01-12 17:43:50,215: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:43:55,389: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 17:43:55,390: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:43:56,019: INFO: tpe: build_posterior_wrapper took 0.002080 seconds]
[2024-01-12 17:43:56,020: INFO: tpe: TPE using 1/1 trials with best loss 144690.000000]
[2024-01-12 17:43:56,159: INFO: tpe: build_posterior_wrapper took 0.000981 seconds]
[2024-01-12 17:43:56,159: INFO: tpe: TPE using 2/2 trials with best loss 112730.000000]
[2024-01-12 17:43:56,853: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:43:56,854: INFO: tpe: TPE using 3/3 trials with best loss 110230.000000]
[2024-01-12 17:43:56,983: INFO: tpe: build_posterior_wrapper took 0.000994 seconds]
[2024-01-12 17:43:56,984: INFO: tpe: TPE using 4/4 trials with best loss 110230.000000]
[2024-01-12 17:43:57,717: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:43:57,718: INFO: tpe: TPE using 5/5 trials with best loss 110230.000000]
[2024-01-12 17:43:57,759: INFO: tpe: build_posterior_wrapper took 0.001999 seconds]
[2024-01-12 17:43:57,759: INFO: tpe: TPE using 6/6 trials with best loss 110230.000000]
[2024-01-12 17:43:57,876: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:43:57,877: INFO: tpe: TPE using 7/7 trials with best loss 110230.000000]
[2024-01-12 17:43:58,560: INFO: tpe: build_posterior_wrapper took 0.001005 seconds]
[2024-01-12 17:43:58,561: INFO: tpe: TPE using 8/8 trials with best loss 110230.000000]
[2024-01-12 17:43:58,679: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:43:58,680: INFO: tpe: TPE using 9/9 trials with best loss 110230.000000]
[2024-01-12 17:43:58,754: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:44:24,715: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:44:24,721: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:44:24,738: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:44:24,752: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:44:24,754: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:44:24,891: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:44:24,897: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:44:26,530: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:44:26,531: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:44:26,624: INFO: tpe: build_posterior_wrapper took 0.001005 seconds]
[2024-01-12 17:44:26,624: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:44:26,709: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:44:26,710: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 17:44:26,796: INFO: tpe: build_posterior_wrapper took 0.000971 seconds]
[2024-01-12 17:44:26,796: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:44:26,906: INFO: tpe: build_posterior_wrapper took 0.000984 seconds]
[2024-01-12 17:44:26,906: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:44:27,015: INFO: tpe: build_posterior_wrapper took 0.000974 seconds]
[2024-01-12 17:44:27,016: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:44:27,156: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 17:44:27,157: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:44:27,239: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:44:27,240: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:44:27,342: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:44:27,342: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:44:27,454: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:44:27,455: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:44:27,616: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:44:28,013: INFO: tpe: build_posterior_wrapper took 0.000948 seconds]
[2024-01-12 17:44:28,014: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:44:28,046: INFO: tpe: build_posterior_wrapper took 0.000978 seconds]
[2024-01-12 17:44:28,047: INFO: tpe: TPE using 1/1 trials with best loss 183720.000000]
[2024-01-12 17:44:28,096: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:44:28,097: INFO: tpe: TPE using 2/2 trials with best loss 183720.000000]
[2024-01-12 17:44:28,175: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:44:28,175: INFO: tpe: TPE using 3/3 trials with best loss 90620.000000]
[2024-01-12 17:44:28,249: INFO: tpe: build_posterior_wrapper took 0.001991 seconds]
[2024-01-12 17:44:28,250: INFO: tpe: TPE using 4/4 trials with best loss 90620.000000]
[2024-01-12 17:44:28,282: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:44:28,285: INFO: tpe: TPE using 5/5 trials with best loss 90620.000000]
[2024-01-12 17:44:28,328: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:44:28,329: INFO: tpe: TPE using 6/6 trials with best loss 90620.000000]
[2024-01-12 17:44:28,358: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 17:44:28,358: INFO: tpe: TPE using 7/7 trials with best loss 79200.000000]
[2024-01-12 17:44:28,413: INFO: tpe: build_posterior_wrapper took 0.000919 seconds]
[2024-01-12 17:44:28,414: INFO: tpe: TPE using 8/8 trials with best loss 79200.000000]
[2024-01-12 17:44:28,448: INFO: tpe: build_posterior_wrapper took 0.001095 seconds]
[2024-01-12 17:44:28,449: INFO: tpe: TPE using 9/9 trials with best loss 79200.000000]
[2024-01-12 17:44:28,488: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:44:33,680: INFO: tpe: build_posterior_wrapper took 0.001085 seconds]
[2024-01-12 17:44:33,681: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:44:33,737: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:44:33,738: INFO: tpe: TPE using 1/1 trials with best loss 96220.000000]
[2024-01-12 17:44:33,872: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:44:33,873: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 17:44:34,718: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:44:34,719: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 17:44:34,766: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 17:44:34,767: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 17:44:34,896: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:44:34,896: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 17:44:35,606: INFO: tpe: build_posterior_wrapper took 0.002005 seconds]
[2024-01-12 17:44:35,606: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 17:44:36,388: INFO: tpe: build_posterior_wrapper took 0.002170 seconds]
[2024-01-12 17:44:36,389: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:44:37,073: INFO: tpe: build_posterior_wrapper took 0.000970 seconds]
[2024-01-12 17:44:37,074: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:44:37,252: INFO: tpe: build_posterior_wrapper took 0.002016 seconds]
[2024-01-12 17:44:37,252: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:44:37,974: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:47:28,090: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:47:28,101: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:47:28,126: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:47:28,160: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:47:28,163: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:47:28,337: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:47:28,342: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:47:29,553: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:47:29,553: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:47:29,679: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:29,680: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:47:29,819: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 17:47:29,819: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:47:29,930: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:29,931: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:47:30,069: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:30,070: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:47:30,196: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:30,197: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:47:30,318: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:30,319: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:47:30,442: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:30,443: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:47:30,571: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:30,572: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:47:30,710: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 17:47:30,710: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:47:30,854: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:47:31,324: INFO: tpe: build_posterior_wrapper took 0.002048 seconds]
[2024-01-12 17:47:31,326: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:47:31,443: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 17:47:31,444: INFO: tpe: TPE using 1/1 trials with best loss 39040.000000]
[2024-01-12 17:47:31,523: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:31,524: INFO: tpe: TPE using 2/2 trials with best loss 39040.000000]
[2024-01-12 17:47:31,540: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 17:47:31,541: INFO: tpe: TPE using 3/3 trials with best loss 39040.000000]
[2024-01-12 17:47:31,582: INFO: tpe: build_posterior_wrapper took 0.000951 seconds]
[2024-01-12 17:47:31,582: INFO: tpe: TPE using 4/4 trials with best loss 39040.000000]
[2024-01-12 17:47:31,631: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:47:31,633: INFO: tpe: TPE using 5/5 trials with best loss 39040.000000]
[2024-01-12 17:47:31,684: INFO: tpe: build_posterior_wrapper took 0.000989 seconds]
[2024-01-12 17:47:31,685: INFO: tpe: TPE using 6/6 trials with best loss 5670.000000]
[2024-01-12 17:47:31,717: INFO: tpe: build_posterior_wrapper took 0.000945 seconds]
[2024-01-12 17:47:31,718: INFO: tpe: TPE using 7/7 trials with best loss 5670.000000]
[2024-01-12 17:47:31,748: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 17:47:31,749: INFO: tpe: TPE using 8/8 trials with best loss 5670.000000]
[2024-01-12 17:47:31,810: INFO: tpe: build_posterior_wrapper took 0.001074 seconds]
[2024-01-12 17:47:31,811: INFO: tpe: TPE using 9/9 trials with best loss 5670.000000]
[2024-01-12 17:47:31,851: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:47:36,536: INFO: tpe: build_posterior_wrapper took 0.002495 seconds]
[2024-01-12 17:47:36,537: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:47:36,580: INFO: tpe: build_posterior_wrapper took 0.001588 seconds]
[2024-01-12 17:47:36,580: INFO: tpe: TPE using 1/1 trials with best loss 144690.000000]
[2024-01-12 17:47:36,707: INFO: tpe: build_posterior_wrapper took 0.000978 seconds]
[2024-01-12 17:47:36,708: INFO: tpe: TPE using 2/2 trials with best loss 96230.000000]
[2024-01-12 17:47:37,331: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:47:37,331: INFO: tpe: TPE using 3/3 trials with best loss 96230.000000]
[2024-01-12 17:47:37,445: INFO: tpe: build_posterior_wrapper took 0.000994 seconds]
[2024-01-12 17:47:37,446: INFO: tpe: TPE using 4/4 trials with best loss 96230.000000]
[2024-01-12 17:47:37,565: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:47:37,566: INFO: tpe: TPE using 5/5 trials with best loss 96230.000000]
[2024-01-12 17:47:37,604: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 17:47:37,605: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 17:47:37,650: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 17:47:37,652: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:47:37,781: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:47:37,782: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:47:37,923: INFO: tpe: build_posterior_wrapper took 0.002002 seconds]
[2024-01-12 17:47:37,923: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:47:38,091: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:54:31,768: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:54:31,775: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:54:31,796: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:54:31,814: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:54:31,815: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:54:31,958: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:54:31,965: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:54:33,678: INFO: tpe: build_posterior_wrapper took 0.002012 seconds]
[2024-01-12 17:54:33,678: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:54:34,010: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:34,011: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:54:34,292: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 17:54:34,293: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 17:54:34,510: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 17:54:34,510: INFO: tpe: TPE using 3/3 trials with best loss 443680.000000]
[2024-01-12 17:54:34,603: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:34,603: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:54:34,697: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:34,698: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:54:34,790: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:34,791: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:54:34,877: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:34,878: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:54:34,954: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:34,955: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:54:35,059: INFO: tpe: build_posterior_wrapper took 0.000983 seconds]
[2024-01-12 17:54:35,059: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:54:35,173: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:54:35,537: INFO: tpe: build_posterior_wrapper took 0.000989 seconds]
[2024-01-12 17:54:35,539: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:54:35,588: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 17:54:35,589: INFO: tpe: TPE using 1/1 trials with best loss 162930.000000]
[2024-01-12 17:54:35,625: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 17:54:35,626: INFO: tpe: TPE using 2/2 trials with best loss 162930.000000]
[2024-01-12 17:54:35,715: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:35,716: INFO: tpe: TPE using 3/3 trials with best loss 73320.000000]
[2024-01-12 17:54:35,778: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 17:54:35,779: INFO: tpe: TPE using 4/4 trials with best loss 22080.000000]
[2024-01-12 17:54:35,825: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:54:35,826: INFO: tpe: TPE using 5/5 trials with best loss 22080.000000]
[2024-01-12 17:54:35,854: INFO: tpe: build_posterior_wrapper took 0.000986 seconds]
[2024-01-12 17:54:35,854: INFO: tpe: TPE using 6/6 trials with best loss 22080.000000]
[2024-01-12 17:54:35,949: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:35,950: INFO: tpe: TPE using 7/7 trials with best loss 22080.000000]
[2024-01-12 17:54:35,999: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:54:36,001: INFO: tpe: TPE using 8/8 trials with best loss 22080.000000]
[2024-01-12 17:54:36,028: INFO: tpe: build_posterior_wrapper took 0.001016 seconds]
[2024-01-12 17:54:36,029: INFO: tpe: TPE using 9/9 trials with best loss 22080.000000]
[2024-01-12 17:54:36,079: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:54:41,006: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:54:41,007: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:54:41,129: INFO: tpe: build_posterior_wrapper took 0.001016 seconds]
[2024-01-12 17:54:41,129: INFO: tpe: TPE using 1/1 trials with best loss 145700.000000]
[2024-01-12 17:54:41,771: INFO: tpe: build_posterior_wrapper took 0.001986 seconds]
[2024-01-12 17:54:41,771: INFO: tpe: TPE using 2/2 trials with best loss 144690.000000]
[2024-01-12 17:54:42,438: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 17:54:42,439: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 17:54:43,131: INFO: tpe: build_posterior_wrapper took 0.001022 seconds]
[2024-01-12 17:54:43,132: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 17:54:43,839: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:54:43,839: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 17:54:44,011: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 17:54:44,011: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 17:54:44,058: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:54:44,059: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 17:54:44,776: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:54:44,777: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:54:44,833: INFO: tpe: build_posterior_wrapper took 0.001990 seconds]
[2024-01-12 17:54:44,834: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:55:55,283: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:55:55,292: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:55:55,315: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:55:55,343: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:55:55,345: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:55:55,494: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:55:55,500: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:55:57,859: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 17:55:57,860: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:55:58,145: INFO: tpe: build_posterior_wrapper took 0.001033 seconds]
[2024-01-12 17:55:58,146: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:55:58,427: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:55:58,427: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:55:58,726: INFO: tpe: build_posterior_wrapper took 0.001031 seconds]
[2024-01-12 17:55:58,727: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:55:59,017: INFO: tpe: build_posterior_wrapper took 0.001012 seconds]
[2024-01-12 17:55:59,018: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:55:59,174: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 17:55:59,174: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:55:59,328: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:55:59,329: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:55:59,506: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 17:55:59,507: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:55:59,665: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:55:59,666: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:55:59,824: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:55:59,824: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:55:59,962: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:56:00,374: INFO: tpe: build_posterior_wrapper took 0.001097 seconds]
[2024-01-12 17:56:00,375: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:56:00,424: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 17:56:00,426: INFO: tpe: TPE using 1/1 trials with best loss 364580.000000]
[2024-01-12 17:56:00,468: INFO: tpe: build_posterior_wrapper took 0.000990 seconds]
[2024-01-12 17:56:00,469: INFO: tpe: TPE using 2/2 trials with best loss 209420.000000]
[2024-01-12 17:56:00,510: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:56:00,512: INFO: tpe: TPE using 3/3 trials with best loss 194360.000000]
[2024-01-12 17:56:00,561: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:56:00,562: INFO: tpe: TPE using 4/4 trials with best loss 194360.000000]
[2024-01-12 17:56:00,603: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:56:00,604: INFO: tpe: TPE using 5/5 trials with best loss 49870.000000]
[2024-01-12 17:56:00,687: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:56:00,688: INFO: tpe: TPE using 6/6 trials with best loss 49870.000000]
[2024-01-12 17:56:00,756: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 17:56:00,758: INFO: tpe: TPE using 7/7 trials with best loss 49870.000000]
[2024-01-12 17:56:00,811: INFO: tpe: build_posterior_wrapper took 0.001968 seconds]
[2024-01-12 17:56:00,812: INFO: tpe: TPE using 8/8 trials with best loss 49870.000000]
[2024-01-12 17:56:00,848: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:56:00,849: INFO: tpe: TPE using 9/9 trials with best loss 49870.000000]
[2024-01-12 17:56:00,921: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:56:05,053: INFO: tpe: build_posterior_wrapper took 0.002002 seconds]
[2024-01-12 17:56:05,053: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:56:05,807: INFO: tpe: build_posterior_wrapper took 0.000950 seconds]
[2024-01-12 17:56:05,807: INFO: tpe: TPE using 1/1 trials with best loss 96230.000000]
[2024-01-12 17:56:06,576: INFO: tpe: build_posterior_wrapper took 0.001991 seconds]
[2024-01-12 17:56:06,576: INFO: tpe: TPE using 2/2 trials with best loss 96230.000000]
[2024-01-12 17:56:06,622: INFO: tpe: build_posterior_wrapper took 0.002003 seconds]
[2024-01-12 17:56:06,623: INFO: tpe: TPE using 3/3 trials with best loss 96230.000000]
[2024-01-12 17:56:06,665: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:56:06,665: INFO: tpe: TPE using 4/4 trials with best loss 96230.000000]
[2024-01-12 17:56:07,377: INFO: tpe: build_posterior_wrapper took 0.000922 seconds]
[2024-01-12 17:56:07,377: INFO: tpe: TPE using 5/5 trials with best loss 96230.000000]
[2024-01-12 17:56:07,415: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:56:07,415: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 17:56:07,552: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:56:07,553: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 17:56:07,602: INFO: tpe: build_posterior_wrapper took 0.001999 seconds]
[2024-01-12 17:56:07,602: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 17:56:08,268: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 17:56:08,269: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 17:57:27,199: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:57:27,210: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:57:27,228: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:57:27,251: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:57:27,253: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:57:27,400: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:57:27,411: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:57:28,651: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 17:57:28,651: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:57:28,791: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 17:57:28,791: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 17:57:28,928: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:57:28,928: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:57:29,048: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 17:57:29,049: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:57:29,169: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:57:29,170: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:57:29,288: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:57:29,288: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:57:29,396: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:57:29,397: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:57:29,513: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:57:29,514: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:57:29,656: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:57:29,656: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:57:29,810: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:57:29,810: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:57:29,940: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:57:30,376: INFO: tpe: build_posterior_wrapper took 0.000976 seconds]
[2024-01-12 17:57:30,377: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:57:30,413: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:57:30,414: INFO: tpe: TPE using 1/1 trials with best loss 205930.000000]
[2024-01-12 17:57:30,449: INFO: tpe: build_posterior_wrapper took 0.000978 seconds]
[2024-01-12 17:57:30,450: INFO: tpe: TPE using 2/2 trials with best loss 205930.000000]
[2024-01-12 17:57:30,493: INFO: tpe: build_posterior_wrapper took 0.001992 seconds]
[2024-01-12 17:57:30,493: INFO: tpe: TPE using 3/3 trials with best loss 205930.000000]
[2024-01-12 17:57:30,523: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:57:30,525: INFO: tpe: TPE using 4/4 trials with best loss 175430.000000]
[2024-01-12 17:57:30,553: INFO: tpe: build_posterior_wrapper took 0.001045 seconds]
[2024-01-12 17:57:30,555: INFO: tpe: TPE using 5/5 trials with best loss 159900.000000]
[2024-01-12 17:57:30,664: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:57:30,666: INFO: tpe: TPE using 6/6 trials with best loss 159900.000000]
[2024-01-12 17:57:30,707: INFO: tpe: build_posterior_wrapper took 0.001084 seconds]
[2024-01-12 17:57:30,709: INFO: tpe: TPE using 7/7 trials with best loss 159900.000000]
[2024-01-12 17:57:30,754: INFO: tpe: build_posterior_wrapper took 0.001993 seconds]
[2024-01-12 17:57:30,755: INFO: tpe: TPE using 8/8 trials with best loss 82230.000000]
[2024-01-12 17:57:30,796: INFO: tpe: build_posterior_wrapper took 0.001084 seconds]
[2024-01-12 17:57:30,797: INFO: tpe: TPE using 9/9 trials with best loss 82230.000000]
[2024-01-12 17:57:30,898: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:57:33,618: INFO: tpe: build_posterior_wrapper took 0.001997 seconds]
[2024-01-12 17:57:33,618: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:57:34,373: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:57:34,374: INFO: tpe: TPE using 1/1 trials with best loss 110230.000000]
[2024-01-12 17:57:35,091: INFO: tpe: build_posterior_wrapper took 0.000942 seconds]
[2024-01-12 17:57:35,092: INFO: tpe: TPE using 2/2 trials with best loss 110230.000000]
[2024-01-12 17:57:35,137: INFO: tpe: build_posterior_wrapper took 0.002004 seconds]
[2024-01-12 17:57:35,139: INFO: tpe: TPE using 3/3 trials with best loss 110230.000000]
[2024-01-12 17:57:35,197: INFO: tpe: build_posterior_wrapper took 0.002740 seconds]
[2024-01-12 17:57:35,199: INFO: tpe: TPE using 4/4 trials with best loss 110230.000000]
[2024-01-12 17:57:35,255: INFO: tpe: build_posterior_wrapper took 0.001015 seconds]
[2024-01-12 17:57:35,256: INFO: tpe: TPE using 5/5 trials with best loss 110230.000000]
[2024-01-12 17:57:35,938: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:57:35,939: INFO: tpe: TPE using 6/6 trials with best loss 110230.000000]
[2024-01-12 17:57:36,624: INFO: tpe: build_posterior_wrapper took 0.000902 seconds]
[2024-01-12 17:57:36,625: INFO: tpe: TPE using 7/7 trials with best loss 110230.000000]
[2024-01-12 17:57:36,754: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:57:36,755: INFO: tpe: TPE using 8/8 trials with best loss 110230.000000]
[2024-01-12 17:57:36,879: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 17:57:36,880: INFO: tpe: TPE using 9/9 trials with best loss 110230.000000]
[2024-01-12 17:58:05,901: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 17:58:05,912: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:58:05,927: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:58:05,949: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 17:58:05,951: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 17:58:06,100: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 17:58:06,106: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:58:07,326: INFO: tpe: build_posterior_wrapper took 0.002006 seconds]
[2024-01-12 17:58:07,326: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:58:07,474: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:07,474: INFO: tpe: TPE using 1/1 trials with best loss 437200.000000]
[2024-01-12 17:58:07,616: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:07,617: INFO: tpe: TPE using 2/2 trials with best loss 437200.000000]
[2024-01-12 17:58:07,734: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:07,735: INFO: tpe: TPE using 3/3 trials with best loss 437200.000000]
[2024-01-12 17:58:07,869: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:07,870: INFO: tpe: TPE using 4/4 trials with best loss 437200.000000]
[2024-01-12 17:58:08,037: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:08,038: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 17:58:08,276: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:08,276: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 17:58:08,401: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:08,402: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 17:58:08,522: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 17:58:08,522: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 17:58:08,633: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:08,634: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 17:58:08,828: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:58:09,483: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:09,484: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:58:09,529: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 17:58:09,529: INFO: tpe: TPE using 1/1 trials with best loss 107940.000000]
[2024-01-12 17:58:09,594: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:09,595: INFO: tpe: TPE using 2/2 trials with best loss 107940.000000]
[2024-01-12 17:58:09,649: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:58:09,650: INFO: tpe: TPE using 3/3 trials with best loss 93640.000000]
[2024-01-12 17:58:09,679: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 17:58:09,680: INFO: tpe: TPE using 4/4 trials with best loss 93640.000000]
[2024-01-12 17:58:09,744: INFO: tpe: build_posterior_wrapper took 0.000967 seconds]
[2024-01-12 17:58:09,745: INFO: tpe: TPE using 5/5 trials with best loss 93640.000000]
[2024-01-12 17:58:09,802: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 17:58:09,804: INFO: tpe: TPE using 6/6 trials with best loss 93640.000000]
[2024-01-12 17:58:09,833: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:58:09,834: INFO: tpe: TPE using 7/7 trials with best loss 93640.000000]
[2024-01-12 17:58:09,867: INFO: tpe: build_posterior_wrapper took 0.001997 seconds]
[2024-01-12 17:58:09,867: INFO: tpe: TPE using 8/8 trials with best loss 75640.000000]
[2024-01-12 17:58:09,918: INFO: tpe: build_posterior_wrapper took 0.000962 seconds]
[2024-01-12 17:58:09,919: INFO: tpe: TPE using 9/9 trials with best loss 75640.000000]
[2024-01-12 17:58:09,959: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 17:58:13,387: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:58:13,387: INFO: tpe: TPE using 0 trials]
[2024-01-12 17:58:14,017: INFO: tpe: build_posterior_wrapper took 0.001913 seconds]
[2024-01-12 17:58:14,017: INFO: tpe: TPE using 1/1 trials with best loss 144690.000000]
[2024-01-12 17:58:14,674: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:58:14,675: INFO: tpe: TPE using 2/2 trials with best loss 109220.000000]
[2024-01-12 17:58:15,411: INFO: tpe: build_posterior_wrapper took 0.000921 seconds]
[2024-01-12 17:58:15,412: INFO: tpe: TPE using 3/3 trials with best loss 96230.000000]
[2024-01-12 17:58:15,540: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:58:15,541: INFO: tpe: TPE using 4/4 trials with best loss 96230.000000]
[2024-01-12 17:58:16,250: INFO: tpe: build_posterior_wrapper took 0.000992 seconds]
[2024-01-12 17:58:16,251: INFO: tpe: TPE using 5/5 trials with best loss 96230.000000]
[2024-01-12 17:58:16,376: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 17:58:16,377: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 17:58:17,032: INFO: tpe: build_posterior_wrapper took 0.000916 seconds]
[2024-01-12 17:58:17,033: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 17:58:17,162: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 17:58:17,163: INFO: tpe: TPE using 8/8 trials with best loss 96230.000000]
[2024-01-12 17:58:17,284: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 17:58:17,284: INFO: tpe: TPE using 9/9 trials with best loss 96230.000000]
[2024-01-12 17:58:17,439: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:01:21,873: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 18:01:21,880: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:01:21,896: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:01:21,921: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:01:21,922: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 18:01:22,067: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 18:01:22,073: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:01:24,104: INFO: tpe: build_posterior_wrapper took 0.002073 seconds]
[2024-01-12 18:01:24,105: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:01:24,389: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:01:24,390: INFO: tpe: TPE using 1/1 trials with best loss 443680.000000]
[2024-01-12 18:01:24,684: INFO: tpe: build_posterior_wrapper took 0.000921 seconds]
[2024-01-12 18:01:24,685: INFO: tpe: TPE using 2/2 trials with best loss 443680.000000]
[2024-01-12 18:01:24,965: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:01:24,966: INFO: tpe: TPE using 3/3 trials with best loss 443680.000000]
[2024-01-12 18:01:25,133: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:01:25,133: INFO: tpe: TPE using 4/4 trials with best loss 443680.000000]
[2024-01-12 18:01:25,295: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 18:01:25,295: INFO: tpe: TPE using 5/5 trials with best loss 437200.000000]
[2024-01-12 18:01:25,396: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:01:25,397: INFO: tpe: TPE using 6/6 trials with best loss 437200.000000]
[2024-01-12 18:01:25,660: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 18:01:25,661: INFO: tpe: TPE using 7/7 trials with best loss 437200.000000]
[2024-01-12 18:01:25,937: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 18:01:25,938: INFO: tpe: TPE using 8/8 trials with best loss 437200.000000]
[2024-01-12 18:01:26,109: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:01:26,110: INFO: tpe: TPE using 9/9 trials with best loss 437200.000000]
[2024-01-12 18:01:26,415: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:01:26,787: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:01:26,788: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:01:26,837: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:01:26,838: INFO: tpe: TPE using 1/1 trials with best loss 164840.000000]
[2024-01-12 18:01:26,873: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 18:01:26,874: INFO: tpe: TPE using 2/2 trials with best loss 164840.000000]
[2024-01-12 18:01:26,950: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:01:26,951: INFO: tpe: TPE using 3/3 trials with best loss 164840.000000]
[2024-01-12 18:01:26,968: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:01:26,969: INFO: tpe: TPE using 4/4 trials with best loss 82570.000000]
[2024-01-12 18:01:26,990: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:01:26,991: INFO: tpe: TPE using 5/5 trials with best loss 82570.000000]
[2024-01-12 18:01:27,022: INFO: tpe: build_posterior_wrapper took 0.000994 seconds]
[2024-01-12 18:01:27,022: INFO: tpe: TPE using 6/6 trials with best loss 79330.000000]
[2024-01-12 18:01:27,053: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 18:01:27,054: INFO: tpe: TPE using 7/7 trials with best loss 79330.000000]
[2024-01-12 18:01:27,086: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 18:01:27,087: INFO: tpe: TPE using 8/8 trials with best loss 79330.000000]
[2024-01-12 18:01:27,114: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 18:01:27,117: INFO: tpe: TPE using 9/9 trials with best loss 79330.000000]
[2024-01-12 18:01:27,156: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:01:31,479: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 18:01:31,479: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:01:31,599: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 18:01:31,599: INFO: tpe: TPE using 1/1 trials with best loss 145700.000000]
[2024-01-12 18:01:32,246: INFO: tpe: build_posterior_wrapper took 0.000501 seconds]
[2024-01-12 18:01:32,247: INFO: tpe: TPE using 2/2 trials with best loss 111710.000000]
[2024-01-12 18:01:32,919: INFO: tpe: build_posterior_wrapper took 0.000911 seconds]
[2024-01-12 18:01:32,920: INFO: tpe: TPE using 3/3 trials with best loss 111710.000000]
[2024-01-12 18:01:32,967: INFO: tpe: build_posterior_wrapper took 0.001995 seconds]
[2024-01-12 18:01:32,967: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 18:01:33,017: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:01:33,018: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 18:01:33,747: INFO: tpe: build_posterior_wrapper took 0.000923 seconds]
[2024-01-12 18:01:33,747: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 18:01:33,790: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:01:33,791: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 18:01:33,849: INFO: tpe: build_posterior_wrapper took 0.002177 seconds]
[2024-01-12 18:01:33,849: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 18:01:33,979: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 18:01:33,980: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 18:01:34,790: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:06:14,242: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 18:06:14,251: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:06:14,269: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:06:14,297: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:06:14,298: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 18:06:14,452: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 18:06:14,457: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:06:17,870: INFO: tpe: build_posterior_wrapper took 0.000958 seconds]
[2024-01-12 18:06:17,870: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:06:18,215: INFO: tpe: build_posterior_wrapper took 0.000909 seconds]
[2024-01-12 18:06:18,215: INFO: tpe: TPE using 1/1 trials with best loss 7620.000000]
[2024-01-12 18:06:18,550: INFO: tpe: build_posterior_wrapper took 0.000921 seconds]
[2024-01-12 18:06:18,551: INFO: tpe: TPE using 2/2 trials with best loss 7620.000000]
[2024-01-12 18:06:18,896: INFO: tpe: build_posterior_wrapper took 0.000956 seconds]
[2024-01-12 18:06:18,897: INFO: tpe: TPE using 3/3 trials with best loss 7620.000000]
[2024-01-12 18:06:19,243: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:06:19,244: INFO: tpe: TPE using 4/4 trials with best loss 7620.000000]
[2024-01-12 18:06:19,592: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:06:19,592: INFO: tpe: TPE using 5/5 trials with best loss 7620.000000]
[2024-01-12 18:06:19,931: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 18:06:19,933: INFO: tpe: TPE using 6/6 trials with best loss 7620.000000]
[2024-01-12 18:06:20,254: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:06:20,255: INFO: tpe: TPE using 7/7 trials with best loss 7620.000000]
[2024-01-12 18:06:20,595: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:06:20,595: INFO: tpe: TPE using 8/8 trials with best loss 7620.000000]
[2024-01-12 18:06:20,980: INFO: tpe: build_posterior_wrapper took 0.000912 seconds]
[2024-01-12 18:06:20,981: INFO: tpe: TPE using 9/9 trials with best loss 7620.000000]
[2024-01-12 18:06:21,386: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:06:21,871: INFO: tpe: build_posterior_wrapper took 0.000992 seconds]
[2024-01-12 18:06:21,872: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:06:21,925: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:06:21,927: INFO: tpe: TPE using 1/1 trials with best loss 143980.000000]
[2024-01-12 18:06:21,972: INFO: tpe: build_posterior_wrapper took 0.001472 seconds]
[2024-01-12 18:06:21,973: INFO: tpe: TPE using 2/2 trials with best loss 110520.000000]
[2024-01-12 18:06:22,011: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:06:22,013: INFO: tpe: TPE using 3/3 trials with best loss 110520.000000]
[2024-01-12 18:06:22,039: INFO: tpe: build_posterior_wrapper took 0.000990 seconds]
[2024-01-12 18:06:22,040: INFO: tpe: TPE using 4/4 trials with best loss 110520.000000]
[2024-01-12 18:06:22,088: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:06:22,089: INFO: tpe: TPE using 5/5 trials with best loss 55300.000000]
[2024-01-12 18:06:22,127: INFO: tpe: build_posterior_wrapper took 0.000980 seconds]
[2024-01-12 18:06:22,129: INFO: tpe: TPE using 6/6 trials with best loss 55300.000000]
[2024-01-12 18:06:22,157: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:06:22,158: INFO: tpe: TPE using 7/7 trials with best loss 55300.000000]
[2024-01-12 18:06:22,205: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:06:22,206: INFO: tpe: TPE using 8/8 trials with best loss 55300.000000]
[2024-01-12 18:06:22,233: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:06:22,233: INFO: tpe: TPE using 9/9 trials with best loss 55300.000000]
[2024-01-12 18:06:22,276: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:06:26,985: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 18:06:26,986: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:06:27,133: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:06:27,134: INFO: tpe: TPE using 1/1 trials with best loss 110230.000000]
[2024-01-12 18:06:27,189: INFO: tpe: build_posterior_wrapper took 0.001999 seconds]
[2024-01-12 18:06:27,191: INFO: tpe: TPE using 2/2 trials with best loss 110230.000000]
[2024-01-12 18:06:27,354: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 18:06:27,354: INFO: tpe: TPE using 3/3 trials with best loss 110230.000000]
[2024-01-12 18:06:28,160: INFO: tpe: build_posterior_wrapper took 0.002114 seconds]
[2024-01-12 18:06:28,160: INFO: tpe: TPE using 4/4 trials with best loss 96230.000000]
[2024-01-12 18:06:28,801: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:06:28,802: INFO: tpe: TPE using 5/5 trials with best loss 96230.000000]
[2024-01-12 18:06:29,429: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 18:06:29,430: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 18:06:30,175: INFO: tpe: build_posterior_wrapper took 0.002078 seconds]
[2024-01-12 18:06:30,175: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 18:06:30,225: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:06:30,226: INFO: tpe: TPE using 8/8 trials with best loss 96230.000000]
[2024-01-12 18:06:30,999: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:06:30,999: INFO: tpe: TPE using 9/9 trials with best loss 96230.000000]
[2024-01-12 18:06:31,483: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:06:56,738: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:06:56,739: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:06:58,865: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:06:58,866: INFO: tpe: TPE using 1/1 trials with best loss 148650.000000]
[2024-01-12 18:07:00,667: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:07:00,668: INFO: tpe: TPE using 2/2 trials with best loss 123600.000000]
[2024-01-12 18:07:02,831: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:07:02,832: INFO: tpe: TPE using 3/3 trials with best loss 123600.000000]
[2024-01-12 18:07:05,013: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 18:07:05,014: INFO: tpe: TPE using 4/4 trials with best loss 123600.000000]
[2024-01-12 18:07:22,623: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 18:07:22,633: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:07:22,651: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:07:22,673: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:07:22,675: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 18:07:22,829: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 18:07:22,839: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:08:21,337: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:08:21,337: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:08:26,868: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 18:08:26,868: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 18:08:30,105: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:08:30,106: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 18:08:33,090: INFO: tpe: build_posterior_wrapper took 0.001050 seconds]
[2024-01-12 18:08:33,091: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 18:08:36,161: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:08:36,162: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 18:08:39,147: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:08:39,148: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 18:08:42,207: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:08:42,208: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 18:08:45,214: INFO: tpe: build_posterior_wrapper took 0.000974 seconds]
[2024-01-12 18:08:45,214: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 18:08:48,208: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:08:48,210: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 18:08:51,243: INFO: tpe: build_posterior_wrapper took 0.000907 seconds]
[2024-01-12 18:08:51,244: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 18:08:54,300: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:08:54,682: INFO: tpe: build_posterior_wrapper took 0.002015 seconds]
[2024-01-12 18:08:54,683: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:08:54,717: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:08:54,718: INFO: tpe: TPE using 1/1 trials with best loss 244630.000000]
[2024-01-12 18:08:54,757: INFO: tpe: build_posterior_wrapper took 0.001504 seconds]
[2024-01-12 18:08:54,758: INFO: tpe: TPE using 2/2 trials with best loss 184210.000000]
[2024-01-12 18:08:54,802: INFO: tpe: build_posterior_wrapper took 0.001923 seconds]
[2024-01-12 18:08:54,806: INFO: tpe: TPE using 3/3 trials with best loss 184210.000000]
[2024-01-12 18:08:54,846: INFO: tpe: build_posterior_wrapper took 0.001992 seconds]
[2024-01-12 18:08:54,848: INFO: tpe: TPE using 4/4 trials with best loss 184210.000000]
[2024-01-12 18:08:54,889: INFO: tpe: build_posterior_wrapper took 0.001155 seconds]
[2024-01-12 18:08:54,891: INFO: tpe: TPE using 5/5 trials with best loss 184210.000000]
[2024-01-12 18:08:54,914: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:08:54,915: INFO: tpe: TPE using 6/6 trials with best loss 184210.000000]
[2024-01-12 18:08:54,945: INFO: tpe: build_posterior_wrapper took 0.000760 seconds]
[2024-01-12 18:08:54,946: INFO: tpe: TPE using 7/7 trials with best loss 184210.000000]
[2024-01-12 18:08:54,978: INFO: tpe: build_posterior_wrapper took 0.001005 seconds]
[2024-01-12 18:08:54,979: INFO: tpe: TPE using 8/8 trials with best loss 108410.000000]
[2024-01-12 18:08:55,024: INFO: tpe: build_posterior_wrapper took 0.000894 seconds]
[2024-01-12 18:08:55,026: INFO: tpe: TPE using 9/9 trials with best loss 108410.000000]
[2024-01-12 18:08:55,137: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:08:59,541: INFO: tpe: build_posterior_wrapper took 0.000953 seconds]
[2024-01-12 18:08:59,541: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:09:00,160: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:09:00,161: INFO: tpe: TPE using 1/1 trials with best loss 111710.000000]
[2024-01-12 18:09:00,817: INFO: tpe: build_posterior_wrapper took 0.001044 seconds]
[2024-01-12 18:09:00,818: INFO: tpe: TPE using 2/2 trials with best loss 109220.000000]
[2024-01-12 18:09:00,857: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:09:00,858: INFO: tpe: TPE using 3/3 trials with best loss 109220.000000]
[2024-01-12 18:09:01,554: INFO: tpe: build_posterior_wrapper took 0.001007 seconds]
[2024-01-12 18:09:01,555: INFO: tpe: TPE using 4/4 trials with best loss 109220.000000]
[2024-01-12 18:09:02,211: INFO: tpe: build_posterior_wrapper took 0.000955 seconds]
[2024-01-12 18:09:02,212: INFO: tpe: TPE using 5/5 trials with best loss 109220.000000]
[2024-01-12 18:09:02,330: INFO: tpe: build_posterior_wrapper took 0.002001 seconds]
[2024-01-12 18:09:02,330: INFO: tpe: TPE using 6/6 trials with best loss 109220.000000]
[2024-01-12 18:09:02,449: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:09:02,450: INFO: tpe: TPE using 7/7 trials with best loss 109220.000000]
[2024-01-12 18:09:03,221: INFO: tpe: build_posterior_wrapper took 0.000985 seconds]
[2024-01-12 18:09:03,222: INFO: tpe: TPE using 8/8 trials with best loss 109220.000000]
[2024-01-12 18:09:03,260: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:09:03,261: INFO: tpe: TPE using 9/9 trials with best loss 109220.000000]
[2024-01-12 18:09:06,949: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:10:41,652: INFO: tpe: build_posterior_wrapper took 0.000990 seconds]
[2024-01-12 18:10:41,653: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:10:51,548: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:10:51,549: INFO: tpe: TPE using 1/1 trials with best loss 56300.000000]
[2024-01-12 18:10:59,698: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:10:59,699: INFO: tpe: TPE using 2/2 trials with best loss 56300.000000]
[2024-01-12 18:11:07,496: INFO: tpe: build_posterior_wrapper took 0.000944 seconds]
[2024-01-12 18:11:07,497: INFO: tpe: TPE using 3/3 trials with best loss 56300.000000]
[2024-01-12 18:11:16,573: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:11:16,573: INFO: tpe: TPE using 4/4 trials with best loss 56300.000000]
[2024-01-12 18:11:27,467: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 18:11:27,468: INFO: tpe: TPE using 5/5 trials with best loss 56300.000000]
[2024-01-12 18:11:38,503: INFO: tpe: build_posterior_wrapper took 0.000980 seconds]
[2024-01-12 18:11:38,503: INFO: tpe: TPE using 6/6 trials with best loss 56300.000000]
[2024-01-12 18:11:47,221: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:11:47,222: INFO: tpe: TPE using 7/7 trials with best loss 56300.000000]
[2024-01-12 18:11:54,744: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:11:54,744: INFO: tpe: TPE using 8/8 trials with best loss 56300.000000]
[2024-01-12 18:12:04,425: INFO: tpe: build_posterior_wrapper took 0.001085 seconds]
[2024-01-12 18:12:04,425: INFO: tpe: TPE using 9/9 trials with best loss 56300.000000]
[2024-01-12 18:13:41,630: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 18:13:41,636: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:13:41,649: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:13:41,661: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:13:41,662: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 18:13:41,783: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 18:13:41,790: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:14:12,892: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:14:12,892: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:14:16,078: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:14:16,079: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 18:14:19,576: INFO: tpe: build_posterior_wrapper took 0.000908 seconds]
[2024-01-12 18:14:19,576: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 18:14:22,921: INFO: tpe: build_posterior_wrapper took 0.001044 seconds]
[2024-01-12 18:14:22,921: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 18:14:25,944: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:14:25,944: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 18:14:28,958: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:14:28,959: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 18:14:31,963: INFO: tpe: build_posterior_wrapper took 0.000911 seconds]
[2024-01-12 18:14:31,963: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 18:14:34,975: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:14:34,976: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 18:14:37,983: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 18:14:37,983: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 18:14:41,010: INFO: tpe: build_posterior_wrapper took 0.000900 seconds]
[2024-01-12 18:14:41,010: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 18:14:44,114: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:14:44,506: INFO: tpe: build_posterior_wrapper took 0.001012 seconds]
[2024-01-12 18:14:44,507: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:14:44,542: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:14:44,543: INFO: tpe: TPE using 1/1 trials with best loss 80550.000000]
[2024-01-12 18:14:44,658: INFO: tpe: build_posterior_wrapper took 0.001087 seconds]
[2024-01-12 18:14:44,658: INFO: tpe: TPE using 2/2 trials with best loss 80550.000000]
[2024-01-12 18:14:44,713: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 18:14:44,714: INFO: tpe: TPE using 3/3 trials with best loss 74030.000000]
[2024-01-12 18:14:44,757: INFO: tpe: build_posterior_wrapper took 0.001006 seconds]
[2024-01-12 18:14:44,758: INFO: tpe: TPE using 4/4 trials with best loss 74030.000000]
[2024-01-12 18:14:44,832: INFO: tpe: build_posterior_wrapper took 0.000949 seconds]
[2024-01-12 18:14:44,832: INFO: tpe: TPE using 5/5 trials with best loss 74030.000000]
[2024-01-12 18:14:44,860: INFO: tpe: build_posterior_wrapper took 0.001011 seconds]
[2024-01-12 18:14:44,861: INFO: tpe: TPE using 6/6 trials with best loss 74030.000000]
[2024-01-12 18:14:44,879: INFO: tpe: build_posterior_wrapper took 0.001054 seconds]
[2024-01-12 18:14:44,879: INFO: tpe: TPE using 7/7 trials with best loss 74030.000000]
[2024-01-12 18:14:44,904: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:14:44,905: INFO: tpe: TPE using 8/8 trials with best loss 74030.000000]
[2024-01-12 18:14:44,922: INFO: tpe: build_posterior_wrapper took 0.001081 seconds]
[2024-01-12 18:14:44,923: INFO: tpe: TPE using 9/9 trials with best loss 74030.000000]
[2024-01-12 18:14:44,949: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:14:48,476: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:14:48,476: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:14:49,186: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 18:14:49,187: INFO: tpe: TPE using 1/1 trials with best loss 112730.000000]
[2024-01-12 18:14:49,853: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 18:14:49,854: INFO: tpe: TPE using 2/2 trials with best loss 111710.000000]
[2024-01-12 18:14:50,667: INFO: tpe: build_posterior_wrapper took 0.000949 seconds]
[2024-01-12 18:14:50,668: INFO: tpe: TPE using 3/3 trials with best loss 111710.000000]
[2024-01-12 18:14:51,414: INFO: tpe: build_posterior_wrapper took 0.000961 seconds]
[2024-01-12 18:14:51,415: INFO: tpe: TPE using 4/4 trials with best loss 111710.000000]
[2024-01-12 18:14:52,097: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 18:14:52,097: INFO: tpe: TPE using 5/5 trials with best loss 111710.000000]
[2024-01-12 18:14:52,218: INFO: tpe: build_posterior_wrapper took 0.001053 seconds]
[2024-01-12 18:14:52,219: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 18:14:52,929: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 18:14:52,929: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 18:14:52,972: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:14:52,973: INFO: tpe: TPE using 8/8 trials with best loss 96230.000000]
[2024-01-12 18:14:53,009: INFO: tpe: build_posterior_wrapper took 0.001062 seconds]
[2024-01-12 18:14:53,010: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 18:14:56,182: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:16:12,491: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:16:12,491: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:16:19,541: INFO: tpe: build_posterior_wrapper took 0.001189 seconds]
[2024-01-12 18:16:19,541: INFO: tpe: TPE using 1/1 trials with best loss 26180.000000]
[2024-01-12 18:16:27,282: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:16:27,283: INFO: tpe: TPE using 2/2 trials with best loss 26180.000000]
[2024-01-12 18:16:34,483: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:16:34,484: INFO: tpe: TPE using 3/3 trials with best loss 26180.000000]
[2024-01-12 18:16:44,481: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:16:44,482: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 18:16:51,554: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 18:16:51,554: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 18:16:58,653: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:16:58,653: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 18:17:05,850: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:17:05,851: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 18:17:12,581: INFO: tpe: build_posterior_wrapper took 0.001799 seconds]
[2024-01-12 18:17:12,582: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 18:17:19,412: INFO: tpe: build_posterior_wrapper took 0.002002 seconds]
[2024-01-12 18:17:19,413: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 18:23:35,632: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 18:23:35,645: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:23:35,667: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:23:35,696: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:23:35,699: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 18:23:35,833: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 18:23:35,839: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:24:07,063: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 18:24:07,063: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:24:10,039: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:10,041: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 18:24:12,965: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:12,966: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 18:24:15,936: INFO: tpe: build_posterior_wrapper took 0.001014 seconds]
[2024-01-12 18:24:15,936: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 18:24:18,891: INFO: tpe: build_posterior_wrapper took 0.001091 seconds]
[2024-01-12 18:24:18,892: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 18:24:21,942: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:21,943: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 18:24:24,920: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:24,921: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 18:24:27,871: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:27,872: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 18:24:30,809: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:30,810: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 18:24:33,782: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:33,783: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 18:24:36,893: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:24:37,327: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 18:24:37,328: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:24:37,366: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:24:37,367: INFO: tpe: TPE using 1/1 trials with best loss 207740.000000]
[2024-01-12 18:24:37,408: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:24:37,409: INFO: tpe: TPE using 2/2 trials with best loss 58310.000000]
[2024-01-12 18:24:37,457: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:37,458: INFO: tpe: TPE using 3/3 trials with best loss 58310.000000]
[2024-01-12 18:24:37,498: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:37,499: INFO: tpe: TPE using 4/4 trials with best loss 58310.000000]
[2024-01-12 18:24:37,545: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 18:24:37,546: INFO: tpe: TPE using 5/5 trials with best loss 58310.000000]
[2024-01-12 18:24:37,629: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 18:24:37,631: INFO: tpe: TPE using 6/6 trials with best loss 58310.000000]
[2024-01-12 18:24:37,663: INFO: tpe: build_posterior_wrapper took 0.000919 seconds]
[2024-01-12 18:24:37,665: INFO: tpe: TPE using 7/7 trials with best loss 58310.000000]
[2024-01-12 18:24:37,731: INFO: tpe: build_posterior_wrapper took 0.001909 seconds]
[2024-01-12 18:24:37,732: INFO: tpe: TPE using 8/8 trials with best loss 58310.000000]
[2024-01-12 18:24:37,771: INFO: tpe: build_posterior_wrapper took 0.001028 seconds]
[2024-01-12 18:24:37,772: INFO: tpe: TPE using 9/9 trials with best loss 58310.000000]
[2024-01-12 18:24:37,814: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:24:43,007: INFO: tpe: build_posterior_wrapper took 0.000896 seconds]
[2024-01-12 18:24:43,008: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:24:43,052: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:24:43,052: INFO: tpe: TPE using 1/1 trials with best loss 111710.000000]
[2024-01-12 18:24:43,161: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:24:43,162: INFO: tpe: TPE using 2/2 trials with best loss 111710.000000]
[2024-01-12 18:24:43,831: INFO: tpe: build_posterior_wrapper took 0.000987 seconds]
[2024-01-12 18:24:43,832: INFO: tpe: TPE using 3/3 trials with best loss 111710.000000]
[2024-01-12 18:24:43,873: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:24:43,874: INFO: tpe: TPE using 4/4 trials with best loss 111710.000000]
[2024-01-12 18:24:43,918: INFO: tpe: build_posterior_wrapper took 0.001085 seconds]
[2024-01-12 18:24:43,919: INFO: tpe: TPE using 5/5 trials with best loss 111710.000000]
[2024-01-12 18:24:44,582: INFO: tpe: build_posterior_wrapper took 0.001005 seconds]
[2024-01-12 18:24:44,583: INFO: tpe: TPE using 6/6 trials with best loss 109220.000000]
[2024-01-12 18:24:44,694: INFO: tpe: build_posterior_wrapper took 0.000945 seconds]
[2024-01-12 18:24:44,694: INFO: tpe: TPE using 7/7 trials with best loss 109220.000000]
[2024-01-12 18:24:44,815: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:24:44,816: INFO: tpe: TPE using 8/8 trials with best loss 109220.000000]
[2024-01-12 18:24:45,538: INFO: tpe: build_posterior_wrapper took 0.002085 seconds]
[2024-01-12 18:24:45,539: INFO: tpe: TPE using 9/9 trials with best loss 109220.000000]
[2024-01-12 18:24:48,569: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:26:15,563: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:26:15,564: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:26:23,269: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:26:23,269: INFO: tpe: TPE using 1/1 trials with best loss 92740.000000]
[2024-01-12 18:26:33,982: INFO: tpe: build_posterior_wrapper took 0.000986 seconds]
[2024-01-12 18:26:33,983: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 18:26:41,764: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:26:41,764: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 18:26:49,450: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:26:49,451: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 18:26:57,201: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:26:57,202: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 18:27:07,879: INFO: tpe: build_posterior_wrapper took 0.001030 seconds]
[2024-01-12 18:27:07,879: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 18:27:15,566: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:27:15,566: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 18:27:26,311: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:27:26,312: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 18:27:37,024: INFO: tpe: build_posterior_wrapper took 0.000957 seconds]
[2024-01-12 18:27:37,025: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 18:30:17,528: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 18:30:17,536: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:30:17,549: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:30:17,561: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:30:17,562: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 18:30:17,694: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 18:30:17,702: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:30:46,135: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:30:46,135: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:30:48,700: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:30:48,701: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 18:30:51,226: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 18:30:51,226: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 18:30:53,767: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:30:53,768: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 18:30:56,267: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:30:56,268: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 18:30:58,771: INFO: tpe: build_posterior_wrapper took 0.001013 seconds]
[2024-01-12 18:30:58,773: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 18:31:01,285: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:31:01,286: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 18:31:03,780: INFO: tpe: build_posterior_wrapper took 0.001064 seconds]
[2024-01-12 18:31:03,780: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 18:31:06,444: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:31:06,445: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 18:31:09,085: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:31:09,085: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 18:31:11,724: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:31:12,061: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:31:12,061: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:31:12,126: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 18:31:12,126: INFO: tpe: TPE using 1/1 trials with best loss 176440.000000]
[2024-01-12 18:31:12,141: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:31:12,143: INFO: tpe: TPE using 2/2 trials with best loss 64170.000000]
[2024-01-12 18:31:12,216: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:31:12,216: INFO: tpe: TPE using 3/3 trials with best loss 64170.000000]
[2024-01-12 18:31:12,231: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:31:12,232: INFO: tpe: TPE using 4/4 trials with best loss 64170.000000]
[2024-01-12 18:31:12,306: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:31:12,306: INFO: tpe: TPE using 5/5 trials with best loss 64170.000000]
[2024-01-12 18:31:12,320: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:31:12,321: INFO: tpe: TPE using 6/6 trials with best loss 61000.000000]
[2024-01-12 18:31:12,345: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:31:12,346: INFO: tpe: TPE using 7/7 trials with best loss 61000.000000]
[2024-01-12 18:31:12,363: INFO: tpe: build_posterior_wrapper took 0.001090 seconds]
[2024-01-12 18:31:12,364: INFO: tpe: TPE using 8/8 trials with best loss 61000.000000]
[2024-01-12 18:31:12,383: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:31:12,383: INFO: tpe: TPE using 9/9 trials with best loss 61000.000000]
[2024-01-12 18:31:12,416: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:31:15,282: INFO: tpe: build_posterior_wrapper took 0.001081 seconds]
[2024-01-12 18:31:15,282: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:31:15,808: INFO: tpe: build_posterior_wrapper took 0.001047 seconds]
[2024-01-12 18:31:15,808: INFO: tpe: TPE using 1/1 trials with best loss 96220.000000]
[2024-01-12 18:31:16,356: INFO: tpe: build_posterior_wrapper took 0.000952 seconds]
[2024-01-12 18:31:16,357: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 18:31:16,928: INFO: tpe: build_posterior_wrapper took 0.001075 seconds]
[2024-01-12 18:31:16,928: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 18:31:16,953: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:31:16,954: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 18:31:16,982: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:31:16,983: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 18:31:17,079: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 18:31:17,079: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 18:31:17,110: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:31:17,110: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 18:31:17,662: INFO: tpe: build_posterior_wrapper took 0.001060 seconds]
[2024-01-12 18:31:17,663: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 18:31:17,750: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 18:31:17,751: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 18:53:51,057: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 18:53:51,062: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:53:51,070: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:53:51,083: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 18:53:51,084: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 18:53:51,211: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 18:53:51,216: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:54:14,942: INFO: tpe: build_posterior_wrapper took 0.000897 seconds]
[2024-01-12 18:54:14,942: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:54:17,359: INFO: tpe: build_posterior_wrapper took 0.000922 seconds]
[2024-01-12 18:54:17,359: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 18:54:19,782: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:19,783: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 18:54:22,242: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:22,243: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 18:54:24,658: INFO: tpe: build_posterior_wrapper took 0.000924 seconds]
[2024-01-12 18:54:24,658: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 18:54:27,103: INFO: tpe: build_posterior_wrapper took 0.000919 seconds]
[2024-01-12 18:54:27,103: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 18:54:29,559: INFO: tpe: build_posterior_wrapper took 0.001093 seconds]
[2024-01-12 18:54:29,559: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 18:54:32,179: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:32,180: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 18:54:34,774: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:54:34,774: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 18:54:37,336: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:37,337: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 18:54:39,827: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:54:40,018: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:40,019: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:54:40,037: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:40,038: INFO: tpe: TPE using 1/1 trials with best loss 114370.000000]
[2024-01-12 18:54:40,057: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:40,058: INFO: tpe: TPE using 2/2 trials with best loss 114370.000000]
[2024-01-12 18:54:40,076: INFO: tpe: build_posterior_wrapper took 0.001086 seconds]
[2024-01-12 18:54:40,076: INFO: tpe: TPE using 3/3 trials with best loss 28780.000000]
[2024-01-12 18:54:40,101: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:40,102: INFO: tpe: TPE using 4/4 trials with best loss 28780.000000]
[2024-01-12 18:54:40,118: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:40,119: INFO: tpe: TPE using 5/5 trials with best loss 28780.000000]
[2024-01-12 18:54:40,140: INFO: tpe: build_posterior_wrapper took 0.000986 seconds]
[2024-01-12 18:54:40,140: INFO: tpe: TPE using 6/6 trials with best loss 28780.000000]
[2024-01-12 18:54:40,161: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:40,162: INFO: tpe: TPE using 7/7 trials with best loss 28780.000000]
[2024-01-12 18:54:40,178: INFO: tpe: build_posterior_wrapper took 0.001098 seconds]
[2024-01-12 18:54:40,179: INFO: tpe: TPE using 8/8 trials with best loss 28780.000000]
[2024-01-12 18:54:40,197: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:40,198: INFO: tpe: TPE using 9/9 trials with best loss 28780.000000]
[2024-01-12 18:54:40,243: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:54:43,823: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:54:43,824: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:54:44,347: INFO: tpe: build_posterior_wrapper took 0.001011 seconds]
[2024-01-12 18:54:44,348: INFO: tpe: TPE using 1/1 trials with best loss 145700.000000]
[2024-01-12 18:54:44,848: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:54:44,849: INFO: tpe: TPE using 2/2 trials with best loss 145700.000000]
[2024-01-12 18:54:45,368: INFO: tpe: build_posterior_wrapper took 0.001037 seconds]
[2024-01-12 18:54:45,368: INFO: tpe: TPE using 3/3 trials with best loss 109220.000000]
[2024-01-12 18:54:45,889: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 18:54:45,890: INFO: tpe: TPE using 4/4 trials with best loss 109220.000000]
[2024-01-12 18:54:46,475: INFO: tpe: build_posterior_wrapper took 0.001917 seconds]
[2024-01-12 18:54:46,475: INFO: tpe: TPE using 5/5 trials with best loss 96230.000000]
[2024-01-12 18:54:46,496: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:46,497: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 18:54:47,045: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:54:47,046: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 18:54:47,066: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:54:47,066: INFO: tpe: TPE using 8/8 trials with best loss 96230.000000]
[2024-01-12 18:54:47,088: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:54:47,088: INFO: tpe: TPE using 9/9 trials with best loss 96230.000000]
[2024-01-12 18:54:49,729: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 18:56:15,168: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:56:15,169: INFO: tpe: TPE using 0 trials]
[2024-01-12 18:56:22,377: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:56:22,377: INFO: tpe: TPE using 1/1 trials with best loss 174020.000000]
[2024-01-12 18:56:29,474: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:56:29,475: INFO: tpe: TPE using 2/2 trials with best loss 174020.000000]
[2024-01-12 18:56:36,432: INFO: tpe: build_posterior_wrapper took 0.001016 seconds]
[2024-01-12 18:56:36,434: INFO: tpe: TPE using 3/3 trials with best loss 174020.000000]
[2024-01-12 18:56:43,470: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 18:56:43,471: INFO: tpe: TPE using 4/4 trials with best loss 174020.000000]
[2024-01-12 18:56:50,576: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 18:56:50,577: INFO: tpe: TPE using 5/5 trials with best loss 79980.000000]
[2024-01-12 18:56:57,766: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:56:57,767: INFO: tpe: TPE using 6/6 trials with best loss 79980.000000]
[2024-01-12 18:57:05,008: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 18:57:05,009: INFO: tpe: TPE using 7/7 trials with best loss 79980.000000]
[2024-01-12 18:57:14,737: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 18:57:14,738: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 18:57:24,397: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 18:57:24,397: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:01:26,561: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 19:01:26,566: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:01:26,574: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:01:26,584: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:01:26,585: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 19:01:26,685: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 19:01:26,689: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:01:50,863: INFO: tpe: build_posterior_wrapper took 0.000915 seconds]
[2024-01-12 19:01:50,863: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:01:53,418: INFO: tpe: build_posterior_wrapper took 0.000977 seconds]
[2024-01-12 19:01:53,418: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 19:01:55,879: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:01:55,880: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:01:58,343: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:01:58,344: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:02:00,812: INFO: tpe: build_posterior_wrapper took 0.000923 seconds]
[2024-01-12 19:02:00,812: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:02:03,288: INFO: tpe: build_posterior_wrapper took 0.000910 seconds]
[2024-01-12 19:02:03,288: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:02:05,769: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:05,770: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:02:08,260: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:08,261: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:02:10,733: INFO: tpe: build_posterior_wrapper took 0.001059 seconds]
[2024-01-12 19:02:10,733: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:02:13,212: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:13,213: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:02:15,729: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:02:16,041: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 19:02:16,041: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:02:16,104: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:16,105: INFO: tpe: TPE using 1/1 trials with best loss 152040.000000]
[2024-01-12 19:02:16,129: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 19:02:16,130: INFO: tpe: TPE using 2/2 trials with best loss 152040.000000]
[2024-01-12 19:02:16,150: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:16,151: INFO: tpe: TPE using 3/3 trials with best loss 152040.000000]
[2024-01-12 19:02:16,171: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:16,172: INFO: tpe: TPE using 4/4 trials with best loss 81230.000000]
[2024-01-12 19:02:16,202: INFO: tpe: build_posterior_wrapper took 0.001006 seconds]
[2024-01-12 19:02:16,203: INFO: tpe: TPE using 5/5 trials with best loss 24900.000000]
[2024-01-12 19:02:16,220: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:16,221: INFO: tpe: TPE using 6/6 trials with best loss 24130.000000]
[2024-01-12 19:02:16,240: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:16,241: INFO: tpe: TPE using 7/7 trials with best loss 24130.000000]
[2024-01-12 19:02:16,270: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:16,270: INFO: tpe: TPE using 8/8 trials with best loss 24130.000000]
[2024-01-12 19:02:16,287: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:16,288: INFO: tpe: TPE using 9/9 trials with best loss 24130.000000]
[2024-01-12 19:02:16,315: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:02:18,371: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:02:18,372: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:02:18,941: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:18,942: INFO: tpe: TPE using 1/1 trials with best loss 110230.000000]
[2024-01-12 19:02:18,966: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:02:18,966: INFO: tpe: TPE using 2/2 trials with best loss 110230.000000]
[2024-01-12 19:02:19,469: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:02:19,470: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 19:02:19,500: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:02:19,500: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 19:02:20,040: INFO: tpe: build_posterior_wrapper took 0.001080 seconds]
[2024-01-12 19:02:20,040: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 19:02:20,548: INFO: tpe: build_posterior_wrapper took 0.001080 seconds]
[2024-01-12 19:02:20,548: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 19:02:20,651: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:02:20,651: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 19:02:20,683: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:02:20,683: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 19:02:20,784: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 19:02:20,784: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 19:02:23,471: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:03:56,796: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 19:03:56,796: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:04:06,409: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:04:06,410: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 19:04:16,076: INFO: tpe: build_posterior_wrapper took 0.001060 seconds]
[2024-01-12 19:04:16,077: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:04:23,509: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:04:23,509: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:04:30,633: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:04:30,633: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:04:40,142: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:04:40,142: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:04:47,173: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:04:47,174: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:04:56,957: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:04:56,958: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:05:03,981: INFO: tpe: build_posterior_wrapper took 0.001005 seconds]
[2024-01-12 19:05:03,982: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:05:11,460: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 19:05:11,460: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:07:35,406: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 19:07:35,411: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:07:35,421: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:07:35,431: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:07:35,432: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 19:07:35,532: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 19:07:35,537: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:08:00,834: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 19:08:00,834: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:08:03,349: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 19:08:03,349: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 19:08:05,869: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:05,870: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:08:08,487: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:08,488: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:08:11,516: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:11,517: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:08:14,054: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:14,054: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:08:16,599: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:16,600: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:08:19,125: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:19,126: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:08:21,659: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:21,660: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:08:24,196: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:24,197: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:08:26,832: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:08:27,085: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 19:08:27,085: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:08:27,111: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:08:27,111: INFO: tpe: TPE using 1/1 trials with best loss 251460.000000]
[2024-01-12 19:08:27,145: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:27,146: INFO: tpe: TPE using 2/2 trials with best loss 251460.000000]
[2024-01-12 19:08:27,165: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:27,166: INFO: tpe: TPE using 3/3 trials with best loss 228580.000000]
[2024-01-12 19:08:27,184: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:08:27,185: INFO: tpe: TPE using 4/4 trials with best loss 228580.000000]
[2024-01-12 19:08:27,205: INFO: tpe: build_posterior_wrapper took 0.000968 seconds]
[2024-01-12 19:08:27,207: INFO: tpe: TPE using 5/5 trials with best loss 60510.000000]
[2024-01-12 19:08:27,245: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:08:27,246: INFO: tpe: TPE using 6/6 trials with best loss 57400.000000]
[2024-01-12 19:08:27,267: INFO: tpe: build_posterior_wrapper took 0.001027 seconds]
[2024-01-12 19:08:27,267: INFO: tpe: TPE using 7/7 trials with best loss 57400.000000]
[2024-01-12 19:08:27,293: INFO: tpe: build_posterior_wrapper took 0.001045 seconds]
[2024-01-12 19:08:27,294: INFO: tpe: TPE using 8/8 trials with best loss 57400.000000]
[2024-01-12 19:08:27,311: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:27,312: INFO: tpe: TPE using 9/9 trials with best loss 57400.000000]
[2024-01-12 19:08:27,346: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:08:30,428: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:08:30,429: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:08:30,458: INFO: tpe: build_posterior_wrapper took 0.000501 seconds]
[2024-01-12 19:08:30,459: INFO: tpe: TPE using 1/1 trials with best loss 109220.000000]
[2024-01-12 19:08:31,018: INFO: tpe: build_posterior_wrapper took 0.001078 seconds]
[2024-01-12 19:08:31,018: INFO: tpe: TPE using 2/2 trials with best loss 109220.000000]
[2024-01-12 19:08:31,565: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:31,566: INFO: tpe: TPE using 3/3 trials with best loss 109220.000000]
[2024-01-12 19:08:32,051: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 19:08:32,052: INFO: tpe: TPE using 4/4 trials with best loss 109220.000000]
[2024-01-12 19:08:32,080: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:08:32,080: INFO: tpe: TPE using 5/5 trials with best loss 109220.000000]
[2024-01-12 19:08:32,113: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:08:32,114: INFO: tpe: TPE using 6/6 trials with best loss 109220.000000]
[2024-01-12 19:08:32,675: INFO: tpe: build_posterior_wrapper took 0.000913 seconds]
[2024-01-12 19:08:32,676: INFO: tpe: TPE using 7/7 trials with best loss 109220.000000]
[2024-01-12 19:08:32,780: INFO: tpe: build_posterior_wrapper took 0.001048 seconds]
[2024-01-12 19:08:32,780: INFO: tpe: TPE using 8/8 trials with best loss 109220.000000]
[2024-01-12 19:08:33,340: INFO: tpe: build_posterior_wrapper took 0.000913 seconds]
[2024-01-12 19:08:33,341: INFO: tpe: TPE using 9/9 trials with best loss 96230.000000]
[2024-01-12 19:09:38,191: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 19:09:38,196: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:09:38,205: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:09:38,217: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:09:38,218: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 19:09:38,322: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 19:09:38,327: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:10:02,533: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:02,533: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:10:05,004: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:05,005: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 19:10:07,506: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 19:10:07,506: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:10:10,004: INFO: tpe: build_posterior_wrapper took 0.000914 seconds]
[2024-01-12 19:10:10,004: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:10:12,480: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:12,481: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:10:14,977: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:14,978: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:10:17,505: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:10:17,505: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:10:20,052: INFO: tpe: build_posterior_wrapper took 0.001032 seconds]
[2024-01-12 19:10:20,052: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:10:22,601: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:22,602: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:10:25,131: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:25,132: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:10:27,676: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:10:27,937: INFO: tpe: build_posterior_wrapper took 0.001022 seconds]
[2024-01-12 19:10:27,938: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:10:27,956: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:10:27,957: INFO: tpe: TPE using 1/1 trials with best loss 134890.000000]
[2024-01-12 19:10:27,974: INFO: tpe: build_posterior_wrapper took 0.001075 seconds]
[2024-01-12 19:10:27,975: INFO: tpe: TPE using 2/2 trials with best loss 42480.000000]
[2024-01-12 19:10:27,996: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:27,997: INFO: tpe: TPE using 3/3 trials with best loss 42480.000000]
[2024-01-12 19:10:28,021: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:28,023: INFO: tpe: TPE using 4/4 trials with best loss 42480.000000]
[2024-01-12 19:10:28,041: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:28,042: INFO: tpe: TPE using 5/5 trials with best loss 42480.000000]
[2024-01-12 19:10:28,063: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:28,064: INFO: tpe: TPE using 6/6 trials with best loss 42480.000000]
[2024-01-12 19:10:28,092: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:28,093: INFO: tpe: TPE using 7/7 trials with best loss 42480.000000]
[2024-01-12 19:10:28,139: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:28,140: INFO: tpe: TPE using 8/8 trials with best loss 42480.000000]
[2024-01-12 19:10:28,159: INFO: tpe: build_posterior_wrapper took 0.000994 seconds]
[2024-01-12 19:10:28,159: INFO: tpe: TPE using 9/9 trials with best loss 42480.000000]
[2024-01-12 19:10:28,188: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:10:32,112: INFO: tpe: build_posterior_wrapper took 0.001013 seconds]
[2024-01-12 19:10:32,113: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:10:32,202: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:32,203: INFO: tpe: TPE using 1/1 trials with best loss 145700.000000]
[2024-01-12 19:10:32,291: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:10:32,291: INFO: tpe: TPE using 2/2 trials with best loss 110230.000000]
[2024-01-12 19:10:32,320: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:32,321: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 19:10:32,915: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:32,916: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 19:10:33,007: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:10:33,008: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 19:10:33,557: INFO: tpe: build_posterior_wrapper took 0.001012 seconds]
[2024-01-12 19:10:33,558: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 19:10:33,655: INFO: tpe: build_posterior_wrapper took 0.000984 seconds]
[2024-01-12 19:10:33,656: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 19:10:33,688: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:10:33,688: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 19:10:33,792: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 19:10:33,792: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 19:10:36,436: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:12:02,682: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:12:02,682: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:12:10,361: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:12:10,362: INFO: tpe: TPE using 1/1 trials with best loss 90240.000000]
[2024-01-12 19:12:17,856: INFO: tpe: build_posterior_wrapper took 0.002086 seconds]
[2024-01-12 19:12:17,856: INFO: tpe: TPE using 2/2 trials with best loss 47690.000000]
[2024-01-12 19:12:25,657: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:12:25,658: INFO: tpe: TPE using 3/3 trials with best loss 47690.000000]
[2024-01-12 19:12:33,148: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:12:33,149: INFO: tpe: TPE using 4/4 trials with best loss 47690.000000]
[2024-01-12 19:12:40,918: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:12:40,918: INFO: tpe: TPE using 5/5 trials with best loss 47690.000000]
[2024-01-12 19:12:48,513: INFO: tpe: build_posterior_wrapper took 0.000883 seconds]
[2024-01-12 19:12:48,514: INFO: tpe: TPE using 6/6 trials with best loss 47690.000000]
[2024-01-12 19:12:56,220: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:12:56,221: INFO: tpe: TPE using 7/7 trials with best loss 47690.000000]
[2024-01-12 19:13:03,797: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:13:03,798: INFO: tpe: TPE using 8/8 trials with best loss 47690.000000]
[2024-01-12 19:13:14,442: INFO: tpe: build_posterior_wrapper took 0.000914 seconds]
[2024-01-12 19:13:14,443: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:29:27,361: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 19:29:27,366: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:29:27,375: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:29:27,386: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:29:27,387: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 19:29:27,486: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 19:29:27,491: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:29:51,752: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:29:51,752: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:29:54,267: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:29:54,268: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 19:29:56,765: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:29:56,767: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:29:59,248: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:29:59,249: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:30:01,771: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:01,772: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:30:04,243: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:04,244: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:30:06,743: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:06,744: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:30:09,320: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:09,321: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:30:11,822: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:11,823: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:30:14,327: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:14,328: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:30:16,878: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:30:17,174: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 19:30:17,174: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:30:17,207: INFO: tpe: build_posterior_wrapper took 0.001100 seconds]
[2024-01-12 19:30:17,207: INFO: tpe: TPE using 1/1 trials with best loss 67650.000000]
[2024-01-12 19:30:17,228: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:17,228: INFO: tpe: TPE using 2/2 trials with best loss 67650.000000]
[2024-01-12 19:30:17,247: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:17,248: INFO: tpe: TPE using 3/3 trials with best loss 67650.000000]
[2024-01-12 19:30:17,304: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 19:30:17,304: INFO: tpe: TPE using 4/4 trials with best loss 5760.000000]
[2024-01-12 19:30:17,321: INFO: tpe: build_posterior_wrapper took 0.001258 seconds]
[2024-01-12 19:30:17,321: INFO: tpe: TPE using 5/5 trials with best loss 5760.000000]
[2024-01-12 19:30:17,344: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:17,345: INFO: tpe: TPE using 6/6 trials with best loss 5760.000000]
[2024-01-12 19:30:17,371: INFO: tpe: build_posterior_wrapper took 0.001093 seconds]
[2024-01-12 19:30:17,372: INFO: tpe: TPE using 7/7 trials with best loss 5760.000000]
[2024-01-12 19:30:17,389: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 19:30:17,390: INFO: tpe: TPE using 8/8 trials with best loss 5760.000000]
[2024-01-12 19:30:17,423: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:30:17,424: INFO: tpe: TPE using 9/9 trials with best loss 5760.000000]
[2024-01-12 19:30:17,453: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:30:20,440: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:30:20,440: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:30:20,535: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:30:20,536: INFO: tpe: TPE using 1/1 trials with best loss 145700.000000]
[2024-01-12 19:30:21,091: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:30:21,092: INFO: tpe: TPE using 2/2 trials with best loss 96230.000000]
[2024-01-12 19:30:21,194: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:30:21,195: INFO: tpe: TPE using 3/3 trials with best loss 96230.000000]
[2024-01-12 19:30:21,782: INFO: tpe: build_posterior_wrapper took 0.000915 seconds]
[2024-01-12 19:30:21,783: INFO: tpe: TPE using 4/4 trials with best loss 96230.000000]
[2024-01-12 19:30:21,874: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:30:21,874: INFO: tpe: TPE using 5/5 trials with best loss 96230.000000]
[2024-01-12 19:30:22,443: INFO: tpe: build_posterior_wrapper took 0.001040 seconds]
[2024-01-12 19:30:22,443: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 19:30:22,551: INFO: tpe: build_posterior_wrapper took 0.001480 seconds]
[2024-01-12 19:30:22,552: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 19:30:23,125: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:30:23,125: INFO: tpe: TPE using 8/8 trials with best loss 96230.000000]
[2024-01-12 19:30:23,151: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:30:23,152: INFO: tpe: TPE using 9/9 trials with best loss 96230.000000]
[2024-01-12 19:30:23,671: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:31:37,077: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:31:37,077: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:31:44,134: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:31:44,135: INFO: tpe: TPE using 1/1 trials with best loss 140870.000000]
[2024-01-12 19:31:51,092: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:31:51,093: INFO: tpe: TPE using 2/2 trials with best loss 116690.000000]
[2024-01-12 19:31:58,272: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:31:58,273: INFO: tpe: TPE using 3/3 trials with best loss 116690.000000]
[2024-01-12 19:32:05,556: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:32:05,556: INFO: tpe: TPE using 4/4 trials with best loss 90240.000000]
[2024-01-12 19:32:12,625: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:32:12,626: INFO: tpe: TPE using 5/5 trials with best loss 90240.000000]
[2024-01-12 19:32:19,706: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:32:19,707: INFO: tpe: TPE using 6/6 trials with best loss 90240.000000]
[2024-01-12 19:32:26,859: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:32:26,860: INFO: tpe: TPE using 7/7 trials with best loss 90240.000000]
[2024-01-12 19:32:33,932: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:32:33,932: INFO: tpe: TPE using 8/8 trials with best loss 90240.000000]
[2024-01-12 19:32:41,469: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:32:41,470: INFO: tpe: TPE using 9/9 trials with best loss 90240.000000]
[2024-01-12 19:33:56,640: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 19:33:56,645: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:33:56,654: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:33:56,666: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:33:56,667: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 19:33:56,765: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 19:33:56,769: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:34:21,986: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:21,986: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:34:24,567: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:24,568: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 19:34:27,737: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:27,738: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:34:30,257: INFO: tpe: build_posterior_wrapper took 0.001018 seconds]
[2024-01-12 19:34:30,257: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:34:32,790: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:32,791: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:34:35,316: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:35,317: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:34:37,920: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:37,921: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:34:40,729: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:40,730: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:34:43,355: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:43,356: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:34:45,918: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:45,919: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:34:48,504: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:34:48,815: INFO: tpe: build_posterior_wrapper took 0.001097 seconds]
[2024-01-12 19:34:48,816: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:34:48,867: INFO: tpe: build_posterior_wrapper took 0.001039 seconds]
[2024-01-12 19:34:48,868: INFO: tpe: TPE using 1/1 trials with best loss 440850.000000]
[2024-01-12 19:34:48,936: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:48,936: INFO: tpe: TPE using 2/2 trials with best loss 8840.000000]
[2024-01-12 19:34:48,955: INFO: tpe: build_posterior_wrapper took 0.001087 seconds]
[2024-01-12 19:34:48,956: INFO: tpe: TPE using 3/3 trials with best loss 8840.000000]
[2024-01-12 19:34:48,982: INFO: tpe: build_posterior_wrapper took 0.001072 seconds]
[2024-01-12 19:34:48,982: INFO: tpe: TPE using 4/4 trials with best loss 8840.000000]
[2024-01-12 19:34:48,999: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:49,000: INFO: tpe: TPE using 5/5 trials with best loss 8840.000000]
[2024-01-12 19:34:49,039: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:49,040: INFO: tpe: TPE using 6/6 trials with best loss 8840.000000]
[2024-01-12 19:34:49,067: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:49,068: INFO: tpe: TPE using 7/7 trials with best loss 8840.000000]
[2024-01-12 19:34:49,083: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:49,084: INFO: tpe: TPE using 8/8 trials with best loss 8840.000000]
[2024-01-12 19:34:49,106: INFO: tpe: build_posterior_wrapper took 0.001101 seconds]
[2024-01-12 19:34:49,107: INFO: tpe: TPE using 9/9 trials with best loss 8840.000000]
[2024-01-12 19:34:49,141: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:34:51,582: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:34:51,583: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:34:51,670: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:34:51,671: INFO: tpe: TPE using 1/1 trials with best loss 110230.000000]
[2024-01-12 19:34:52,252: INFO: tpe: build_posterior_wrapper took 0.000908 seconds]
[2024-01-12 19:34:52,253: INFO: tpe: TPE using 2/2 trials with best loss 110230.000000]
[2024-01-12 19:34:52,337: INFO: tpe: build_posterior_wrapper took 0.000964 seconds]
[2024-01-12 19:34:52,338: INFO: tpe: TPE using 3/3 trials with best loss 110230.000000]
[2024-01-12 19:34:52,438: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:34:52,439: INFO: tpe: TPE using 4/4 trials with best loss 110230.000000]
[2024-01-12 19:34:52,550: INFO: tpe: build_posterior_wrapper took 0.001259 seconds]
[2024-01-12 19:34:52,551: INFO: tpe: TPE using 5/5 trials with best loss 110230.000000]
[2024-01-12 19:34:52,683: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:34:52,684: INFO: tpe: TPE using 6/6 trials with best loss 110230.000000]
[2024-01-12 19:34:52,795: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:34:52,796: INFO: tpe: TPE using 7/7 trials with best loss 110230.000000]
[2024-01-12 19:34:52,903: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:34:52,903: INFO: tpe: TPE using 8/8 trials with best loss 110230.000000]
[2024-01-12 19:34:53,459: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:34:53,460: INFO: tpe: TPE using 9/9 trials with best loss 110230.000000]
[2024-01-12 19:34:53,527: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:36:13,438: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:36:13,438: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:36:21,009: INFO: tpe: build_posterior_wrapper took 0.000921 seconds]
[2024-01-12 19:36:21,009: INFO: tpe: TPE using 1/1 trials with best loss 86510.000000]
[2024-01-12 19:36:28,863: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:36:28,864: INFO: tpe: TPE using 2/2 trials with best loss 86510.000000]
[2024-01-12 19:36:36,318: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:36:36,319: INFO: tpe: TPE using 3/3 trials with best loss 52980.000000]
[2024-01-12 19:36:43,856: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:36:43,857: INFO: tpe: TPE using 4/4 trials with best loss 52980.000000]
[2024-01-12 19:36:51,638: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:36:51,639: INFO: tpe: TPE using 5/5 trials with best loss 52980.000000]
[2024-01-12 19:36:59,439: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:36:59,439: INFO: tpe: TPE using 6/6 trials with best loss 52980.000000]
[2024-01-12 19:37:07,237: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:37:07,238: INFO: tpe: TPE using 7/7 trials with best loss 52980.000000]
[2024-01-12 19:37:15,060: INFO: tpe: build_posterior_wrapper took 0.000909 seconds]
[2024-01-12 19:37:15,061: INFO: tpe: TPE using 8/8 trials with best loss 48560.000000]
[2024-01-12 19:37:23,306: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:37:23,307: INFO: tpe: TPE using 9/9 trials with best loss 48560.000000]
[2024-01-12 19:43:41,651: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 19:43:41,656: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:43:41,664: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:43:41,674: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:43:41,675: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 19:43:41,776: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 19:43:41,781: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:44:06,124: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:06,124: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:44:08,595: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:08,596: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 19:44:11,020: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:11,020: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:44:13,509: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:13,509: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:44:16,009: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:16,010: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:44:18,514: INFO: tpe: build_posterior_wrapper took 0.000980 seconds]
[2024-01-12 19:44:18,514: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:44:21,026: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:21,027: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:44:23,552: INFO: tpe: build_posterior_wrapper took 0.000920 seconds]
[2024-01-12 19:44:23,552: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:44:26,059: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:26,060: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:44:28,576: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:28,577: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:44:31,372: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:44:31,646: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:44:31,646: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:44:31,693: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:31,694: INFO: tpe: TPE using 1/1 trials with best loss 285940.000000]
[2024-01-12 19:44:31,712: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:31,713: INFO: tpe: TPE using 2/2 trials with best loss 285940.000000]
[2024-01-12 19:44:31,736: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:44:31,738: INFO: tpe: TPE using 3/3 trials with best loss 201700.000000]
[2024-01-12 19:44:31,767: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:31,770: INFO: tpe: TPE using 4/4 trials with best loss 201700.000000]
[2024-01-12 19:44:31,794: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:31,795: INFO: tpe: TPE using 5/5 trials with best loss 201700.000000]
[2024-01-12 19:44:31,815: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:31,816: INFO: tpe: TPE using 6/6 trials with best loss 144450.000000]
[2024-01-12 19:44:31,842: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:44:31,843: INFO: tpe: TPE using 7/7 trials with best loss 48800.000000]
[2024-01-12 19:44:31,877: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:31,878: INFO: tpe: TPE using 8/8 trials with best loss 48800.000000]
[2024-01-12 19:44:31,908: INFO: tpe: build_posterior_wrapper took 0.000989 seconds]
[2024-01-12 19:44:31,909: INFO: tpe: TPE using 9/9 trials with best loss 21030.000000]
[2024-01-12 19:44:31,942: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:44:34,060: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:44:34,060: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:44:34,156: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:34,157: INFO: tpe: TPE using 1/1 trials with best loss 96230.000000]
[2024-01-12 19:44:34,190: INFO: tpe: build_posterior_wrapper took 0.001076 seconds]
[2024-01-12 19:44:34,190: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 19:44:34,791: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:44:34,792: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 19:44:34,898: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:44:34,898: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 19:44:35,457: INFO: tpe: build_posterior_wrapper took 0.001091 seconds]
[2024-01-12 19:44:35,457: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 19:44:35,560: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 19:44:35,561: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 19:44:35,662: INFO: tpe: build_posterior_wrapper took 0.002001 seconds]
[2024-01-12 19:44:35,662: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 19:44:35,696: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:44:35,697: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 19:44:35,728: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:44:35,728: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 19:44:38,920: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:46:08,242: INFO: tpe: build_posterior_wrapper took 0.001107 seconds]
[2024-01-12 19:46:08,243: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:46:16,078: INFO: tpe: build_posterior_wrapper took 0.000918 seconds]
[2024-01-12 19:46:16,079: INFO: tpe: TPE using 1/1 trials with best loss 153760.000000]
[2024-01-12 19:46:23,713: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:46:23,713: INFO: tpe: TPE using 2/2 trials with best loss 153320.000000]
[2024-01-12 19:46:31,476: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:46:31,477: INFO: tpe: TPE using 3/3 trials with best loss 153320.000000]
[2024-01-12 19:46:39,225: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:46:39,226: INFO: tpe: TPE using 4/4 trials with best loss 91220.000000]
[2024-01-12 19:46:49,497: INFO: tpe: build_posterior_wrapper took 0.000905 seconds]
[2024-01-12 19:46:49,498: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:46:59,948: INFO: tpe: build_posterior_wrapper took 0.000906 seconds]
[2024-01-12 19:46:59,948: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:47:10,039: INFO: tpe: build_posterior_wrapper took 0.000911 seconds]
[2024-01-12 19:47:10,040: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:47:18,424: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:47:18,425: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:47:26,199: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:47:26,200: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:47:37,031: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-12 19:47:39,442: INFO: utils: yaml file is saved]
[2024-01-12 19:47:39,442: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-12 19:47:39,445: INFO: utils: yaml file is saved]
[2024-01-12 19:47:39,445: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-12 19:47:39,448: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-12 19:52:55,984: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 19:52:55,989: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:52:55,998: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:52:56,009: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 19:52:56,010: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 19:52:56,108: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 19:52:56,113: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:53:21,092: INFO: tpe: build_posterior_wrapper took 0.001069 seconds]
[2024-01-12 19:53:21,092: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:53:24,258: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:24,258: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 19:53:26,756: INFO: tpe: build_posterior_wrapper took 0.000914 seconds]
[2024-01-12 19:53:26,757: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:53:29,997: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:29,998: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:53:32,560: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:32,561: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:53:35,703: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:35,704: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:53:38,227: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:38,228: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:53:41,369: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:41,370: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:53:44,508: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:53:44,509: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:53:47,687: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:47,688: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:53:50,852: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:53:51,093: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 19:53:51,093: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:53:51,117: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:51,119: INFO: tpe: TPE using 1/1 trials with best loss 257950.000000]
[2024-01-12 19:53:51,156: INFO: tpe: build_posterior_wrapper took 0.001091 seconds]
[2024-01-12 19:53:51,156: INFO: tpe: TPE using 2/2 trials with best loss 208490.000000]
[2024-01-12 19:53:51,178: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 19:53:51,178: INFO: tpe: TPE using 3/3 trials with best loss 208490.000000]
[2024-01-12 19:53:51,207: INFO: tpe: build_posterior_wrapper took 0.000940 seconds]
[2024-01-12 19:53:51,208: INFO: tpe: TPE using 4/4 trials with best loss 163170.000000]
[2024-01-12 19:53:51,226: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:51,228: INFO: tpe: TPE using 5/5 trials with best loss 163170.000000]
[2024-01-12 19:53:51,253: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:51,254: INFO: tpe: TPE using 6/6 trials with best loss 163170.000000]
[2024-01-12 19:53:51,274: INFO: tpe: build_posterior_wrapper took 0.001078 seconds]
[2024-01-12 19:53:51,274: INFO: tpe: TPE using 7/7 trials with best loss 163170.000000]
[2024-01-12 19:53:51,293: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:51,294: INFO: tpe: TPE using 8/8 trials with best loss 132080.000000]
[2024-01-12 19:53:51,316: INFO: tpe: build_posterior_wrapper took 0.001038 seconds]
[2024-01-12 19:53:51,317: INFO: tpe: TPE using 9/9 trials with best loss 132080.000000]
[2024-01-12 19:53:51,342: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:53:54,328: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:54,329: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:53:54,356: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:53:54,356: INFO: tpe: TPE using 1/1 trials with best loss 96220.000000]
[2024-01-12 19:53:54,826: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:54,827: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 19:53:55,296: INFO: tpe: build_posterior_wrapper took 0.000980 seconds]
[2024-01-12 19:53:55,297: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 19:53:55,322: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:53:55,322: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 19:53:55,824: INFO: tpe: build_posterior_wrapper took 0.000949 seconds]
[2024-01-12 19:53:55,825: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 19:53:55,854: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:53:55,854: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 19:53:56,347: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 19:53:56,348: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 19:53:56,884: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:56,885: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 19:53:57,388: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:53:57,389: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 19:54:00,505: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 19:55:26,040: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:55:26,041: INFO: tpe: TPE using 0 trials]
[2024-01-12 19:55:32,806: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:55:32,806: INFO: tpe: TPE using 1/1 trials with best loss 284590.000000]
[2024-01-12 19:55:42,556: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 19:55:42,556: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 19:55:52,072: INFO: tpe: build_posterior_wrapper took 0.000922 seconds]
[2024-01-12 19:55:52,073: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 19:56:01,802: INFO: tpe: build_posterior_wrapper took 0.001091 seconds]
[2024-01-12 19:56:01,802: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 19:56:08,865: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:56:08,866: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 19:56:16,089: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 19:56:16,090: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 19:56:23,175: INFO: tpe: build_posterior_wrapper took 0.001011 seconds]
[2024-01-12 19:56:23,175: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 19:56:30,069: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 19:56:30,070: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 19:56:39,835: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 19:56:39,836: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 19:56:52,084: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-12 19:56:54,534: INFO: utils: yaml file is saved]
[2024-01-12 19:56:54,534: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-12 19:56:54,536: INFO: utils: yaml file is saved]
[2024-01-12 19:56:54,536: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-12 19:56:54,537: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-12 20:38:47,779: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 20:38:47,786: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:38:47,815: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 20:38:47,831: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 20:38:47,832: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 20:38:47,973: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 20:38:47,980: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:39:19,327: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 20:39:19,327: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:39:22,376: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:39:22,377: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 20:39:25,455: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:39:25,456: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 20:39:28,541: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:39:28,541: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 20:39:31,678: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 20:39:31,679: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 20:39:34,742: INFO: tpe: build_posterior_wrapper took 0.000919 seconds]
[2024-01-12 20:39:34,743: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 20:39:37,986: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 20:39:37,987: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 20:39:41,149: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:39:41,150: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 20:39:44,104: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:39:44,105: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 20:39:47,052: INFO: tpe: build_posterior_wrapper took 0.000922 seconds]
[2024-01-12 20:39:47,052: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 20:39:50,084: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:39:50,566: INFO: tpe: build_posterior_wrapper took 0.001077 seconds]
[2024-01-12 20:39:50,567: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:39:50,613: INFO: tpe: build_posterior_wrapper took 0.000989 seconds]
[2024-01-12 20:39:50,614: INFO: tpe: TPE using 1/1 trials with best loss 342180.000000]
[2024-01-12 20:39:50,648: INFO: tpe: build_posterior_wrapper took 0.001020 seconds]
[2024-01-12 20:39:50,649: INFO: tpe: TPE using 2/2 trials with best loss 111470.000000]
[2024-01-12 20:39:50,688: INFO: tpe: build_posterior_wrapper took 0.000922 seconds]
[2024-01-12 20:39:50,689: INFO: tpe: TPE using 3/3 trials with best loss 111470.000000]
[2024-01-12 20:39:50,734: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:39:50,735: INFO: tpe: TPE using 4/4 trials with best loss 111470.000000]
[2024-01-12 20:39:50,806: INFO: tpe: build_posterior_wrapper took 0.001025 seconds]
[2024-01-12 20:39:50,807: INFO: tpe: TPE using 5/5 trials with best loss 95930.000000]
[2024-01-12 20:39:50,829: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 20:39:50,830: INFO: tpe: TPE using 6/6 trials with best loss 95930.000000]
[2024-01-12 20:39:50,854: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 20:39:50,854: INFO: tpe: TPE using 7/7 trials with best loss 95930.000000]
[2024-01-12 20:39:50,877: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 20:39:50,879: INFO: tpe: TPE using 8/8 trials with best loss 95930.000000]
[2024-01-12 20:39:50,919: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:39:50,920: INFO: tpe: TPE using 9/9 trials with best loss 95930.000000]
[2024-01-12 20:39:50,975: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:39:55,518: INFO: tpe: build_posterior_wrapper took 0.001079 seconds]
[2024-01-12 20:39:55,519: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:39:55,642: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 20:39:55,642: INFO: tpe: TPE using 1/1 trials with best loss 112730.000000]
[2024-01-12 20:39:56,295: INFO: tpe: build_posterior_wrapper took 0.001065 seconds]
[2024-01-12 20:39:56,296: INFO: tpe: TPE using 2/2 trials with best loss 96220.000000]
[2024-01-12 20:39:57,061: INFO: tpe: build_posterior_wrapper took 0.001049 seconds]
[2024-01-12 20:39:57,062: INFO: tpe: TPE using 3/3 trials with best loss 96220.000000]
[2024-01-12 20:39:57,673: INFO: tpe: build_posterior_wrapper took 0.001077 seconds]
[2024-01-12 20:39:57,673: INFO: tpe: TPE using 4/4 trials with best loss 96220.000000]
[2024-01-12 20:39:58,349: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 20:39:58,350: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 20:39:58,396: INFO: tpe: build_posterior_wrapper took 0.001977 seconds]
[2024-01-12 20:39:58,396: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 20:39:59,076: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:39:59,077: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 20:39:59,688: INFO: tpe: build_posterior_wrapper took 0.001201 seconds]
[2024-01-12 20:39:59,688: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 20:40:00,305: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:40:00,306: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 20:40:04,894: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:41:30,388: INFO: tpe: build_posterior_wrapper took 0.000883 seconds]
[2024-01-12 20:41:30,389: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:41:41,184: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 20:41:41,184: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 20:41:48,683: INFO: tpe: build_posterior_wrapper took 0.000917 seconds]
[2024-01-12 20:41:48,684: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 20:41:56,250: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 20:41:56,250: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 20:42:03,889: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:42:03,890: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 20:42:11,544: INFO: tpe: build_posterior_wrapper took 0.001012 seconds]
[2024-01-12 20:42:11,544: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 20:42:19,296: INFO: tpe: build_posterior_wrapper took 0.000918 seconds]
[2024-01-12 20:42:19,297: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 20:42:30,002: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:42:30,003: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 20:42:40,901: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 20:42:40,902: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 20:42:48,538: INFO: tpe: build_posterior_wrapper took 0.000735 seconds]
[2024-01-12 20:42:48,538: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 20:43:03,240: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-12 20:43:06,346: INFO: utils: yaml file is saved]
[2024-01-12 20:43:06,347: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-12 20:43:06,355: INFO: utils: yaml file is saved]
[2024-01-12 20:43:06,356: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-12 20:43:06,358: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-12 20:48:20,020: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 20:48:20,027: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:48:20,043: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 20:48:20,059: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 20:48:20,060: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 20:48:20,229: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 20:48:20,238: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:48:51,810: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 20:48:51,810: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:48:54,882: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 20:48:54,883: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 20:48:57,869: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:48:57,870: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 20:49:00,854: INFO: tpe: build_posterior_wrapper took 0.001007 seconds]
[2024-01-12 20:49:00,854: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 20:49:03,906: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:49:03,908: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 20:49:06,981: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:49:06,982: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 20:49:10,046: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 20:49:10,047: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 20:49:12,992: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:49:12,993: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 20:49:16,223: INFO: tpe: build_posterior_wrapper took 0.001019 seconds]
[2024-01-12 20:49:16,224: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 20:49:19,262: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:49:19,263: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 20:49:22,247: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:49:22,863: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:49:22,865: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:49:22,894: INFO: tpe: build_posterior_wrapper took 0.001004 seconds]
[2024-01-12 20:49:22,895: INFO: tpe: TPE using 1/1 trials with best loss 344870.000000]
[2024-01-12 20:49:22,933: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 20:49:22,934: INFO: tpe: TPE using 2/2 trials with best loss 65920.000000]
[2024-01-12 20:49:22,973: INFO: tpe: build_posterior_wrapper took 0.001034 seconds]
[2024-01-12 20:49:22,973: INFO: tpe: TPE using 3/3 trials with best loss 65920.000000]
[2024-01-12 20:49:22,994: INFO: tpe: build_posterior_wrapper took 0.000890 seconds]
[2024-01-12 20:49:22,994: INFO: tpe: TPE using 4/4 trials with best loss 65920.000000]
[2024-01-12 20:49:23,024: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 20:49:23,025: INFO: tpe: TPE using 5/5 trials with best loss 65920.000000]
[2024-01-12 20:49:23,053: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:49:23,053: INFO: tpe: TPE using 6/6 trials with best loss 4090.000000]
[2024-01-12 20:49:23,080: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 20:49:23,082: INFO: tpe: TPE using 7/7 trials with best loss 4090.000000]
[2024-01-12 20:49:23,145: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:49:23,146: INFO: tpe: TPE using 8/8 trials with best loss 4090.000000]
[2024-01-12 20:49:23,189: INFO: tpe: build_posterior_wrapper took 0.001999 seconds]
[2024-01-12 20:49:23,189: INFO: tpe: TPE using 9/9 trials with best loss 4090.000000]
[2024-01-12 20:49:23,301: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:49:27,361: INFO: tpe: build_posterior_wrapper took 0.000979 seconds]
[2024-01-12 20:49:27,361: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:49:27,989: INFO: tpe: build_posterior_wrapper took 0.001078 seconds]
[2024-01-12 20:49:27,989: INFO: tpe: TPE using 1/1 trials with best loss 144690.000000]
[2024-01-12 20:49:28,098: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:49:28,099: INFO: tpe: TPE using 2/2 trials with best loss 110230.000000]
[2024-01-12 20:49:28,208: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 20:49:28,208: INFO: tpe: TPE using 3/3 trials with best loss 110230.000000]
[2024-01-12 20:49:28,246: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:49:28,246: INFO: tpe: TPE using 4/4 trials with best loss 110230.000000]
[2024-01-12 20:49:28,915: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:49:28,916: INFO: tpe: TPE using 5/5 trials with best loss 96220.000000]
[2024-01-12 20:49:29,614: INFO: tpe: build_posterior_wrapper took 0.001013 seconds]
[2024-01-12 20:49:29,615: INFO: tpe: TPE using 6/6 trials with best loss 96220.000000]
[2024-01-12 20:49:30,286: INFO: tpe: build_posterior_wrapper took 0.001054 seconds]
[2024-01-12 20:49:30,287: INFO: tpe: TPE using 7/7 trials with best loss 96220.000000]
[2024-01-12 20:49:30,327: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:49:30,328: INFO: tpe: TPE using 8/8 trials with best loss 96220.000000]
[2024-01-12 20:49:30,377: INFO: tpe: build_posterior_wrapper took 0.001995 seconds]
[2024-01-12 20:49:30,377: INFO: tpe: TPE using 9/9 trials with best loss 96220.000000]
[2024-01-12 20:49:31,100: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:50:46,434: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:50:46,434: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:50:53,407: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:50:53,408: INFO: tpe: TPE using 1/1 trials with best loss 297570.000000]
[2024-01-12 20:51:00,494: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:51:00,495: INFO: tpe: TPE using 2/2 trials with best loss 86010.000000]
[2024-01-12 20:51:07,386: INFO: tpe: build_posterior_wrapper took 0.001060 seconds]
[2024-01-12 20:51:07,387: INFO: tpe: TPE using 3/3 trials with best loss 86010.000000]
[2024-01-12 20:51:14,723: INFO: tpe: build_posterior_wrapper took 0.002009 seconds]
[2024-01-12 20:51:14,723: INFO: tpe: TPE using 4/4 trials with best loss 86010.000000]
[2024-01-12 20:51:21,582: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 20:51:21,583: INFO: tpe: TPE using 5/5 trials with best loss 86010.000000]
[2024-01-12 20:51:28,568: INFO: tpe: build_posterior_wrapper took 0.000911 seconds]
[2024-01-12 20:51:28,569: INFO: tpe: TPE using 6/6 trials with best loss 86010.000000]
[2024-01-12 20:51:35,629: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:51:35,629: INFO: tpe: TPE using 7/7 trials with best loss 86010.000000]
[2024-01-12 20:51:43,004: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:51:43,005: INFO: tpe: TPE using 8/8 trials with best loss 86010.000000]
[2024-01-12 20:51:50,120: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 20:51:50,120: INFO: tpe: TPE using 9/9 trials with best loss 86010.000000]
[2024-01-12 20:52:00,421: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-12 20:52:03,231: INFO: utils: yaml file is saved]
[2024-01-12 20:52:03,232: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-12 20:52:03,233: INFO: utils: yaml file is saved]
[2024-01-12 20:52:03,234: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-12 20:52:03,235: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-12 20:56:29,334: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 20:56:29,341: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:56:29,354: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 20:56:29,370: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 20:56:29,371: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 20:56:29,503: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 20:56:29,509: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:57:01,113: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:01,113: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:57:04,220: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:04,221: INFO: tpe: TPE using 1/1 trials with best loss 7230.000000]
[2024-01-12 20:57:07,185: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:07,186: INFO: tpe: TPE using 2/2 trials with best loss 7230.000000]
[2024-01-12 20:57:10,309: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:10,310: INFO: tpe: TPE using 3/3 trials with best loss 7230.000000]
[2024-01-12 20:57:13,285: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:13,286: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 20:57:16,246: INFO: tpe: build_posterior_wrapper took 0.001048 seconds]
[2024-01-12 20:57:16,246: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 20:57:19,318: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:19,319: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 20:57:22,283: INFO: tpe: build_posterior_wrapper took 0.000912 seconds]
[2024-01-12 20:57:22,283: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 20:57:25,348: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 20:57:25,349: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 20:57:28,342: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:28,342: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 20:57:31,294: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:57:31,651: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 20:57:31,653: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:57:31,698: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 20:57:31,698: INFO: tpe: TPE using 1/1 trials with best loss 498120.000000]
[2024-01-12 20:57:31,718: INFO: tpe: build_posterior_wrapper took 0.002000 seconds]
[2024-01-12 20:57:31,720: INFO: tpe: TPE using 2/2 trials with best loss 258060.000000]
[2024-01-12 20:57:31,790: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 20:57:31,791: INFO: tpe: TPE using 3/3 trials with best loss 108980.000000]
[2024-01-12 20:57:31,868: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:31,869: INFO: tpe: TPE using 4/4 trials with best loss 108980.000000]
[2024-01-12 20:57:31,901: INFO: tpe: build_posterior_wrapper took 0.000993 seconds]
[2024-01-12 20:57:31,903: INFO: tpe: TPE using 5/5 trials with best loss 108980.000000]
[2024-01-12 20:57:31,931: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:31,932: INFO: tpe: TPE using 6/6 trials with best loss 108980.000000]
[2024-01-12 20:57:31,985: INFO: tpe: build_posterior_wrapper took 0.001030 seconds]
[2024-01-12 20:57:31,987: INFO: tpe: TPE using 7/7 trials with best loss 108980.000000]
[2024-01-12 20:57:32,014: INFO: tpe: build_posterior_wrapper took 0.000995 seconds]
[2024-01-12 20:57:32,016: INFO: tpe: TPE using 8/8 trials with best loss 47110.000000]
[2024-01-12 20:57:32,076: INFO: tpe: build_posterior_wrapper took 0.000988 seconds]
[2024-01-12 20:57:32,077: INFO: tpe: TPE using 9/9 trials with best loss 47110.000000]
[2024-01-12 20:57:32,126: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:57:34,824: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:57:34,824: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:57:35,460: INFO: tpe: build_posterior_wrapper took 0.001009 seconds]
[2024-01-12 20:57:35,460: INFO: tpe: TPE using 1/1 trials with best loss 109220.000000]
[2024-01-12 20:57:35,501: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:57:35,502: INFO: tpe: TPE using 2/2 trials with best loss 109220.000000]
[2024-01-12 20:57:35,620: INFO: tpe: build_posterior_wrapper took 0.000981 seconds]
[2024-01-12 20:57:35,621: INFO: tpe: TPE using 3/3 trials with best loss 109220.000000]
[2024-01-12 20:57:36,312: INFO: tpe: build_posterior_wrapper took 0.000972 seconds]
[2024-01-12 20:57:36,313: INFO: tpe: TPE using 4/4 trials with best loss 96230.000000]
[2024-01-12 20:57:36,430: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 20:57:36,431: INFO: tpe: TPE using 5/5 trials with best loss 96230.000000]
[2024-01-12 20:57:37,183: INFO: tpe: build_posterior_wrapper took 0.001006 seconds]
[2024-01-12 20:57:37,184: INFO: tpe: TPE using 6/6 trials with best loss 96230.000000]
[2024-01-12 20:57:37,313: INFO: tpe: build_posterior_wrapper took 0.001081 seconds]
[2024-01-12 20:57:37,313: INFO: tpe: TPE using 7/7 trials with best loss 96230.000000]
[2024-01-12 20:57:38,043: INFO: tpe: build_posterior_wrapper took 0.002001 seconds]
[2024-01-12 20:57:38,044: INFO: tpe: TPE using 8/8 trials with best loss 96230.000000]
[2024-01-12 20:57:38,188: INFO: tpe: build_posterior_wrapper took 0.001017 seconds]
[2024-01-12 20:57:38,189: INFO: tpe: TPE using 9/9 trials with best loss 96230.000000]
[2024-01-12 20:57:42,128: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 20:59:09,145: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:59:09,146: INFO: tpe: TPE using 0 trials]
[2024-01-12 20:59:16,066: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 20:59:16,067: INFO: tpe: TPE using 1/1 trials with best loss 223090.000000]
[2024-01-12 20:59:23,202: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 20:59:23,202: INFO: tpe: TPE using 2/2 trials with best loss 159130.000000]
[2024-01-12 20:59:30,342: INFO: tpe: build_posterior_wrapper took 0.000998 seconds]
[2024-01-12 20:59:30,342: INFO: tpe: TPE using 3/3 trials with best loss 98670.000000]
[2024-01-12 20:59:40,500: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-12 20:59:40,500: INFO: tpe: TPE using 4/4 trials with best loss 7230.000000]
[2024-01-12 20:59:47,546: INFO: tpe: build_posterior_wrapper took 0.002002 seconds]
[2024-01-12 20:59:47,546: INFO: tpe: TPE using 5/5 trials with best loss 7230.000000]
[2024-01-12 20:59:57,548: INFO: tpe: build_posterior_wrapper took 0.000999 seconds]
[2024-01-12 20:59:57,549: INFO: tpe: TPE using 6/6 trials with best loss 7230.000000]
[2024-01-12 21:00:04,773: INFO: tpe: build_posterior_wrapper took 0.001002 seconds]
[2024-01-12 21:00:04,774: INFO: tpe: TPE using 7/7 trials with best loss 7230.000000]
[2024-01-12 21:00:14,923: INFO: tpe: build_posterior_wrapper took 0.001034 seconds]
[2024-01-12 21:00:14,924: INFO: tpe: TPE using 8/8 trials with best loss 7230.000000]
[2024-01-12 21:00:21,982: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:00:21,983: INFO: tpe: TPE using 9/9 trials with best loss 7230.000000]
[2024-01-12 21:00:35,381: INFO: 5_model_training: Saving metrics.yaml file at artifacts\metrics\metrics.yaml]
[2024-01-12 21:00:38,500: INFO: utils: yaml file is saved]
[2024-01-12 21:00:38,502: INFO: 5_model_training: Saving best_metrics.yaml file at artifacts\metrics\best_metric.yaml]
[2024-01-12 21:00:38,506: INFO: utils: yaml file is saved]
[2024-01-12 21:00:38,507: INFO: 5_model_training: Saving model at artifacts\model\model.joblib]
[2024-01-12 21:00:38,516: INFO: utils: object: artifacts\model\model.joblib pickled]
[2024-01-12 21:06:00,418: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 21:06:00,428: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 21:06:00,447: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:06:01,966: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 21:06:01,977: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 21:06:01,991: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:06:02,010: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:06:02,011: INFO: utils: Stage 2 Processing Commencing]
[2024-01-12 21:06:02,012: INFO: utils: Pipeline created with KnnImputer, RobustScaler]
[2024-01-12 21:06:02,012: INFO: utils: SmoteTomek obj created]
[2024-01-12 21:06:02,033: INFO: utils: Commencing pipeline transformation]
[2024-01-12 21:22:25,030: INFO: utils: Pipeline transformation complete]
[2024-01-12 21:22:25,038: INFO: utils: Commencing SmoteTomek]
[2024-01-12 21:22:52,089: INFO: utils: SmoteTomek Complete]
[2024-01-12 21:22:52,089: INFO: utils: Returning the transformed dataframe]
[2024-01-12 21:22:52,100: INFO: utils: Saving the pipeline object]
[2024-01-12 21:22:52,168: INFO: utils: object: artifacts\preprocessor\preprocessor.joblib pickled]
[2024-01-12 21:22:52,169: INFO: utils: Pipeline saved at: artifacts\preprocessor\preprocessor.joblib]
[2024-01-12 21:22:52,169: INFO: utils: Stage 2 Processing Complete]
[2024-01-12 21:23:08,471: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 21:23:08,487: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 21:23:08,503: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:23:08,520: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:23:08,521: INFO: utils: Stage 2 Processing Commencing]
[2024-01-12 21:23:08,566: INFO: utils: pickled_object: artifacts\preprocessor\preprocessor.joblib loaded]
[2024-01-12 21:23:08,567: INFO: utils: Pipeline loaded & SmoteTomek created]
[2024-01-12 21:23:08,662: INFO: utils: Commencing pipeline transformation]
[2024-01-12 21:28:50,366: INFO: utils: Pipeline transformation complete]
[2024-01-12 21:28:50,372: INFO: utils: Commencing SmoteTomek]
[2024-01-12 21:28:54,090: INFO: utils: SmoteTomek Complete]
[2024-01-12 21:28:54,091: INFO: utils: Returning the transformed dataframe]
[2024-01-12 21:28:54,102: INFO: utils: Stage 2 Processing Complete]
[2024-01-12 21:29:40,919: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 21:29:40,935: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 21:29:40,953: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:29:40,969: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:29:40,970: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 21:29:44,420: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 21:29:44,441: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 21:52:24,758: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 21:52:24,766: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 21:52:24,776: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:52:24,787: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 21:52:24,788: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 21:52:27,353: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 21:52:27,361: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 21:54:43,106: INFO: tpe: build_posterior_wrapper took 0.001019 seconds]
[2024-01-12 21:54:43,106: INFO: tpe: TPE using 0 trials]
[2024-01-12 21:54:56,571: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:54:56,572: INFO: tpe: TPE using 1/1 trials with best loss 473750.000000]
[2024-01-12 21:55:09,997: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:55:09,999: INFO: tpe: TPE using 2/2 trials with best loss 473750.000000]
[2024-01-12 21:55:23,495: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:55:23,496: INFO: tpe: TPE using 3/3 trials with best loss 473750.000000]
[2024-01-12 21:55:36,998: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 21:55:36,998: INFO: tpe: TPE using 4/4 trials with best loss 473750.000000]
[2024-01-12 21:55:50,446: INFO: tpe: build_posterior_wrapper took 0.000904 seconds]
[2024-01-12 21:55:50,447: INFO: tpe: TPE using 5/5 trials with best loss 473740.000000]
[2024-01-12 21:56:03,910: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:56:03,911: INFO: tpe: TPE using 6/6 trials with best loss 473730.000000]
[2024-01-12 21:56:17,435: INFO: tpe: build_posterior_wrapper took 0.001031 seconds]
[2024-01-12 21:56:17,435: INFO: tpe: TPE using 7/7 trials with best loss 473730.000000]
[2024-01-12 21:56:31,029: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:56:31,030: INFO: tpe: TPE using 8/8 trials with best loss 473720.000000]
[2024-01-12 21:56:44,445: INFO: tpe: build_posterior_wrapper took 0.001001 seconds]
[2024-01-12 21:56:44,445: INFO: tpe: TPE using 9/9 trials with best loss 473720.000000]
[2024-01-12 21:56:57,903: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 21:58:31,401: INFO: tpe: build_posterior_wrapper took 0.000919 seconds]
[2024-01-12 21:58:31,401: INFO: tpe: TPE using 0 trials]
[2024-01-12 21:58:33,813: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:58:33,814: INFO: tpe: TPE using 1/1 trials with best loss 928400.000000]
[2024-01-12 21:58:41,442: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 21:58:41,442: INFO: tpe: TPE using 2/2 trials with best loss 928400.000000]
[2024-01-12 21:58:43,234: INFO: tpe: build_posterior_wrapper took 0.000973 seconds]
[2024-01-12 21:58:43,235: INFO: tpe: TPE using 3/3 trials with best loss 928400.000000]
[2024-01-12 21:58:45,674: INFO: tpe: build_posterior_wrapper took 0.000916 seconds]
[2024-01-12 21:58:45,675: INFO: tpe: TPE using 4/4 trials with best loss 928400.000000]
[2024-01-12 21:58:49,197: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:58:49,198: INFO: tpe: TPE using 5/5 trials with best loss 880940.000000]
[2024-01-12 21:58:54,831: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:58:54,832: INFO: tpe: TPE using 6/6 trials with best loss 880940.000000]
[2024-01-12 21:58:57,740: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:58:57,740: INFO: tpe: TPE using 7/7 trials with best loss 879890.000000]
[2024-01-12 21:59:03,233: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 21:59:03,234: INFO: tpe: TPE using 8/8 trials with best loss 879890.000000]
[2024-01-12 21:59:05,848: INFO: tpe: build_posterior_wrapper took 0.001003 seconds]
[2024-01-12 21:59:05,849: INFO: tpe: TPE using 9/9 trials with best loss 879890.000000]
[2024-01-12 21:59:09,179: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 22:38:53,772: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 22:38:53,780: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 22:38:53,789: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 22:38:53,799: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 22:38:53,799: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 22:38:56,053: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 22:38:56,061: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 22:41:08,823: INFO: tpe: build_posterior_wrapper took 0.000996 seconds]
[2024-01-12 22:41:08,823: INFO: tpe: TPE using 0 trials]
[2024-01-12 22:41:22,162: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:41:22,163: INFO: tpe: TPE using 1/1 trials with best loss 473750.000000]
[2024-01-12 22:41:35,541: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:41:35,541: INFO: tpe: TPE using 2/2 trials with best loss 473750.000000]
[2024-01-12 22:41:48,836: INFO: tpe: build_posterior_wrapper took 0.000902 seconds]
[2024-01-12 22:41:48,836: INFO: tpe: TPE using 3/3 trials with best loss 473750.000000]
[2024-01-12 22:42:02,221: INFO: tpe: build_posterior_wrapper took 0.000952 seconds]
[2024-01-12 22:42:02,221: INFO: tpe: TPE using 4/4 trials with best loss 473750.000000]
[2024-01-12 22:42:16,119: INFO: tpe: build_posterior_wrapper took 0.000903 seconds]
[2024-01-12 22:42:16,119: INFO: tpe: TPE using 5/5 trials with best loss 473750.000000]
[2024-01-12 22:42:29,414: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:42:29,415: INFO: tpe: TPE using 6/6 trials with best loss 473740.000000]
[2024-01-12 22:42:43,391: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:42:43,392: INFO: tpe: TPE using 7/7 trials with best loss 473740.000000]
[2024-01-12 22:42:56,760: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:42:56,761: INFO: tpe: TPE using 8/8 trials with best loss 473730.000000]
[2024-01-12 22:43:10,172: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:43:10,173: INFO: tpe: TPE using 9/9 trials with best loss 473730.000000]
[2024-01-12 22:43:24,905: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 22:48:25,548: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:48:25,549: INFO: tpe: TPE using 0 trials]
[2024-01-12 22:48:28,580: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:48:28,581: INFO: tpe: TPE using 1/1 trials with best loss 1122040.000000]
[2024-01-12 22:49:12,077: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:49:12,078: INFO: tpe: TPE using 2/2 trials with best loss 1122040.000000]
[2024-01-12 22:49:14,331: INFO: tpe: build_posterior_wrapper took 0.001018 seconds]
[2024-01-12 22:49:14,332: INFO: tpe: TPE using 3/3 trials with best loss 925180.000000]
[2024-01-12 22:49:20,429: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:49:20,430: INFO: tpe: TPE using 4/4 trials with best loss 925180.000000]
[2024-01-12 22:49:22,556: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:49:22,556: INFO: tpe: TPE using 5/5 trials with best loss 912830.000000]
[2024-01-12 22:49:24,351: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:49:24,352: INFO: tpe: TPE using 6/6 trials with best loss 912830.000000]
[2024-01-12 22:49:25,537: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:49:25,538: INFO: tpe: TPE using 7/7 trials with best loss 827380.000000]
[2024-01-12 22:49:28,547: INFO: tpe: build_posterior_wrapper took 0.000912 seconds]
[2024-01-12 22:49:28,548: INFO: tpe: TPE using 8/8 trials with best loss 827380.000000]
[2024-01-12 22:49:34,450: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 22:49:34,451: INFO: tpe: TPE using 9/9 trials with best loss 827380.000000]
[2024-01-12 22:50:20,201: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 23:17:08,809: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-12 23:17:08,827: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 23:17:08,851: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 23:17:08,867: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-12 23:17:08,868: INFO: 5_model_training: loading training and testing datasets]
[2024-01-12 23:17:11,933: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-12 23:17:11,943: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 23:19:35,701: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:19:35,702: INFO: tpe: TPE using 0 trials]
[2024-01-12 23:19:48,667: INFO: tpe: build_posterior_wrapper took 0.000997 seconds]
[2024-01-12 23:19:48,667: INFO: tpe: TPE using 1/1 trials with best loss 473730.000000]
[2024-01-12 23:20:01,567: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:20:01,568: INFO: tpe: TPE using 2/2 trials with best loss 473720.000000]
[2024-01-12 23:20:14,980: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:20:14,981: INFO: tpe: TPE using 3/3 trials with best loss 473720.000000]
[2024-01-12 23:20:27,895: INFO: tpe: build_posterior_wrapper took 0.001022 seconds]
[2024-01-12 23:20:27,896: INFO: tpe: TPE using 4/4 trials with best loss 473720.000000]
[2024-01-12 23:20:41,289: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:20:41,290: INFO: tpe: TPE using 5/5 trials with best loss 473720.000000]
[2024-01-12 23:20:54,618: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:20:54,619: INFO: tpe: TPE using 6/6 trials with best loss 473720.000000]
[2024-01-12 23:21:08,028: INFO: tpe: build_posterior_wrapper took 0.000914 seconds]
[2024-01-12 23:21:08,029: INFO: tpe: TPE using 7/7 trials with best loss 473720.000000]
[2024-01-12 23:21:21,379: INFO: tpe: build_posterior_wrapper took 0.001025 seconds]
[2024-01-12 23:21:21,380: INFO: tpe: TPE using 8/8 trials with best loss 473720.000000]
[2024-01-12 23:21:34,803: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:21:34,803: INFO: tpe: TPE using 9/9 trials with best loss 473720.000000]
[2024-01-12 23:21:48,179: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-12 23:23:50,616: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:23:50,617: INFO: tpe: TPE using 0 trials]
[2024-01-12 23:23:52,325: INFO: tpe: build_posterior_wrapper took 0.001010 seconds]
[2024-01-12 23:23:52,326: INFO: tpe: TPE using 1/1 trials with best loss 1095290.000000]
[2024-01-12 23:23:53,976: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:23:53,977: INFO: tpe: TPE using 2/2 trials with best loss 841980.000000]
[2024-01-12 23:24:36,491: INFO: tpe: build_posterior_wrapper took 0.000916 seconds]
[2024-01-12 23:24:36,491: INFO: tpe: TPE using 3/3 trials with best loss 841980.000000]
[2024-01-12 23:24:39,292: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:24:39,293: INFO: tpe: TPE using 4/4 trials with best loss 841980.000000]
[2024-01-12 23:24:41,219: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:24:41,220: INFO: tpe: TPE using 5/5 trials with best loss 841980.000000]
[2024-01-12 23:25:23,789: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-12 23:25:23,790: INFO: tpe: TPE using 6/6 trials with best loss 841980.000000]
[2024-01-12 23:25:30,370: INFO: tpe: build_posterior_wrapper took 0.001008 seconds]
[2024-01-12 23:25:30,371: INFO: tpe: TPE using 7/7 trials with best loss 841980.000000]
[2024-01-12 23:25:33,253: INFO: tpe: build_posterior_wrapper took 0.000937 seconds]
[2024-01-12 23:25:33,254: INFO: tpe: TPE using 8/8 trials with best loss 841980.000000]
[2024-01-12 23:25:35,102: INFO: tpe: build_posterior_wrapper took 0.000910 seconds]
[2024-01-12 23:25:35,102: INFO: tpe: TPE using 9/9 trials with best loss 841980.000000]
[2024-01-12 23:25:38,987: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-13 07:15:19,563: INFO: utils: config.yaml yaml_file is loaded]
[2024-01-13 07:15:19,570: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-13 07:15:19,583: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-13 07:15:19,592: INFO: utils: schema.yaml yaml_file is loaded]
[2024-01-13 07:15:19,593: INFO: 5_model_training: loading training and testing datasets]
[2024-01-13 07:15:21,814: INFO: 5_model_training: Commencing models hyper-parameter tuning]
[2024-01-13 07:15:21,822: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-13 07:17:26,683: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:17:26,684: INFO: tpe: TPE using 0 trials]
[2024-01-13 07:17:39,260: INFO: tpe: build_posterior_wrapper took 0.000909 seconds]
[2024-01-13 07:17:39,260: INFO: tpe: TPE using 1/1 trials with best loss 473750.000000]
[2024-01-13 07:17:52,002: INFO: tpe: build_posterior_wrapper took 0.000916 seconds]
[2024-01-13 07:17:52,002: INFO: tpe: TPE using 2/2 trials with best loss 473750.000000]
[2024-01-13 07:18:04,669: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:18:04,670: INFO: tpe: TPE using 3/3 trials with best loss 473740.000000]
[2024-01-13 07:18:17,343: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:18:17,344: INFO: tpe: TPE using 4/4 trials with best loss 473730.000000]
[2024-01-13 07:18:29,946: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:18:29,947: INFO: tpe: TPE using 5/5 trials with best loss 473730.000000]
[2024-01-13 07:18:42,729: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:18:42,729: INFO: tpe: TPE using 6/6 trials with best loss 473730.000000]
[2024-01-13 07:18:55,488: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:18:55,489: INFO: tpe: TPE using 7/7 trials with best loss 473730.000000]
[2024-01-13 07:19:08,293: INFO: tpe: build_posterior_wrapper took 0.000905 seconds]
[2024-01-13 07:19:08,294: INFO: tpe: TPE using 8/8 trials with best loss 473730.000000]
[2024-01-13 07:19:22,388: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-13 07:19:22,388: INFO: tpe: TPE using 9/9 trials with best loss 473730.000000]
[2024-01-13 07:19:41,986: INFO: utils: params.yaml yaml_file is loaded]
[2024-01-13 07:21:29,031: INFO: tpe: build_posterior_wrapper took 0.001019 seconds]
[2024-01-13 07:21:29,031: INFO: tpe: TPE using 0 trials]
[2024-01-13 07:21:30,849: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:21:30,850: INFO: tpe: TPE using 1/1 trials with best loss 933380.000000]
[2024-01-13 07:21:34,518: INFO: tpe: build_posterior_wrapper took 0.000904 seconds]
[2024-01-13 07:21:34,518: INFO: tpe: TPE using 2/2 trials with best loss 895440.000000]
[2024-01-13 07:21:36,460: INFO: tpe: build_posterior_wrapper took 0.001000 seconds]
[2024-01-13 07:21:36,460: INFO: tpe: TPE using 3/3 trials with best loss 895440.000000]
[2024-01-13 07:22:19,019: INFO: tpe: build_posterior_wrapper took 0.000921 seconds]
[2024-01-13 07:22:19,020: INFO: tpe: TPE using 4/4 trials with best loss 895440.000000]
[2024-01-13 07:22:21,963: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:22:21,964: INFO: tpe: TPE using 5/5 trials with best loss 869400.000000]
[2024-01-13 07:22:31,761: INFO: tpe: build_posterior_wrapper took 0.000908 seconds]
[2024-01-13 07:22:31,762: INFO: tpe: TPE using 6/6 trials with best loss 869400.000000]
[2024-01-13 07:22:34,978: INFO: tpe: build_posterior_wrapper took 0.000953 seconds]
[2024-01-13 07:22:34,978: INFO: tpe: TPE using 7/7 trials with best loss 869400.000000]
[2024-01-13 07:22:36,919: INFO: tpe: build_posterior_wrapper took 0.000875 seconds]
[2024-01-13 07:22:36,920: INFO: tpe: TPE using 8/8 trials with best loss 869400.000000]
[2024-01-13 07:23:19,512: INFO: tpe: build_posterior_wrapper took 0.000000 seconds]
[2024-01-13 07:23:19,512: INFO: tpe: TPE using 9/9 trials with best loss 869400.000000]
[2024-01-13 07:23:22,420: INFO: utils: params.yaml yaml_file is loaded]
